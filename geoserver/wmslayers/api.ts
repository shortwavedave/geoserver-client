// tslint:disable
/**
 * GeoServer WMS Store Layers
 * A WMS store is a store whose source is another WMS. Also known as \"Cascading WMS\" or \"External WMS\". A WMS store layer is a layer from this store.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MetadataEntry
 */
export interface MetadataEntry {
    /**
     * Key used for metadata entry
     * @type {string}
     * @memberof MetadataEntry
     */
    key?: MetadataEntryKeyEnum;
    /**
     * Value of given key
     * @type {string}
     * @memberof MetadataEntry
     */
    text?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MetadataEntryKeyEnum {
    RegionateStrategy = 'regionateStrategy',
    RegionateFeatureLimit = 'regionateFeatureLimit',
    CacheAgeMax = 'cacheAgeMax',
    CachingEnabled = 'cachingEnabled',
    RegionateAttribute = 'regionateAttribute',
    IndexingEnabled = 'indexingEnabled',
    DirName = 'dirName'
}

/**
 * 
 * @export
 * @interface StyleInfo
 */
export interface StyleInfo {
    /**
     * Name of remote style
     * @type {string}
     * @memberof StyleInfo
     */
    name?: string;
    /**
     * format of style
     * @type {string}
     * @memberof StyleInfo
     */
    format?: string;
    /**
     * 
     * @type {StyleInfoLanguageVersion}
     * @memberof StyleInfo
     */
    languageVersion?: StyleInfoLanguageVersion;
    /**
     * 
     * @type {StyleInfoLegend}
     * @memberof StyleInfo
     */
    legend?: StyleInfoLegend;
}
/**
 * 
 * @export
 * @interface StyleInfoLanguageVersion
 */
export interface StyleInfoLanguageVersion {
    /**
     * versioon of format
     * @type {string}
     * @memberof StyleInfoLanguageVersion
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface StyleInfoLegend
 */
export interface StyleInfoLegend {
    /**
     * width of remote legend graphic
     * @type {number}
     * @memberof StyleInfoLegend
     */
    width?: number;
    /**
     * height of remote legend graphics
     * @type {number}
     * @memberof StyleInfoLegend
     */
    height?: number;
    /**
     * image format of legend graphic
     * @type {string}
     * @memberof StyleInfoLegend
     */
    format?: string;
    /**
     * GetLegendGraphic request URL
     * @type {string}
     * @memberof StyleInfoLegend
     */
    onlineResource?: string;
}
/**
 * 
 * @export
 * @interface WMSStoreLayerInfo
 */
export interface WMSStoreLayerInfo {
    /**
     * Name of the layer, corresponding to the published name of the resource
     * @type {string}
     * @memberof WMSStoreLayerInfo
     */
    name?: string;
    /**
     * Name of the layer as known on the remote WMS
     * @type {string}
     * @memberof WMSStoreLayerInfo
     */
    nativeName?: string;
    /**
     * 
     * @type {WMSStoreLayerInfoNamespace}
     * @memberof WMSStoreLayerInfo
     */
    namespace?: WMSStoreLayerInfoNamespace;
    /**
     * Title of the layer
     * @type {string}
     * @memberof WMSStoreLayerInfo
     */
    title?: string;
    /**
     * Description of the layer
     * @type {string}
     * @memberof WMSStoreLayerInfo
     */
    _abstract?: string;
    /**
     * Same as abstract
     * @type {string}
     * @memberof WMSStoreLayerInfo
     */
    description?: string;
    /**
     * Collection of keywords associated with the layer
     * @type {Array<WMSStoreLayerInfoKeywords>}
     * @memberof WMSStoreLayerInfo
     */
    keywords?: Array<WMSStoreLayerInfoKeywords>;
    /**
     * 
     * @type {WMSStoreLayerInfoMetadatalinks}
     * @memberof WMSStoreLayerInfo
     */
    metadatalinks?: WMSStoreLayerInfoMetadatalinks;
    /**
     * 
     * @type {WMSStoreLayerInfoDataLinks}
     * @memberof WMSStoreLayerInfo
     */
    dataLinks?: WMSStoreLayerInfoDataLinks;
    /**
     * Native coordinate reference system object in WKT
     * @type {string}
     * @memberof WMSStoreLayerInfo
     */
    nativeCRS?: string;
    /**
     * Identifier of coordinate reference system
     * @type {string}
     * @memberof WMSStoreLayerInfo
     */
    srs?: string;
    /**
     * 
     * @type {WMSStoreLayerInfoNativeBoundingBox}
     * @memberof WMSStoreLayerInfo
     */
    nativeBoundingBox?: WMSStoreLayerInfoNativeBoundingBox;
    /**
     * 
     * @type {WMSStoreLayerInfoLatLonBoundingBox}
     * @memberof WMSStoreLayerInfo
     */
    latLonBoundingBox?: WMSStoreLayerInfoLatLonBoundingBox;
    /**
     * How to handle the coordinate reference system (native versus declared)
     * @type {string}
     * @memberof WMSStoreLayerInfo
     */
    projectionPolicy?: WMSStoreLayerInfoProjectionPolicyEnum;
    /**
     * Whether the layer is enabled
     * @type {boolean}
     * @memberof WMSStoreLayerInfo
     */
    enabled?: boolean;
    /**
     * A list of key/value metadata pairs.
     * @type {Array<MetadataEntry>}
     * @memberof WMSStoreLayerInfo
     */
    metadata?: Array<MetadataEntry>;
    /**
     * 
     * @type {WMSStoreLayerInfoStore}
     * @memberof WMSStoreLayerInfo
     */
    store?: WMSStoreLayerInfoStore;
    /**
     * Remote style to be used in remote GetMap request.
     * @type {string}
     * @memberof WMSStoreLayerInfo
     */
    forcedRemoteStyle?: string;
    /**
     * Additional list of image formats supported by remote WMS Server.
     * @type {Array<string>}
     * @memberof WMSStoreLayerInfo
     */
    selectedRemoteFormats?: Array<string>;
    /**
     * Output image format to be used in remote GetMap request
     * @type {string}
     * @memberof WMSStoreLayerInfo
     */
    preferredFormat?: string;
    /**
     * Additional list of remote styles that can be used to remote GetMap requests.
     * @type {Array<string>}
     * @memberof WMSStoreLayerInfo
     */
    selectedRemoteStyles?: Array<string>;
    /**
     * List of complete style info objects that contain name, sld format and GetLegendRequests.
     * @type {Array<StyleInfo>}
     * @memberof WMSStoreLayerInfo
     */
    allAvailableRemoteStyles?: Array<StyleInfo>;
    /**
     * minimum scale denominator, works like Scale denomintors in SLD.
     * @type {number}
     * @memberof WMSStoreLayerInfo
     */
    minScale?: number;
    /**
     * maximum scale denominator, works like Scale denomintors in SLD.
     * @type {number}
     * @memberof WMSStoreLayerInfo
     */
    maxScale?: number;
    /**
     * An optimization that skips remote GetMap requests if requested Map is outside advertised bounds.
     * @type {boolean}
     * @memberof WMSStoreLayerInfo
     */
    metadataBBoxRespected?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum WMSStoreLayerInfoProjectionPolicyEnum {
    FORCEDECLARED = 'FORCE_DECLARED',
    REPROJECTTODECLARE = 'REPROJECT_TO_DECLARE',
    NONE = 'NONE'
}

/**
 * Wraps a collection of data links
 * @export
 * @interface WMSStoreLayerInfoDataLinks
 */
export interface WMSStoreLayerInfoDataLinks {
    /**
     * Collection of data links
     * @type {Array<WMSStoreLayerInfoDataLinksMetadataLink>}
     * @memberof WMSStoreLayerInfoDataLinks
     */
    metadataLink?: Array<WMSStoreLayerInfoDataLinksMetadataLink>;
}
/**
 * 
 * @export
 * @interface WMSStoreLayerInfoDataLinksMetadataLink
 */
export interface WMSStoreLayerInfoDataLinksMetadataLink {
    /**
     * MIME type
     * @type {string}
     * @memberof WMSStoreLayerInfoDataLinksMetadataLink
     */
    type?: string;
    /**
     * Link URL
     * @type {string}
     * @memberof WMSStoreLayerInfoDataLinksMetadataLink
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface WMSStoreLayerInfoKeywords
 */
export interface WMSStoreLayerInfoKeywords {
    /**
     * Keyword
     * @type {string}
     * @memberof WMSStoreLayerInfoKeywords
     */
    string?: string;
}
/**
 * Bounds of the layer in latitude / longitude. This value represents a \"fixed value\" and is not calculated.
 * @export
 * @interface WMSStoreLayerInfoLatLonBoundingBox
 */
export interface WMSStoreLayerInfoLatLonBoundingBox {
    /**
     * Min x coordinate
     * @type {number}
     * @memberof WMSStoreLayerInfoLatLonBoundingBox
     */
    minx?: number;
    /**
     * Max x coordinate
     * @type {number}
     * @memberof WMSStoreLayerInfoLatLonBoundingBox
     */
    maxx?: number;
    /**
     * Min y coordinate
     * @type {number}
     * @memberof WMSStoreLayerInfoLatLonBoundingBox
     */
    miny?: number;
    /**
     * Max y coordinate
     * @type {number}
     * @memberof WMSStoreLayerInfoLatLonBoundingBox
     */
    maxy?: number;
    /**
     * Coordinate reference system object of the bounding box
     * @type {string}
     * @memberof WMSStoreLayerInfoLatLonBoundingBox
     */
    crs?: string;
}
/**
 * Wraps a collection of metadata links
 * @export
 * @interface WMSStoreLayerInfoMetadatalinks
 */
export interface WMSStoreLayerInfoMetadatalinks {
    /**
     * A collection of metadata links
     * @type {Array<WMSStoreLayerInfoMetadatalinksMetadataLink>}
     * @memberof WMSStoreLayerInfoMetadatalinks
     */
    metadataLink?: Array<WMSStoreLayerInfoMetadatalinksMetadataLink>;
}
/**
 * 
 * @export
 * @interface WMSStoreLayerInfoMetadatalinksMetadataLink
 */
export interface WMSStoreLayerInfoMetadatalinksMetadataLink {
    /**
     * MIME type
     * @type {string}
     * @memberof WMSStoreLayerInfoMetadatalinksMetadataLink
     */
    type?: string;
    /**
     * Type of metadata such as \"FGDC\"
     * @type {string}
     * @memberof WMSStoreLayerInfoMetadatalinksMetadataLink
     */
    metadataType?: string;
    /**
     * Link URL
     * @type {string}
     * @memberof WMSStoreLayerInfoMetadatalinksMetadataLink
     */
    content?: string;
}
/**
 * Namespace of the layer
 * @export
 * @interface WMSStoreLayerInfoNamespace
 */
export interface WMSStoreLayerInfoNamespace {
    /**
     * Name of the namespace
     * @type {string}
     * @memberof WMSStoreLayerInfoNamespace
     */
    name?: string;
    /**
     * URL to the namespace representation.
     * @type {string}
     * @memberof WMSStoreLayerInfoNamespace
     */
    link?: string;
}
/**
 * Bounds of the layer in its declared CRS.
 * @export
 * @interface WMSStoreLayerInfoNativeBoundingBox
 */
export interface WMSStoreLayerInfoNativeBoundingBox {
    /**
     * Min x coordinate
     * @type {number}
     * @memberof WMSStoreLayerInfoNativeBoundingBox
     */
    minx?: number;
    /**
     * Max x coordinate
     * @type {number}
     * @memberof WMSStoreLayerInfoNativeBoundingBox
     */
    maxx?: number;
    /**
     * Min y coordinate
     * @type {number}
     * @memberof WMSStoreLayerInfoNativeBoundingBox
     */
    miny?: number;
    /**
     * Max y coordinate
     * @type {number}
     * @memberof WMSStoreLayerInfoNativeBoundingBox
     */
    maxy?: number;
    /**
     * Coordinate reference system of the bounding box
     * @type {string}
     * @memberof WMSStoreLayerInfoNativeBoundingBox
     */
    crs?: string;
}
/**
 * Store conaining the resource
 * @export
 * @interface WMSStoreLayerInfoStore
 */
export interface WMSStoreLayerInfoStore {
    /**
     * Class of the store
     * @type {string}
     * @memberof WMSStoreLayerInfoStore
     */
    _class?: string;
    /**
     * Name of the store
     * @type {string}
     * @memberof WMSStoreLayerInfoStore
     */
    name?: string;
    /**
     * URL to the data store
     * @type {string}
     * @memberof WMSStoreLayerInfoStore
     */
    href?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSStoreLayer: async (workspace: string, wmslayer: string, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWMSStoreLayer.');
            }
            // verify required parameter 'wmslayer' is not null or undefined
            if (wmslayer === null || wmslayer === undefined) {
                throw new RequiredError('wmslayer','Required parameter wmslayer was null or undefined when calling deleteWMSStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmslayers/{wmslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmslayer"}}`, encodeURIComponent(String(wmslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSStoreLayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmslayers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {string} wmslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSStoreStoreLayer: async (workspace: string, wmsstore: string, wmslayer: string, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWMSStoreStoreLayer.');
            }
            // verify required parameter 'wmsstore' is not null or undefined
            if (wmsstore === null || wmsstore === undefined) {
                throw new RequiredError('wmsstore','Required parameter wmsstore was null or undefined when calling deleteWMSStoreStoreLayer.');
            }
            // verify required parameter 'wmslayer' is not null or undefined
            if (wmslayer === null || wmslayer === undefined) {
                throw new RequiredError('wmslayer','Required parameter wmslayer was null or undefined when calling deleteWMSStoreStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmsstore"}}`, encodeURIComponent(String(wmsstore)))
                .replace(`{${"wmslayer"}}`, encodeURIComponent(String(wmslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSStoreStoreLayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an individual WMS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers/{wmslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSStoreLayer: async (workspace: string, wmslayer: string, quietOnNotFound?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWMSStoreLayer.');
            }
            // verify required parameter 'wmslayer' is not null or undefined
            if (wmslayer === null || wmslayer === undefined) {
                throw new RequiredError('wmslayer','Required parameter wmslayer was null or undefined when calling getWMSStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmslayers/{wmslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmslayer"}}`, encodeURIComponent(String(wmslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quietOnNotFound !== undefined) {
                localVarQueryParameter['quietOnNotFound'] = quietOnNotFound;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the WMS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSStoreLayers: async (workspace: string, list?: 'available' | 'configured', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWMSStoreLayers.');
            }
            const localVarPath = `/workspaces/{workspace}/wmslayers`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an individual WMS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {string} wmslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSStoreStoreLayer: async (workspace: string, wmsstore: string, wmslayer: string, quietOnNotFound?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWMSStoreStoreLayer.');
            }
            // verify required parameter 'wmsstore' is not null or undefined
            if (wmsstore === null || wmsstore === undefined) {
                throw new RequiredError('wmsstore','Required parameter wmsstore was null or undefined when calling getWMSStoreStoreLayer.');
            }
            // verify required parameter 'wmslayer' is not null or undefined
            if (wmslayer === null || wmslayer === undefined) {
                throw new RequiredError('wmslayer','Required parameter wmslayer was null or undefined when calling getWMSStoreStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmsstore"}}`, encodeURIComponent(String(wmsstore)))
                .replace(`{${"wmslayer"}}`, encodeURIComponent(String(wmslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quietOnNotFound !== undefined) {
                localVarQueryParameter['quietOnNotFound'] = quietOnNotFound;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the WMS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSStoreStoreLayers: async (workspace: string, wmsstore: string, list?: 'available' | 'configured', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWMSStoreStoreLayers.');
            }
            // verify required parameter 'wmsstore' is not null or undefined
            if (wmsstore === null || wmsstore === undefined) {
                throw new RequiredError('wmsstore','Required parameter wmsstore was null or undefined when calling getWMSStoreStoreLayers.');
            }
            const localVarPath = `/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmsstore"}}`, encodeURIComponent(String(wmsstore)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSStoreLayer: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmslayers/{wmslayer}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes a new WMS store layer.
         * @param {string} workspace Name of the workspace
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSStoreLayers: async (workspace: string, wMSStoreLayerBody: WMSStoreLayerInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWMSStoreLayers.');
            }
            // verify required parameter 'wMSStoreLayerBody' is not null or undefined
            if (wMSStoreLayerBody === null || wMSStoreLayerBody === undefined) {
                throw new RequiredError('wMSStoreLayerBody','Required parameter wMSStoreLayerBody was null or undefined when calling postWMSStoreLayers.');
            }
            const localVarPath = `/workspaces/{workspace}/wmslayers`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMSStoreLayerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMSStoreLayerBody !== undefined ? wMSStoreLayerBody : {}) : (wMSStoreLayerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSStoreStoreLayer: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes a new WMS store layer in the given store.
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the data store
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSStoreStoreLayers: async (workspace: string, wmsstore: string, wMSStoreLayerBody: WMSStoreLayerInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWMSStoreStoreLayers.');
            }
            // verify required parameter 'wmsstore' is not null or undefined
            if (wmsstore === null || wmsstore === undefined) {
                throw new RequiredError('wmsstore','Required parameter wmsstore was null or undefined when calling postWMSStoreStoreLayers.');
            }
            // verify required parameter 'wMSStoreLayerBody' is not null or undefined
            if (wMSStoreLayerBody === null || wMSStoreLayerBody === undefined) {
                throw new RequiredError('wMSStoreLayerBody','Required parameter wMSStoreLayerBody was null or undefined when calling postWMSStoreStoreLayers.');
            }
            const localVarPath = `/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmsstore"}}`, encodeURIComponent(String(wmsstore)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMSStoreLayerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMSStoreLayerBody !== undefined ? wMSStoreLayerBody : {}) : (wMSStoreLayerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits an existing WMS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmslayer Name of the layer to be edited
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSStoreLayer: async (workspace: string, wmslayer: string, wMSStoreLayerBody: WMSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWMSStoreLayer.');
            }
            // verify required parameter 'wmslayer' is not null or undefined
            if (wmslayer === null || wmslayer === undefined) {
                throw new RequiredError('wmslayer','Required parameter wmslayer was null or undefined when calling putWMSStoreLayer.');
            }
            // verify required parameter 'wMSStoreLayerBody' is not null or undefined
            if (wMSStoreLayerBody === null || wMSStoreLayerBody === undefined) {
                throw new RequiredError('wMSStoreLayerBody','Required parameter wMSStoreLayerBody was null or undefined when calling putWMSStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmslayers/{wmslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmslayer"}}`, encodeURIComponent(String(wmslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (calculate) {
                localVarQueryParameter['calculate'] = calculate.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMSStoreLayerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMSStoreLayerBody !== undefined ? wMSStoreLayerBody : {}) : (wMSStoreLayerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSStoreLayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmslayers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits an existing WMS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {string} wmslayer Name of the layer to be edited
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSStoreStoreLayer: async (workspace: string, wmsstore: string, wmslayer: string, wMSStoreLayerBody: WMSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWMSStoreStoreLayer.');
            }
            // verify required parameter 'wmsstore' is not null or undefined
            if (wmsstore === null || wmsstore === undefined) {
                throw new RequiredError('wmsstore','Required parameter wmsstore was null or undefined when calling putWMSStoreStoreLayer.');
            }
            // verify required parameter 'wmslayer' is not null or undefined
            if (wmslayer === null || wmslayer === undefined) {
                throw new RequiredError('wmslayer','Required parameter wmslayer was null or undefined when calling putWMSStoreStoreLayer.');
            }
            // verify required parameter 'wMSStoreLayerBody' is not null or undefined
            if (wMSStoreLayerBody === null || wMSStoreLayerBody === undefined) {
                throw new RequiredError('wMSStoreLayerBody','Required parameter wMSStoreLayerBody was null or undefined when calling putWMSStoreStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmsstore"}}`, encodeURIComponent(String(wmsstore)))
                .replace(`{${"wmslayer"}}`, encodeURIComponent(String(wmslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (calculate) {
                localVarQueryParameter['calculate'] = calculate.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMSStoreLayerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMSStoreLayerBody !== undefined ? wMSStoreLayerBody : {}) : (wMSStoreLayerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSStoreStoreLayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMSStoreLayer(workspace: string, wmslayer: string, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMSStoreLayer(workspace, wmslayer, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMSStoreLayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMSStoreLayers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {string} wmslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMSStoreStoreLayer(workspace, wmsstore, wmslayer, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMSStoreStoreLayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMSStoreStoreLayers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves an individual WMS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers/{wmslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMSStoreLayer(workspace: string, wmslayer: string, quietOnNotFound?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WMSStoreLayerInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMSStoreLayer(workspace, wmslayer, quietOnNotFound, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the WMS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMSStoreLayers(workspace: string, list?: 'available' | 'configured', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMSStoreLayers(workspace, list, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves an individual WMS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {string} wmslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, quietOnNotFound?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WMSStoreLayerInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMSStoreStoreLayer(workspace, wmsstore, wmslayer, quietOnNotFound, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the WMS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMSStoreStoreLayers(workspace: string, wmsstore: string, list?: 'available' | 'configured', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMSStoreStoreLayers(workspace, wmsstore, list, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMSStoreLayer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMSStoreLayer(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Publishes a new WMS store layer.
         * @param {string} workspace Name of the workspace
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMSStoreLayers(workspace: string, wMSStoreLayerBody: WMSStoreLayerInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMSStoreLayers(workspace, wMSStoreLayerBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMSStoreStoreLayer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMSStoreStoreLayer(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Publishes a new WMS store layer in the given store.
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the data store
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMSStoreStoreLayers(workspace: string, wmsstore: string, wMSStoreLayerBody: WMSStoreLayerInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMSStoreStoreLayers(workspace, wmsstore, wMSStoreLayerBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits an existing WMS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmslayer Name of the layer to be edited
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMSStoreLayer(workspace: string, wmslayer: string, wMSStoreLayerBody: WMSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMSStoreLayer(workspace, wmslayer, wMSStoreLayerBody, calculate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMSStoreLayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMSStoreLayers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits an existing WMS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {string} wmslayer Name of the layer to be edited
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, wMSStoreLayerBody: WMSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMSStoreStoreLayer(workspace, wmsstore, wmslayer, wMSStoreLayerBody, calculate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMSStoreStoreLayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMSStoreStoreLayers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSStoreLayer(workspace: string, wmslayer: string, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMSStoreLayer(workspace, wmslayer, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSStoreLayers(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMSStoreLayers(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {string} wmslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMSStoreStoreLayer(workspace, wmsstore, wmslayer, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSStoreStoreLayers(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMSStoreStoreLayers(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an individual WMS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers/{wmslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSStoreLayer(workspace: string, wmslayer: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WMSStoreLayerInfo> {
            return DefaultApiFp(configuration).getWMSStoreLayer(workspace, wmslayer, quietOnNotFound, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the WMS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSStoreLayers(workspace: string, list?: 'available' | 'configured', options?: any): AxiosPromise<Array<object>> {
            return DefaultApiFp(configuration).getWMSStoreLayers(workspace, list, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an individual WMS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {string} wmslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WMSStoreLayerInfo> {
            return DefaultApiFp(configuration).getWMSStoreStoreLayer(workspace, wmsstore, wmslayer, quietOnNotFound, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the WMS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSStoreStoreLayers(workspace: string, wmsstore: string, list?: 'available' | 'configured', options?: any): AxiosPromise<Array<object>> {
            return DefaultApiFp(configuration).getWMSStoreStoreLayers(workspace, wmsstore, list, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSStoreLayer(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMSStoreLayer(options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes a new WMS store layer.
         * @param {string} workspace Name of the workspace
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSStoreLayers(workspace: string, wMSStoreLayerBody: WMSStoreLayerInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMSStoreLayers(workspace, wMSStoreLayerBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSStoreStoreLayer(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMSStoreStoreLayer(options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes a new WMS store layer in the given store.
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the data store
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSStoreStoreLayers(workspace: string, wmsstore: string, wMSStoreLayerBody: WMSStoreLayerInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMSStoreStoreLayers(workspace, wmsstore, wMSStoreLayerBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits an existing WMS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmslayer Name of the layer to be edited
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSStoreLayer(workspace: string, wmslayer: string, wMSStoreLayerBody: WMSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMSStoreLayer(workspace, wmslayer, wMSStoreLayerBody, calculate, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSStoreLayers(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMSStoreLayers(options).then((request) => request(axios, basePath));
        },
        /**
         * Edits an existing WMS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmsstore Name of the store
         * @param {string} wmslayer Name of the layer to be edited
         * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, wMSStoreLayerBody: WMSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMSStoreStoreLayer(workspace, wmsstore, wmslayer, wMSStoreLayerBody, calculate, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSStoreStoreLayers(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMSStoreStoreLayers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Deletes a layer from the server.
     * @param {string} workspace Name of the workspace
     * @param {string} wmslayer Name of the layer to be deleted
     * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmslayer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMSStoreLayer(workspace: string, wmslayer: string, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Can only delete an individual layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMSStoreLayers(options?: any): AxiosPromise<void>;

    /**
     * Deletes a layer from the server.
     * @param {string} workspace Name of the workspace
     * @param {string} wmsstore Name of the store
     * @param {string} wmslayer Name of the layer to be deleted
     * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmslayer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Can only delete an individual layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMSStoreStoreLayers(options?: any): AxiosPromise<void>;

    /**
     * Retrieves an individual WMS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers/{wmslayer}.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmslayer Name of the layer
     * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMSStoreLayer(workspace: string, wmslayer: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WMSStoreLayerInfo>;

    /**
     * Retrieves the WMS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMSStoreLayers(workspace: string, list?: 'available' | 'configured', options?: any): AxiosPromise<Array<object>>;

    /**
     * Retrieves an individual WMS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmsstore Name of the store
     * @param {string} wmslayer Name of the layer
     * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WMSStoreLayerInfo>;

    /**
     * Retrieves the WMS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmsstore Name of the store
     * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMSStoreStoreLayers(workspace: string, wmsstore: string, list?: 'available' | 'configured', options?: any): AxiosPromise<Array<object>>;

    /**
     * Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMSStoreLayer(options?: any): AxiosPromise<void>;

    /**
     * Publishes a new WMS store layer.
     * @param {string} workspace Name of the workspace
     * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMSStoreLayers(workspace: string, wMSStoreLayerBody: WMSStoreLayerInfo, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMSStoreStoreLayer(options?: any): AxiosPromise<void>;

    /**
     * Publishes a new WMS store layer in the given store.
     * @param {string} workspace Name of the workspace
     * @param {string} wmsstore Name of the data store
     * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMSStoreStoreLayers(workspace: string, wmsstore: string, wMSStoreLayerBody: WMSStoreLayerInfo, options?: any): AxiosPromise<void>;

    /**
     * Edits an existing WMS store layer.
     * @param {string} workspace Name of the workspace
     * @param {string} wmslayer Name of the layer to be edited
     * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
     * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMSStoreLayer(workspace: string, wmslayer: string, wMSStoreLayerBody: WMSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMSStoreLayers(options?: any): AxiosPromise<void>;

    /**
     * Edits an existing WMS store layer.
     * @param {string} workspace Name of the workspace
     * @param {string} wmsstore Name of the store
     * @param {string} wmslayer Name of the layer to be edited
     * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
     * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, wMSStoreLayerBody: WMSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMSStoreStoreLayers(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Deletes a layer from the server.
     * @param {string} workspace Name of the workspace
     * @param {string} wmslayer Name of the layer to be deleted
     * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmslayer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMSStoreLayer(workspace: string, wmslayer: string, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteWMSStoreLayer(workspace, wmslayer, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Can only delete an individual layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMSStoreLayers(options?: any) {
        return DefaultApiFp(this.configuration).deleteWMSStoreLayers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a layer from the server.
     * @param {string} workspace Name of the workspace
     * @param {string} wmsstore Name of the store
     * @param {string} wmslayer Name of the layer to be deleted
     * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmslayer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteWMSStoreStoreLayer(workspace, wmsstore, wmslayer, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Can only delete an individual layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMSStoreStoreLayers(options?: any) {
        return DefaultApiFp(this.configuration).deleteWMSStoreStoreLayers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an individual WMS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers/{wmslayer}.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmslayer Name of the layer
     * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMSStoreLayer(workspace: string, wmslayer: string, quietOnNotFound?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getWMSStoreLayer(workspace, wmslayer, quietOnNotFound, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the WMS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmslayers\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMSStoreLayers(workspace: string, list?: 'available' | 'configured', options?: any) {
        return DefaultApiFp(this.configuration).getWMSStoreLayers(workspace, list, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an individual WMS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers/{wmslayer}.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmsstore Name of the store
     * @param {string} wmslayer Name of the layer
     * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, quietOnNotFound?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getWMSStoreStoreLayer(workspace, wmsstore, wmslayer, quietOnNotFound, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the WMS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmsstores/{wmsstore}/wmslayers.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmsstore Name of the store
     * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMSStoreStoreLayers(workspace: string, wmsstore: string, list?: 'available' | 'configured', options?: any) {
        return DefaultApiFp(this.configuration).getWMSStoreStoreLayers(workspace, wmsstore, list, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMSStoreLayer(options?: any) {
        return DefaultApiFp(this.configuration).postWMSStoreLayer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publishes a new WMS store layer.
     * @param {string} workspace Name of the workspace
     * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMSStoreLayers(workspace: string, wMSStoreLayerBody: WMSStoreLayerInfo, options?: any) {
        return DefaultApiFp(this.configuration).postWMSStoreLayers(workspace, wMSStoreLayerBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a layer, or POST on the /wmslayers endpoint to add a new layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMSStoreStoreLayer(options?: any) {
        return DefaultApiFp(this.configuration).postWMSStoreStoreLayer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publishes a new WMS store layer in the given store.
     * @param {string} workspace Name of the workspace
     * @param {string} wmsstore Name of the data store
     * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMSStoreStoreLayers(workspace: string, wmsstore: string, wMSStoreLayerBody: WMSStoreLayerInfo, options?: any) {
        return DefaultApiFp(this.configuration).postWMSStoreStoreLayers(workspace, wmsstore, wMSStoreLayerBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits an existing WMS store layer.
     * @param {string} workspace Name of the workspace
     * @param {string} wmslayer Name of the layer to be edited
     * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
     * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMSStoreLayer(workspace: string, wmslayer: string, wMSStoreLayerBody: WMSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any) {
        return DefaultApiFp(this.configuration).putWMSStoreLayer(workspace, wmslayer, wMSStoreLayerBody, calculate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMSStoreLayers(options?: any) {
        return DefaultApiFp(this.configuration).putWMSStoreLayers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits an existing WMS store layer.
     * @param {string} workspace Name of the workspace
     * @param {string} wmsstore Name of the store
     * @param {string} wmslayer Name of the layer to be edited
     * @param {WMSStoreLayerInfo} wMSStoreLayerBody Body of the WMS store layer
     * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wms layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMSStoreStoreLayer(workspace: string, wmsstore: string, wmslayer: string, wMSStoreLayerBody: WMSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any) {
        return DefaultApiFp(this.configuration).putWMSStoreStoreLayer(workspace, wmsstore, wmslayer, wMSStoreLayerBody, calculate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMSStoreStoreLayers(options?: any) {
        return DefaultApiFp(this.configuration).putWMSStoreStoreLayers(options).then((request) => request(this.axios, this.basePath));
    }

}


