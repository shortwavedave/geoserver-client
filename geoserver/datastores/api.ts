// tslint:disable
/**
 * GeoServer Data Stores
 * A data store contains vector format spatial data. It can be a file (such as a shapefile), a database (such as PostGIS), or a server (such as a remote Web Feature Service).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Datastore
 */
export interface Datastore {
    /**
     * Name of data store
     * @type {string}
     * @memberof Datastore
     */
    name?: string;
    /**
     * Description of data store
     * @type {string}
     * @memberof Datastore
     */
    description?: string;
    /**
     * Whether or not the data store is enabled
     * @type {boolean}
     * @memberof Datastore
     */
    enabled?: boolean;
    /**
     * 
     * @type {Workspace}
     * @memberof Datastore
     */
    workspace?: Workspace;
    /**
     * 
     * @type {Array<Entry>}
     * @memberof Datastore
     */
    connectionParameters?: Array<Entry>;
    /**
     * Whether or not the data store is the default data store
     * @type {boolean}
     * @memberof Datastore
     */
    __default?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof Datastore
     */
    featureTypes?: Array<string>;
}
/**
 * connection parameter key-value pair
 * @export
 * @interface Entry
 */
export interface Entry {
    /**
     * Connection parameter key
     * @type {string}
     * @memberof Entry
     */
    key?: string;
    /**
     * Connection parameter value
     * @type {string}
     * @memberof Entry
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface Workspace
 */
export interface Workspace {
    /**
     * Name of workspace
     * @type {string}
     * @memberof Workspace
     */
    name?: string;
    /**
     * URL to workspace definition
     * @type {string}
     * @memberof Workspace
     */
    link?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cleans all MongoDB internal stores Schemas for an App-Schema store.
         * @summary Cleans all MongoDB internal stores Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cleanAllMongoSchemas: async (workspaceName: string, storeName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling cleanAllMongoSchemas.');
            }
            // verify required parameter 'storeName' is not null or undefined
            if (storeName === null || storeName === undefined) {
                throw new RequiredError('storeName','Required parameter storeName was null or undefined when calling cleanAllMongoSchemas.');
            }
            const localVarPath = `/workspaces/{workspaceName}/appschemastores/{storeName}/cleanSchemas`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"storeName"}}`, encodeURIComponent(String(storeName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cleans a MongoDB internal store Schemas for an App-Schema store.
         * @summary Cleans a MongoDB internal store Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {string} internalStoreId The store ID for the internal MongoDB store as specified on App-Schema Mappings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cleanMongoSchema: async (workspaceName: string, storeName: string, internalStoreId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling cleanMongoSchema.');
            }
            // verify required parameter 'storeName' is not null or undefined
            if (storeName === null || storeName === undefined) {
                throw new RequiredError('storeName','Required parameter storeName was null or undefined when calling cleanMongoSchema.');
            }
            // verify required parameter 'internalStoreId' is not null or undefined
            if (internalStoreId === null || internalStoreId === undefined) {
                throw new RequiredError('internalStoreId','Required parameter internalStoreId was null or undefined when calling cleanMongoSchema.');
            }
            const localVarPath = `/workspaces/{workspaceName}/appschemastores/{storeName}/datastores/{internalStoreId}/cleanSchemas`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"storeName"}}`, encodeURIComponent(String(storeName)))
                .replace(`{${"internalStoreId"}}`, encodeURIComponent(String(internalStoreId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid, only used for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataStoreUpload: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspaceName}/datastores/{storeName}/{method}.{format}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a data store from the server.
         * @summary Delete data store
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the data store to delete.
         * @param {boolean} [recurse] The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatastore: async (workspaceName: string, storeName: string, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling deleteDatastore.');
            }
            // verify required parameter 'storeName' is not null or undefined
            if (storeName === null || storeName === undefined) {
                throw new RequiredError('storeName','Required parameter storeName was null or undefined when calling deleteDatastore.');
            }
            const localVarPath = `/workspaces/{workspaceName}/datastores/{storeName}`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"storeName"}}`, encodeURIComponent(String(storeName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use /datastores/{datastore} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletedatastores: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspaceName}/datastores`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Controls a particular data store in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores/{datastore}.xml\" for XML).
         * @summary Retrieve a particular data store from a workspace
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the data store to retrieve.
         * @param {boolean} [quietOnNotFound] The quietOnNotFound parameter avoids logging an exception when the data store is not present. Note that 404 status code will still be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataStore: async (workspaceName: string, storeName: string, quietOnNotFound?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling getDataStore.');
            }
            // verify required parameter 'storeName' is not null or undefined
            if (storeName === null || storeName === undefined) {
                throw new RequiredError('storeName','Required parameter storeName was null or undefined when calling getDataStore.');
            }
            const localVarPath = `/workspaces/{workspaceName}/datastores/{storeName}`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"storeName"}}`, encodeURIComponent(String(storeName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quietOnNotFound !== undefined) {
                localVarQueryParameter['quietOnNotFound'] = quietOnNotFound;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deprecated. Retrieve the underlying files for the data store as a zip file with MIME type application/zip
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. Unused for GET
         * @param {string} format The type of source data store (e.g., \&quot;shp\&quot;). Unused for GET
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataStoreUpload: async (workspaceName: string, storeName: string, method: string, format: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling getDataStoreUpload.');
            }
            // verify required parameter 'storeName' is not null or undefined
            if (storeName === null || storeName === undefined) {
                throw new RequiredError('storeName','Required parameter storeName was null or undefined when calling getDataStoreUpload.');
            }
            // verify required parameter 'method' is not null or undefined
            if (method === null || method === undefined) {
                throw new RequiredError('method','Required parameter method was null or undefined when calling getDataStoreUpload.');
            }
            // verify required parameter 'format' is not null or undefined
            if (format === null || format === undefined) {
                throw new RequiredError('format','Required parameter format was null or undefined when calling getDataStoreUpload.');
            }
            const localVarPath = `/workspaces/{workspaceName}/datastores/{storeName}/{method}.{format}`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"storeName"}}`, encodeURIComponent(String(storeName)))
                .replace(`{${"method"}}`, encodeURIComponent(String(method)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all data stores in workspace ws. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
         * @summary Get a list of data stores
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatastores: async (workspaceName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling getDatastores.');
            }
            const localVarPath = `/workspaces/{workspaceName}/datastores`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid, use PUT for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDataStoreUpload: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspaceName}/datastores/{storeName}/{method}.{format}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a data store definition, or POST with /datastore to add a new definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDatastore: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspaceName}/datastores/{storeName}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new data store to the workspace.
         * @summary Create a new data store
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {Datastore} dataStoreBody The data store body information to upload.  The contents of the connection parameters will differ depending on the type of data store being added.  - GeoPackage    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;database&gt;file:///path/to/nyc.gpkg&lt;/database&gt;         &lt;dbtype&gt;geopkg&lt;/dbtype&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;file:///path/to/nyc.gpkg\&quot;},             {\&quot;@key\&quot;:\&quot;dbtype\&quot;,\&quot;$\&quot;:\&quot;geopkg\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | database | Database | user | File | True | &#x60; &#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | dbtype | Type | program | String | True | &#x60;geopkg&#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | user | user name to login as | user | String | False | &#x60; &#x60; |  - PostGIS    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;host&gt;localhost&lt;/host&gt;         &lt;port&gt;5432&lt;/port&gt;         &lt;database&gt;nyc&lt;/database&gt;         &lt;user&gt;bob&lt;/user&gt;         &lt;passwd&gt;postgres&lt;/passwd&gt;         &lt;dbtype&gt;postgis&lt;/dbtype&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;host\&quot;,\&quot;$\&quot;:\&quot;localhost\&quot;},             {\&quot;@key\&quot;:\&quot;port\&quot;,\&quot;$\&quot;:\&quot;5432\&quot;},             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;nyc\&quot;},             {\&quot;@key\&quot;:\&quot;user\&quot;,\&quot;$\&quot;:\&quot;bob\&quot;},             {\&quot;@key\&quot;:\&quot;passwd\&quot;,\&quot;$\&quot;:\&quot;postgres\&quot;},             {\&quot;@key\&quot;:\&quot;dbtype\&quot;,\&quot;$\&quot;:\&quot;postgis\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | port | Port | user | Integer | True | &#x60;5432&#x60; |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | &#x60;True&#x60; |   | create database | Creates the database if it does not exist yet | advanced | Boolean | False | &#x60;False&#x60; |   | create database params | Extra specifications appended to the CREATE DATABASE command | advanced | String | False | &#x60;&#x60; |   | dbtype | Type | program | String | True | &#x60;postgis&#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | &#x60;50&#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows us to push more of the filter into the database, increasing performance of the postgis table. | advanced | Boolean | False | &#x60;False&#x60; |   | host | Host | user | String | True | &#x60;localhost&#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | &#x60;True&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | &#x60;True&#x60; |   | database | Database | user | String | False | &#x60; &#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | preparedStatements | Use prepared statements | user | Boolean | False | &#x60;False&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | schema | Schema | user | String | False | &#x60;public&#x60; |   | user | user name to login as | user | String | True | &#x60; &#x60; |  - Shapefile    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/nyc.shp&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/nyc.shp\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |  - Directory of spatial files (shapefiles)    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/directory&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/directory\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |   - Web Feature Service    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;GET_CAPABILITIES_URL&gt;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities&lt;/GET_CAPABILITIES_URL&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;GET_CAPABILITIES_URL\&quot;,\&quot;$\&quot;:\&quot;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | &#x60; &#x60; |   | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | &#x60; &#x60; |   | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | &#x60;10&#x60; |   | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | &#x60; &#x60; |   | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | &#x60;org.geotools.xml.PreventLocalEntityResolver@75e98519&#x60; |   | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | &#x60;3000&#x60; |   | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | &#x60;0&#x60; |   | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | &#x60;False&#x60; |   | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | &#x60; &#x60; |   | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | &#x60;False&#x60; |   | Namespace | Override the original WFS type name namespaces | advanced | String | False | &#x60; &#x60; |   | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | &#x60; &#x60; |   | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | &#x60; &#x60; |   | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | &#x60;False&#x60; |   | Maximum features | Positive integer used as a hard limit for the number of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | &#x60;0&#x60; |   | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | &#x60;Compliant&#x60; |   | WFS Strategy | Override WFS strategy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | &#x60;auto&#x60; |   | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | &#x60;True&#x60; |   | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | &#x60;UTF-8&#x60; |   | Outputformat | This allows the user to specify an output format, different from the default one. | advanced | String | False | &#x60; &#x60; | 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDatastores: async (workspaceName: string, dataStoreBody: Datastore, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling postDatastores.');
            }
            // verify required parameter 'dataStoreBody' is not null or undefined
            if (dataStoreBody === null || dataStoreBody === undefined) {
                throw new RequiredError('dataStoreBody','Required parameter dataStoreBody was null or undefined when calling postDatastores.');
            }
            const localVarPath = `/workspaces/{workspaceName}/datastores`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataStoreBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataStoreBody !== undefined ? dataStoreBody : {}) : (dataStoreBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates or modifies a single data store by uploading spatial data or mapping configuration (in case an app-schema data store is targeted) files.
         * @summary Uploads files to the data store, creating it if necessary
         * @param {string} workspaceName The name of the workspace containing the coverage stores.
         * @param {string} storeName The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from an remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
         * @param {string} format The type of source data store (e.g., \&quot;shp\&quot;).
         * @param {string} [configure] The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \&quot;none\&quot; to avoid configuring coverages.
         * @param {string} [target] The type of target data store (e.g., \&quot;shp\&quot;). Same as format if not provided.
         * @param {string} [update] The update mode. If \&quot;overwrite\&quot;, will overwrite existing data. Otherwise, will append to existing data.
         * @param {string} [charset] The character set of the data.
         * @param {string} [filename] The filename parameter specifies the target file name for the file to be uploaded. This is important to avoid clashes with existing files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDataStoreUpload: async (workspaceName: string, storeName: string, method: string, format: string, configure?: string, target?: string, update?: string, charset?: string, filename?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling putDataStoreUpload.');
            }
            // verify required parameter 'storeName' is not null or undefined
            if (storeName === null || storeName === undefined) {
                throw new RequiredError('storeName','Required parameter storeName was null or undefined when calling putDataStoreUpload.');
            }
            // verify required parameter 'method' is not null or undefined
            if (method === null || method === undefined) {
                throw new RequiredError('method','Required parameter method was null or undefined when calling putDataStoreUpload.');
            }
            // verify required parameter 'format' is not null or undefined
            if (format === null || format === undefined) {
                throw new RequiredError('format','Required parameter format was null or undefined when calling putDataStoreUpload.');
            }
            const localVarPath = `/workspaces/{workspaceName}/datastores/{storeName}/{method}.{format}`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"storeName"}}`, encodeURIComponent(String(storeName)))
                .replace(`{${"method"}}`, encodeURIComponent(String(method)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (configure !== undefined) {
                localVarQueryParameter['configure'] = configure;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (update !== undefined) {
                localVarQueryParameter['update'] = update;
            }

            if (charset !== undefined) {
                localVarQueryParameter['charset'] = charset;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify data store ds. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores/{ds}.xml\" for XML).
         * @summary Modify a data store.
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the data store to modify.
         * @param {Datastore} dataStoreBody The updated data store definition. For a PUT, only values which should be changed need to be included. The connectionParameters map counts as a single value,  so if you change it all pre-existing connection parameters will be overwritten.  The contents of the connection parameters will differ depending on the type of data store being added.  - GeoPackage    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;database&gt;file:///path/to/nyc.gpkg&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;file:///path/to/nyc.gpkg\&quot;},           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | database | Database | user | File | True | &#x60; &#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | dbtype | Type | program | String | True | &#x60;geopkg&#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | user | user name to login as | user | String | False | &#x60; &#x60; |  - PostGIS    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;host&gt;localhost&lt;/host&gt;         &lt;port&gt;5432&lt;/port&gt;         &lt;database&gt;nyc&lt;/database&gt;         &lt;user&gt;bob&lt;/user&gt;         &lt;passwd&gt;postgres&lt;/passwd&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;host\&quot;,\&quot;$\&quot;:\&quot;localhost\&quot;},             {\&quot;@key\&quot;:\&quot;port\&quot;,\&quot;$\&quot;:\&quot;5432\&quot;},             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;nyc\&quot;},             {\&quot;@key\&quot;:\&quot;user\&quot;,\&quot;$\&quot;:\&quot;bob\&quot;},             {\&quot;@key\&quot;:\&quot;passwd\&quot;,\&quot;$\&quot;:\&quot;postgres\&quot;},           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | port | Port | user | Integer | True | &#x60;5432&#x60; |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | &#x60;True&#x60; |   | create database | Creates the database if it does not exist yet | advanced | Boolean | False | &#x60;False&#x60; |   | create database params | Extra specifications appended to the CREATE DATABASE command | advanced | String | False | &#x60;&#x60; |   | dbtype | Type | program | String | True | &#x60;postgis&#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | &#x60;50&#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows us to push more of the filter into the database, increasing performance of the postgis table. | advanced | Boolean | False | &#x60;False&#x60; |   | host | Host | user | String | True | &#x60;localhost&#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | &#x60;True&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | &#x60;True&#x60; |   | database | Database | user | String | False | &#x60; &#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | preparedStatements | Use prepared statements | user | Boolean | False | &#x60;False&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | schema | Schema | user | String | False | &#x60;public&#x60; |   | user | user name to login as | user | String | True | &#x60; &#x60; |  - Shapefile    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/nyc.shp&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/nyc.shp\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |  - Directory of spatial files (shapefiles)    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/directory&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/directory\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |   - Web Feature Service    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;GET_CAPABILITIES_URL&gt;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities&lt;/GET_CAPABILITIES_URL&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;GET_CAPABILITIES_URL\&quot;,\&quot;$\&quot;:\&quot;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | &#x60; &#x60; |   | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | &#x60; &#x60; |   | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | &#x60;10&#x60; |   | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | &#x60; &#x60; |   | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | &#x60;org.geotools.xml.PreventLocalEntityResolver@75e98519&#x60; |   | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | &#x60;3000&#x60; |   | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | &#x60;0&#x60; |   | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | &#x60;False&#x60; |   | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | &#x60; &#x60; |   | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | &#x60;False&#x60; |   | Namespace | Override the original WFS type name namespaces | advanced | String | False | &#x60; &#x60; |   | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | &#x60; &#x60; |   | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | &#x60; &#x60; |   | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | &#x60;False&#x60; |   | Maximum features | Positive integer used as a hard limit for the number of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | &#x60;0&#x60; |   | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | &#x60;Compliant&#x60; |   | WFS Strategy | Override WFS strategy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | &#x60;auto&#x60; |   | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | &#x60;True&#x60; |   | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | &#x60;UTF-8&#x60; |   | Outputformat | This allows the user to specify an output format, different from the default one. | advanced | String | False | &#x60; &#x60; | 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDatastore: async (workspaceName: string, storeName: string, dataStoreBody: Datastore, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling putDatastore.');
            }
            // verify required parameter 'storeName' is not null or undefined
            if (storeName === null || storeName === undefined) {
                throw new RequiredError('storeName','Required parameter storeName was null or undefined when calling putDatastore.');
            }
            // verify required parameter 'dataStoreBody' is not null or undefined
            if (dataStoreBody === null || dataStoreBody === undefined) {
                throw new RequiredError('dataStoreBody','Required parameter dataStoreBody was null or undefined when calling putDatastore.');
            }
            const localVarPath = `/workspaces/{workspaceName}/datastores/{storeName}`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"storeName"}}`, encodeURIComponent(String(storeName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof dataStoreBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(dataStoreBody !== undefined ? dataStoreBody : {}) : (dataStoreBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new data store, or PUT on /datastores/{datastore} to edit an existing data store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putdatastores: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspaceName}/datastores`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rebuilds all MongoDB internal stores Schemas for an App-Schema store.
         * @summary Rebuilds all MongoDB internal stores Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {string} [ids] Comma separated MongoDB object IDs for use in new generated schema.
         * @param {number} [max] Max number of objects for use in new generated schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rebuildAllMongoSchemas: async (workspaceName: string, storeName: string, ids?: string, max?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling rebuildAllMongoSchemas.');
            }
            // verify required parameter 'storeName' is not null or undefined
            if (storeName === null || storeName === undefined) {
                throw new RequiredError('storeName','Required parameter storeName was null or undefined when calling rebuildAllMongoSchemas.');
            }
            const localVarPath = `/workspaces/{workspaceName}/appschemastores/{storeName}/rebuildMongoSchemas`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"storeName"}}`, encodeURIComponent(String(storeName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rebuilds a MongoDB internal store Schemas for an App-Schema store.
         * @summary Rebuilds a MongoDB internal store Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {string} internalStoreId The store ID for the internal MongoDB store as specified on App-Schema Mappings.
         * @param {string} [ids] Comma separated MongoDB object IDs for use in new generated schema.
         * @param {number} [max] Max number of objects for use in new generated schema.
         * @param {string} [schema] Name of schema to re-build.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rebuildMongoSchema: async (workspaceName: string, storeName: string, internalStoreId: string, ids?: string, max?: number, schema?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling rebuildMongoSchema.');
            }
            // verify required parameter 'storeName' is not null or undefined
            if (storeName === null || storeName === undefined) {
                throw new RequiredError('storeName','Required parameter storeName was null or undefined when calling rebuildMongoSchema.');
            }
            // verify required parameter 'internalStoreId' is not null or undefined
            if (internalStoreId === null || internalStoreId === undefined) {
                throw new RequiredError('internalStoreId','Required parameter internalStoreId was null or undefined when calling rebuildMongoSchema.');
            }
            const localVarPath = `/workspaces/{workspaceName}/appschemastores/{storeName}/datastores/{internalStoreId}/rebuildMongoSchemas`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"storeName"}}`, encodeURIComponent(String(storeName)))
                .replace(`{${"internalStoreId"}}`, encodeURIComponent(String(internalStoreId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }

            if (schema !== undefined) {
                localVarQueryParameter['schema'] = schema;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Cleans all MongoDB internal stores Schemas for an App-Schema store.
         * @summary Cleans all MongoDB internal stores Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cleanAllMongoSchemas(workspaceName: string, storeName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).cleanAllMongoSchemas(workspaceName, storeName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cleans a MongoDB internal store Schemas for an App-Schema store.
         * @summary Cleans a MongoDB internal store Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {string} internalStoreId The store ID for the internal MongoDB store as specified on App-Schema Mappings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cleanMongoSchema(workspaceName: string, storeName: string, internalStoreId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).cleanMongoSchema(workspaceName, storeName, internalStoreId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid, only used for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDataStoreUpload(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteDataStoreUpload(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a data store from the server.
         * @summary Delete data store
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the data store to delete.
         * @param {boolean} [recurse] The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDatastore(workspaceName: string, storeName: string, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteDatastore(workspaceName, storeName, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use /datastores/{datastore} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletedatastores(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deletedatastores(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Controls a particular data store in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores/{datastore}.xml\" for XML).
         * @summary Retrieve a particular data store from a workspace
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the data store to retrieve.
         * @param {boolean} [quietOnNotFound] The quietOnNotFound parameter avoids logging an exception when the data store is not present. Note that 404 status code will still be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataStore(workspaceName: string, storeName: string, quietOnNotFound?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastore>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDataStore(workspaceName, storeName, quietOnNotFound, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deprecated. Retrieve the underlying files for the data store as a zip file with MIME type application/zip
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. Unused for GET
         * @param {string} format The type of source data store (e.g., \&quot;shp\&quot;). Unused for GET
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataStoreUpload(workspaceName: string, storeName: string, method: string, format: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDataStoreUpload(workspaceName, storeName, method, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all data stores in workspace ws. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
         * @summary Get a list of data stores
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDatastores(workspaceName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDatastores(workspaceName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid, use PUT for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDataStoreUpload(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postDataStoreUpload(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a data store definition, or POST with /datastore to add a new definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDatastore(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postDatastore(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new data store to the workspace.
         * @summary Create a new data store
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {Datastore} dataStoreBody The data store body information to upload.  The contents of the connection parameters will differ depending on the type of data store being added.  - GeoPackage    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;database&gt;file:///path/to/nyc.gpkg&lt;/database&gt;         &lt;dbtype&gt;geopkg&lt;/dbtype&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;file:///path/to/nyc.gpkg\&quot;},             {\&quot;@key\&quot;:\&quot;dbtype\&quot;,\&quot;$\&quot;:\&quot;geopkg\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | database | Database | user | File | True | &#x60; &#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | dbtype | Type | program | String | True | &#x60;geopkg&#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | user | user name to login as | user | String | False | &#x60; &#x60; |  - PostGIS    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;host&gt;localhost&lt;/host&gt;         &lt;port&gt;5432&lt;/port&gt;         &lt;database&gt;nyc&lt;/database&gt;         &lt;user&gt;bob&lt;/user&gt;         &lt;passwd&gt;postgres&lt;/passwd&gt;         &lt;dbtype&gt;postgis&lt;/dbtype&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;host\&quot;,\&quot;$\&quot;:\&quot;localhost\&quot;},             {\&quot;@key\&quot;:\&quot;port\&quot;,\&quot;$\&quot;:\&quot;5432\&quot;},             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;nyc\&quot;},             {\&quot;@key\&quot;:\&quot;user\&quot;,\&quot;$\&quot;:\&quot;bob\&quot;},             {\&quot;@key\&quot;:\&quot;passwd\&quot;,\&quot;$\&quot;:\&quot;postgres\&quot;},             {\&quot;@key\&quot;:\&quot;dbtype\&quot;,\&quot;$\&quot;:\&quot;postgis\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | port | Port | user | Integer | True | &#x60;5432&#x60; |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | &#x60;True&#x60; |   | create database | Creates the database if it does not exist yet | advanced | Boolean | False | &#x60;False&#x60; |   | create database params | Extra specifications appended to the CREATE DATABASE command | advanced | String | False | &#x60;&#x60; |   | dbtype | Type | program | String | True | &#x60;postgis&#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | &#x60;50&#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows us to push more of the filter into the database, increasing performance of the postgis table. | advanced | Boolean | False | &#x60;False&#x60; |   | host | Host | user | String | True | &#x60;localhost&#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | &#x60;True&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | &#x60;True&#x60; |   | database | Database | user | String | False | &#x60; &#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | preparedStatements | Use prepared statements | user | Boolean | False | &#x60;False&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | schema | Schema | user | String | False | &#x60;public&#x60; |   | user | user name to login as | user | String | True | &#x60; &#x60; |  - Shapefile    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/nyc.shp&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/nyc.shp\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |  - Directory of spatial files (shapefiles)    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/directory&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/directory\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |   - Web Feature Service    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;GET_CAPABILITIES_URL&gt;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities&lt;/GET_CAPABILITIES_URL&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;GET_CAPABILITIES_URL\&quot;,\&quot;$\&quot;:\&quot;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | &#x60; &#x60; |   | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | &#x60; &#x60; |   | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | &#x60;10&#x60; |   | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | &#x60; &#x60; |   | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | &#x60;org.geotools.xml.PreventLocalEntityResolver@75e98519&#x60; |   | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | &#x60;3000&#x60; |   | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | &#x60;0&#x60; |   | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | &#x60;False&#x60; |   | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | &#x60; &#x60; |   | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | &#x60;False&#x60; |   | Namespace | Override the original WFS type name namespaces | advanced | String | False | &#x60; &#x60; |   | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | &#x60; &#x60; |   | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | &#x60; &#x60; |   | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | &#x60;False&#x60; |   | Maximum features | Positive integer used as a hard limit for the number of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | &#x60;0&#x60; |   | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | &#x60;Compliant&#x60; |   | WFS Strategy | Override WFS strategy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | &#x60;auto&#x60; |   | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | &#x60;True&#x60; |   | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | &#x60;UTF-8&#x60; |   | Outputformat | This allows the user to specify an output format, different from the default one. | advanced | String | False | &#x60; &#x60; | 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDatastores(workspaceName: string, dataStoreBody: Datastore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postDatastores(workspaceName, dataStoreBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates or modifies a single data store by uploading spatial data or mapping configuration (in case an app-schema data store is targeted) files.
         * @summary Uploads files to the data store, creating it if necessary
         * @param {string} workspaceName The name of the workspace containing the coverage stores.
         * @param {string} storeName The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from an remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
         * @param {string} format The type of source data store (e.g., \&quot;shp\&quot;).
         * @param {string} [configure] The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \&quot;none\&quot; to avoid configuring coverages.
         * @param {string} [target] The type of target data store (e.g., \&quot;shp\&quot;). Same as format if not provided.
         * @param {string} [update] The update mode. If \&quot;overwrite\&quot;, will overwrite existing data. Otherwise, will append to existing data.
         * @param {string} [charset] The character set of the data.
         * @param {string} [filename] The filename parameter specifies the target file name for the file to be uploaded. This is important to avoid clashes with existing files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDataStoreUpload(workspaceName: string, storeName: string, method: string, format: string, configure?: string, target?: string, update?: string, charset?: string, filename?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDataStoreUpload(workspaceName, storeName, method, format, configure, target, update, charset, filename, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify data store ds. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores/{ds}.xml\" for XML).
         * @summary Modify a data store.
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the data store to modify.
         * @param {Datastore} dataStoreBody The updated data store definition. For a PUT, only values which should be changed need to be included. The connectionParameters map counts as a single value,  so if you change it all pre-existing connection parameters will be overwritten.  The contents of the connection parameters will differ depending on the type of data store being added.  - GeoPackage    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;database&gt;file:///path/to/nyc.gpkg&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;file:///path/to/nyc.gpkg\&quot;},           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | database | Database | user | File | True | &#x60; &#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | dbtype | Type | program | String | True | &#x60;geopkg&#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | user | user name to login as | user | String | False | &#x60; &#x60; |  - PostGIS    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;host&gt;localhost&lt;/host&gt;         &lt;port&gt;5432&lt;/port&gt;         &lt;database&gt;nyc&lt;/database&gt;         &lt;user&gt;bob&lt;/user&gt;         &lt;passwd&gt;postgres&lt;/passwd&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;host\&quot;,\&quot;$\&quot;:\&quot;localhost\&quot;},             {\&quot;@key\&quot;:\&quot;port\&quot;,\&quot;$\&quot;:\&quot;5432\&quot;},             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;nyc\&quot;},             {\&quot;@key\&quot;:\&quot;user\&quot;,\&quot;$\&quot;:\&quot;bob\&quot;},             {\&quot;@key\&quot;:\&quot;passwd\&quot;,\&quot;$\&quot;:\&quot;postgres\&quot;},           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | port | Port | user | Integer | True | &#x60;5432&#x60; |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | &#x60;True&#x60; |   | create database | Creates the database if it does not exist yet | advanced | Boolean | False | &#x60;False&#x60; |   | create database params | Extra specifications appended to the CREATE DATABASE command | advanced | String | False | &#x60;&#x60; |   | dbtype | Type | program | String | True | &#x60;postgis&#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | &#x60;50&#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows us to push more of the filter into the database, increasing performance of the postgis table. | advanced | Boolean | False | &#x60;False&#x60; |   | host | Host | user | String | True | &#x60;localhost&#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | &#x60;True&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | &#x60;True&#x60; |   | database | Database | user | String | False | &#x60; &#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | preparedStatements | Use prepared statements | user | Boolean | False | &#x60;False&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | schema | Schema | user | String | False | &#x60;public&#x60; |   | user | user name to login as | user | String | True | &#x60; &#x60; |  - Shapefile    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/nyc.shp&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/nyc.shp\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |  - Directory of spatial files (shapefiles)    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/directory&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/directory\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |   - Web Feature Service    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;GET_CAPABILITIES_URL&gt;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities&lt;/GET_CAPABILITIES_URL&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;GET_CAPABILITIES_URL\&quot;,\&quot;$\&quot;:\&quot;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | &#x60; &#x60; |   | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | &#x60; &#x60; |   | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | &#x60;10&#x60; |   | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | &#x60; &#x60; |   | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | &#x60;org.geotools.xml.PreventLocalEntityResolver@75e98519&#x60; |   | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | &#x60;3000&#x60; |   | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | &#x60;0&#x60; |   | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | &#x60;False&#x60; |   | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | &#x60; &#x60; |   | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | &#x60;False&#x60; |   | Namespace | Override the original WFS type name namespaces | advanced | String | False | &#x60; &#x60; |   | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | &#x60; &#x60; |   | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | &#x60; &#x60; |   | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | &#x60;False&#x60; |   | Maximum features | Positive integer used as a hard limit for the number of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | &#x60;0&#x60; |   | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | &#x60;Compliant&#x60; |   | WFS Strategy | Override WFS strategy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | &#x60;auto&#x60; |   | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | &#x60;True&#x60; |   | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | &#x60;UTF-8&#x60; |   | Outputformat | This allows the user to specify an output format, different from the default one. | advanced | String | False | &#x60; &#x60; | 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDatastore(workspaceName: string, storeName: string, dataStoreBody: Datastore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putDatastore(workspaceName, storeName, dataStoreBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new data store, or PUT on /datastores/{datastore} to edit an existing data store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putdatastores(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putdatastores(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Rebuilds all MongoDB internal stores Schemas for an App-Schema store.
         * @summary Rebuilds all MongoDB internal stores Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {string} [ids] Comma separated MongoDB object IDs for use in new generated schema.
         * @param {number} [max] Max number of objects for use in new generated schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rebuildAllMongoSchemas(workspaceName: string, storeName: string, ids?: string, max?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).rebuildAllMongoSchemas(workspaceName, storeName, ids, max, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Rebuilds a MongoDB internal store Schemas for an App-Schema store.
         * @summary Rebuilds a MongoDB internal store Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {string} internalStoreId The store ID for the internal MongoDB store as specified on App-Schema Mappings.
         * @param {string} [ids] Comma separated MongoDB object IDs for use in new generated schema.
         * @param {number} [max] Max number of objects for use in new generated schema.
         * @param {string} [schema] Name of schema to re-build.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rebuildMongoSchema(workspaceName: string, storeName: string, internalStoreId: string, ids?: string, max?: number, schema?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).rebuildMongoSchema(workspaceName, storeName, internalStoreId, ids, max, schema, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Cleans all MongoDB internal stores Schemas for an App-Schema store.
         * @summary Cleans all MongoDB internal stores Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cleanAllMongoSchemas(workspaceName: string, storeName: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).cleanAllMongoSchemas(workspaceName, storeName, options).then((request) => request(axios, basePath));
        },
        /**
         * Cleans a MongoDB internal store Schemas for an App-Schema store.
         * @summary Cleans a MongoDB internal store Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {string} internalStoreId The store ID for the internal MongoDB store as specified on App-Schema Mappings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cleanMongoSchema(workspaceName: string, storeName: string, internalStoreId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).cleanMongoSchema(workspaceName, storeName, internalStoreId, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid, only used for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataStoreUpload(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteDataStoreUpload(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a data store from the server.
         * @summary Delete data store
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the data store to delete.
         * @param {boolean} [recurse] The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDatastore(workspaceName: string, storeName: string, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteDatastore(workspaceName, storeName, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use /datastores/{datastore} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletedatastores(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deletedatastores(options).then((request) => request(axios, basePath));
        },
        /**
         * Controls a particular data store in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores/{datastore}.xml\" for XML).
         * @summary Retrieve a particular data store from a workspace
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the data store to retrieve.
         * @param {boolean} [quietOnNotFound] The quietOnNotFound parameter avoids logging an exception when the data store is not present. Note that 404 status code will still be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataStore(workspaceName: string, storeName: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<Datastore> {
            return DefaultApiFp(configuration).getDataStore(workspaceName, storeName, quietOnNotFound, options).then((request) => request(axios, basePath));
        },
        /**
         * Deprecated. Retrieve the underlying files for the data store as a zip file with MIME type application/zip
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. Unused for GET
         * @param {string} format The type of source data store (e.g., \&quot;shp\&quot;). Unused for GET
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataStoreUpload(workspaceName: string, storeName: string, method: string, format: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getDataStoreUpload(workspaceName, storeName, method, format, options).then((request) => request(axios, basePath));
        },
        /**
         * List all data stores in workspace ws. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
         * @summary Get a list of data stores
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDatastores(workspaceName: string, options?: any): AxiosPromise<Array<object>> {
            return DefaultApiFp(configuration).getDatastores(workspaceName, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid, use PUT for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDataStoreUpload(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postDataStoreUpload(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a data store definition, or POST with /datastore to add a new definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDatastore(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postDatastore(options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new data store to the workspace.
         * @summary Create a new data store
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {Datastore} dataStoreBody The data store body information to upload.  The contents of the connection parameters will differ depending on the type of data store being added.  - GeoPackage    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;database&gt;file:///path/to/nyc.gpkg&lt;/database&gt;         &lt;dbtype&gt;geopkg&lt;/dbtype&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;file:///path/to/nyc.gpkg\&quot;},             {\&quot;@key\&quot;:\&quot;dbtype\&quot;,\&quot;$\&quot;:\&quot;geopkg\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | database | Database | user | File | True | &#x60; &#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | dbtype | Type | program | String | True | &#x60;geopkg&#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | user | user name to login as | user | String | False | &#x60; &#x60; |  - PostGIS    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;host&gt;localhost&lt;/host&gt;         &lt;port&gt;5432&lt;/port&gt;         &lt;database&gt;nyc&lt;/database&gt;         &lt;user&gt;bob&lt;/user&gt;         &lt;passwd&gt;postgres&lt;/passwd&gt;         &lt;dbtype&gt;postgis&lt;/dbtype&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;host\&quot;,\&quot;$\&quot;:\&quot;localhost\&quot;},             {\&quot;@key\&quot;:\&quot;port\&quot;,\&quot;$\&quot;:\&quot;5432\&quot;},             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;nyc\&quot;},             {\&quot;@key\&quot;:\&quot;user\&quot;,\&quot;$\&quot;:\&quot;bob\&quot;},             {\&quot;@key\&quot;:\&quot;passwd\&quot;,\&quot;$\&quot;:\&quot;postgres\&quot;},             {\&quot;@key\&quot;:\&quot;dbtype\&quot;,\&quot;$\&quot;:\&quot;postgis\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | port | Port | user | Integer | True | &#x60;5432&#x60; |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | &#x60;True&#x60; |   | create database | Creates the database if it does not exist yet | advanced | Boolean | False | &#x60;False&#x60; |   | create database params | Extra specifications appended to the CREATE DATABASE command | advanced | String | False | &#x60;&#x60; |   | dbtype | Type | program | String | True | &#x60;postgis&#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | &#x60;50&#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows us to push more of the filter into the database, increasing performance of the postgis table. | advanced | Boolean | False | &#x60;False&#x60; |   | host | Host | user | String | True | &#x60;localhost&#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | &#x60;True&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | &#x60;True&#x60; |   | database | Database | user | String | False | &#x60; &#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | preparedStatements | Use prepared statements | user | Boolean | False | &#x60;False&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | schema | Schema | user | String | False | &#x60;public&#x60; |   | user | user name to login as | user | String | True | &#x60; &#x60; |  - Shapefile    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/nyc.shp&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/nyc.shp\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |  - Directory of spatial files (shapefiles)    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/directory&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/directory\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |   - Web Feature Service    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;GET_CAPABILITIES_URL&gt;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities&lt;/GET_CAPABILITIES_URL&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;GET_CAPABILITIES_URL\&quot;,\&quot;$\&quot;:\&quot;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | &#x60; &#x60; |   | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | &#x60; &#x60; |   | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | &#x60;10&#x60; |   | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | &#x60; &#x60; |   | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | &#x60;org.geotools.xml.PreventLocalEntityResolver@75e98519&#x60; |   | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | &#x60;3000&#x60; |   | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | &#x60;0&#x60; |   | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | &#x60;False&#x60; |   | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | &#x60; &#x60; |   | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | &#x60;False&#x60; |   | Namespace | Override the original WFS type name namespaces | advanced | String | False | &#x60; &#x60; |   | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | &#x60; &#x60; |   | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | &#x60; &#x60; |   | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | &#x60;False&#x60; |   | Maximum features | Positive integer used as a hard limit for the number of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | &#x60;0&#x60; |   | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | &#x60;Compliant&#x60; |   | WFS Strategy | Override WFS strategy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | &#x60;auto&#x60; |   | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | &#x60;True&#x60; |   | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | &#x60;UTF-8&#x60; |   | Outputformat | This allows the user to specify an output format, different from the default one. | advanced | String | False | &#x60; &#x60; | 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDatastores(workspaceName: string, dataStoreBody: Datastore, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).postDatastores(workspaceName, dataStoreBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates or modifies a single data store by uploading spatial data or mapping configuration (in case an app-schema data store is targeted) files.
         * @summary Uploads files to the data store, creating it if necessary
         * @param {string} workspaceName The name of the workspace containing the coverage stores.
         * @param {string} storeName The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from an remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
         * @param {string} format The type of source data store (e.g., \&quot;shp\&quot;).
         * @param {string} [configure] The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \&quot;none\&quot; to avoid configuring coverages.
         * @param {string} [target] The type of target data store (e.g., \&quot;shp\&quot;). Same as format if not provided.
         * @param {string} [update] The update mode. If \&quot;overwrite\&quot;, will overwrite existing data. Otherwise, will append to existing data.
         * @param {string} [charset] The character set of the data.
         * @param {string} [filename] The filename parameter specifies the target file name for the file to be uploaded. This is important to avoid clashes with existing files.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDataStoreUpload(workspaceName: string, storeName: string, method: string, format: string, configure?: string, target?: string, update?: string, charset?: string, filename?: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putDataStoreUpload(workspaceName, storeName, method, format, configure, target, update, charset, filename, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify data store ds. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores/{ds}.xml\" for XML).
         * @summary Modify a data store.
         * @param {string} workspaceName The name of the workspace containing the data store.
         * @param {string} storeName The name of the data store to modify.
         * @param {Datastore} dataStoreBody The updated data store definition. For a PUT, only values which should be changed need to be included. The connectionParameters map counts as a single value,  so if you change it all pre-existing connection parameters will be overwritten.  The contents of the connection parameters will differ depending on the type of data store being added.  - GeoPackage    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;database&gt;file:///path/to/nyc.gpkg&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;file:///path/to/nyc.gpkg\&quot;},           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | database | Database | user | File | True | &#x60; &#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | dbtype | Type | program | String | True | &#x60;geopkg&#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | user | user name to login as | user | String | False | &#x60; &#x60; |  - PostGIS    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;host&gt;localhost&lt;/host&gt;         &lt;port&gt;5432&lt;/port&gt;         &lt;database&gt;nyc&lt;/database&gt;         &lt;user&gt;bob&lt;/user&gt;         &lt;passwd&gt;postgres&lt;/passwd&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;host\&quot;,\&quot;$\&quot;:\&quot;localhost\&quot;},             {\&quot;@key\&quot;:\&quot;port\&quot;,\&quot;$\&quot;:\&quot;5432\&quot;},             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;nyc\&quot;},             {\&quot;@key\&quot;:\&quot;user\&quot;,\&quot;$\&quot;:\&quot;bob\&quot;},             {\&quot;@key\&quot;:\&quot;passwd\&quot;,\&quot;$\&quot;:\&quot;postgres\&quot;},           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | port | Port | user | Integer | True | &#x60;5432&#x60; |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | &#x60;True&#x60; |   | create database | Creates the database if it does not exist yet | advanced | Boolean | False | &#x60;False&#x60; |   | create database params | Extra specifications appended to the CREATE DATABASE command | advanced | String | False | &#x60;&#x60; |   | dbtype | Type | program | String | True | &#x60;postgis&#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | &#x60;50&#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows us to push more of the filter into the database, increasing performance of the postgis table. | advanced | Boolean | False | &#x60;False&#x60; |   | host | Host | user | String | True | &#x60;localhost&#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | &#x60;True&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | &#x60;True&#x60; |   | database | Database | user | String | False | &#x60; &#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | preparedStatements | Use prepared statements | user | Boolean | False | &#x60;False&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | schema | Schema | user | String | False | &#x60;public&#x60; |   | user | user name to login as | user | String | True | &#x60; &#x60; |  - Shapefile    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/nyc.shp&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/nyc.shp\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |  - Directory of spatial files (shapefiles)    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/directory&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/directory\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |   - Web Feature Service    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;GET_CAPABILITIES_URL&gt;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities&lt;/GET_CAPABILITIES_URL&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;GET_CAPABILITIES_URL\&quot;,\&quot;$\&quot;:\&quot;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | &#x60; &#x60; |   | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | &#x60; &#x60; |   | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | &#x60;10&#x60; |   | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | &#x60; &#x60; |   | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | &#x60;org.geotools.xml.PreventLocalEntityResolver@75e98519&#x60; |   | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | &#x60;3000&#x60; |   | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | &#x60;0&#x60; |   | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | &#x60;False&#x60; |   | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | &#x60; &#x60; |   | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | &#x60;False&#x60; |   | Namespace | Override the original WFS type name namespaces | advanced | String | False | &#x60; &#x60; |   | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | &#x60; &#x60; |   | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | &#x60; &#x60; |   | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | &#x60;False&#x60; |   | Maximum features | Positive integer used as a hard limit for the number of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | &#x60;0&#x60; |   | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | &#x60;Compliant&#x60; |   | WFS Strategy | Override WFS strategy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | &#x60;auto&#x60; |   | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | &#x60;True&#x60; |   | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | &#x60;UTF-8&#x60; |   | Outputformat | This allows the user to specify an output format, different from the default one. | advanced | String | False | &#x60; &#x60; | 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDatastore(workspaceName: string, storeName: string, dataStoreBody: Datastore, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putDatastore(workspaceName, storeName, dataStoreBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new data store, or PUT on /datastores/{datastore} to edit an existing data store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putdatastores(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putdatastores(options).then((request) => request(axios, basePath));
        },
        /**
         * Rebuilds all MongoDB internal stores Schemas for an App-Schema store.
         * @summary Rebuilds all MongoDB internal stores Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {string} [ids] Comma separated MongoDB object IDs for use in new generated schema.
         * @param {number} [max] Max number of objects for use in new generated schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rebuildAllMongoSchemas(workspaceName: string, storeName: string, ids?: string, max?: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).rebuildAllMongoSchemas(workspaceName, storeName, ids, max, options).then((request) => request(axios, basePath));
        },
        /**
         * Rebuilds a MongoDB internal store Schemas for an App-Schema store.
         * @summary Rebuilds a MongoDB internal store Schemas for an App-Schema store.
         * @param {string} workspaceName The name of the workspace containing the data stores.
         * @param {string} storeName The name of the App-Schema store
         * @param {string} internalStoreId The store ID for the internal MongoDB store as specified on App-Schema Mappings.
         * @param {string} [ids] Comma separated MongoDB object IDs for use in new generated schema.
         * @param {number} [max] Max number of objects for use in new generated schema.
         * @param {string} [schema] Name of schema to re-build.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rebuildMongoSchema(workspaceName: string, storeName: string, internalStoreId: string, ids?: string, max?: number, schema?: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).rebuildMongoSchema(workspaceName, storeName, internalStoreId, ids, max, schema, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Cleans all MongoDB internal stores Schemas for an App-Schema store.
     * @summary Cleans all MongoDB internal stores Schemas for an App-Schema store.
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {string} storeName The name of the App-Schema store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    cleanAllMongoSchemas(workspaceName: string, storeName: string, options?: any): AxiosPromise<void>;

    /**
     * Cleans a MongoDB internal store Schemas for an App-Schema store.
     * @summary Cleans a MongoDB internal store Schemas for an App-Schema store.
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {string} storeName The name of the App-Schema store
     * @param {string} internalStoreId The store ID for the internal MongoDB store as specified on App-Schema Mappings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    cleanMongoSchema(workspaceName: string, storeName: string, internalStoreId: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid, only used for uploads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteDataStoreUpload(options?: any): AxiosPromise<void>;

    /**
     * Deletes a data store from the server.
     * @summary Delete data store
     * @param {string} workspaceName The name of the workspace containing the data store.
     * @param {string} storeName The name of the data store to delete.
     * @param {boolean} [recurse] The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \&quot;false\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteDatastore(workspaceName: string, storeName: string, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use /datastores/{datastore} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deletedatastores(options?: any): AxiosPromise<void>;

    /**
     * Controls a particular data store in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores/{datastore}.xml\" for XML).
     * @summary Retrieve a particular data store from a workspace
     * @param {string} workspaceName The name of the workspace containing the data store.
     * @param {string} storeName The name of the data store to retrieve.
     * @param {boolean} [quietOnNotFound] The quietOnNotFound parameter avoids logging an exception when the data store is not present. Note that 404 status code will still be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDataStore(workspaceName: string, storeName: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<Datastore>;

    /**
     * Deprecated. Retrieve the underlying files for the data store as a zip file with MIME type application/zip
     * @param {string} workspaceName The name of the workspace containing the data store.
     * @param {string} storeName The name of the store to be retrieved
     * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. Unused for GET
     * @param {string} format The type of source data store (e.g., \&quot;shp\&quot;). Unused for GET
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDataStoreUpload(workspaceName: string, storeName: string, method: string, format: string, options?: any): AxiosPromise<void>;

    /**
     * List all data stores in workspace ws. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
     * @summary Get a list of data stores
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDatastores(workspaceName: string, options?: any): AxiosPromise<Array<object>>;

    /**
     * Invalid, use PUT for uploads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postDataStoreUpload(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a data store definition, or POST with /datastore to add a new definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postDatastore(options?: any): AxiosPromise<void>;

    /**
     * Adds a new data store to the workspace.
     * @summary Create a new data store
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {Datastore} dataStoreBody The data store body information to upload.  The contents of the connection parameters will differ depending on the type of data store being added.  - GeoPackage    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;database&gt;file:///path/to/nyc.gpkg&lt;/database&gt;         &lt;dbtype&gt;geopkg&lt;/dbtype&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;file:///path/to/nyc.gpkg\&quot;},             {\&quot;@key\&quot;:\&quot;dbtype\&quot;,\&quot;$\&quot;:\&quot;geopkg\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | database | Database | user | File | True | &#x60; &#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | dbtype | Type | program | String | True | &#x60;geopkg&#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | user | user name to login as | user | String | False | &#x60; &#x60; |  - PostGIS    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;host&gt;localhost&lt;/host&gt;         &lt;port&gt;5432&lt;/port&gt;         &lt;database&gt;nyc&lt;/database&gt;         &lt;user&gt;bob&lt;/user&gt;         &lt;passwd&gt;postgres&lt;/passwd&gt;         &lt;dbtype&gt;postgis&lt;/dbtype&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;host\&quot;,\&quot;$\&quot;:\&quot;localhost\&quot;},             {\&quot;@key\&quot;:\&quot;port\&quot;,\&quot;$\&quot;:\&quot;5432\&quot;},             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;nyc\&quot;},             {\&quot;@key\&quot;:\&quot;user\&quot;,\&quot;$\&quot;:\&quot;bob\&quot;},             {\&quot;@key\&quot;:\&quot;passwd\&quot;,\&quot;$\&quot;:\&quot;postgres\&quot;},             {\&quot;@key\&quot;:\&quot;dbtype\&quot;,\&quot;$\&quot;:\&quot;postgis\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | port | Port | user | Integer | True | &#x60;5432&#x60; |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | &#x60;True&#x60; |   | create database | Creates the database if it does not exist yet | advanced | Boolean | False | &#x60;False&#x60; |   | create database params | Extra specifications appended to the CREATE DATABASE command | advanced | String | False | &#x60;&#x60; |   | dbtype | Type | program | String | True | &#x60;postgis&#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | &#x60;50&#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows us to push more of the filter into the database, increasing performance of the postgis table. | advanced | Boolean | False | &#x60;False&#x60; |   | host | Host | user | String | True | &#x60;localhost&#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | &#x60;True&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | &#x60;True&#x60; |   | database | Database | user | String | False | &#x60; &#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | preparedStatements | Use prepared statements | user | Boolean | False | &#x60;False&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | schema | Schema | user | String | False | &#x60;public&#x60; |   | user | user name to login as | user | String | True | &#x60; &#x60; |  - Shapefile    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/nyc.shp&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/nyc.shp\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |  - Directory of spatial files (shapefiles)    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/directory&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/directory\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |   - Web Feature Service    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;GET_CAPABILITIES_URL&gt;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities&lt;/GET_CAPABILITIES_URL&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;GET_CAPABILITIES_URL\&quot;,\&quot;$\&quot;:\&quot;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | &#x60; &#x60; |   | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | &#x60; &#x60; |   | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | &#x60;10&#x60; |   | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | &#x60; &#x60; |   | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | &#x60;org.geotools.xml.PreventLocalEntityResolver@75e98519&#x60; |   | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | &#x60;3000&#x60; |   | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | &#x60;0&#x60; |   | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | &#x60;False&#x60; |   | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | &#x60; &#x60; |   | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | &#x60;False&#x60; |   | Namespace | Override the original WFS type name namespaces | advanced | String | False | &#x60; &#x60; |   | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | &#x60; &#x60; |   | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | &#x60; &#x60; |   | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | &#x60;False&#x60; |   | Maximum features | Positive integer used as a hard limit for the number of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | &#x60;0&#x60; |   | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | &#x60;Compliant&#x60; |   | WFS Strategy | Override WFS strategy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | &#x60;auto&#x60; |   | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | &#x60;True&#x60; |   | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | &#x60;UTF-8&#x60; |   | Outputformat | This allows the user to specify an output format, different from the default one. | advanced | String | False | &#x60; &#x60; | 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postDatastores(workspaceName: string, dataStoreBody: Datastore, options?: any): AxiosPromise<string>;

    /**
     * Creates or modifies a single data store by uploading spatial data or mapping configuration (in case an app-schema data store is targeted) files.
     * @summary Uploads files to the data store, creating it if necessary
     * @param {string} workspaceName The name of the workspace containing the coverage stores.
     * @param {string} storeName The name of the store to be retrieved
     * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from an remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
     * @param {string} format The type of source data store (e.g., \&quot;shp\&quot;).
     * @param {string} [configure] The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \&quot;none\&quot; to avoid configuring coverages.
     * @param {string} [target] The type of target data store (e.g., \&quot;shp\&quot;). Same as format if not provided.
     * @param {string} [update] The update mode. If \&quot;overwrite\&quot;, will overwrite existing data. Otherwise, will append to existing data.
     * @param {string} [charset] The character set of the data.
     * @param {string} [filename] The filename parameter specifies the target file name for the file to be uploaded. This is important to avoid clashes with existing files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putDataStoreUpload(workspaceName: string, storeName: string, method: string, format: string, configure?: string, target?: string, update?: string, charset?: string, filename?: string, options?: any): AxiosPromise<void>;

    /**
     * Modify data store ds. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores/{ds}.xml\" for XML).
     * @summary Modify a data store.
     * @param {string} workspaceName The name of the workspace containing the data store.
     * @param {string} storeName The name of the data store to modify.
     * @param {Datastore} dataStoreBody The updated data store definition. For a PUT, only values which should be changed need to be included. The connectionParameters map counts as a single value,  so if you change it all pre-existing connection parameters will be overwritten.  The contents of the connection parameters will differ depending on the type of data store being added.  - GeoPackage    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;database&gt;file:///path/to/nyc.gpkg&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;file:///path/to/nyc.gpkg\&quot;},           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | database | Database | user | File | True | &#x60; &#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | dbtype | Type | program | String | True | &#x60;geopkg&#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | user | user name to login as | user | String | False | &#x60; &#x60; |  - PostGIS    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;host&gt;localhost&lt;/host&gt;         &lt;port&gt;5432&lt;/port&gt;         &lt;database&gt;nyc&lt;/database&gt;         &lt;user&gt;bob&lt;/user&gt;         &lt;passwd&gt;postgres&lt;/passwd&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;host\&quot;,\&quot;$\&quot;:\&quot;localhost\&quot;},             {\&quot;@key\&quot;:\&quot;port\&quot;,\&quot;$\&quot;:\&quot;5432\&quot;},             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;nyc\&quot;},             {\&quot;@key\&quot;:\&quot;user\&quot;,\&quot;$\&quot;:\&quot;bob\&quot;},             {\&quot;@key\&quot;:\&quot;passwd\&quot;,\&quot;$\&quot;:\&quot;postgres\&quot;},           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | port | Port | user | Integer | True | &#x60;5432&#x60; |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | &#x60;True&#x60; |   | create database | Creates the database if it does not exist yet | advanced | Boolean | False | &#x60;False&#x60; |   | create database params | Extra specifications appended to the CREATE DATABASE command | advanced | String | False | &#x60;&#x60; |   | dbtype | Type | program | String | True | &#x60;postgis&#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | &#x60;50&#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows us to push more of the filter into the database, increasing performance of the postgis table. | advanced | Boolean | False | &#x60;False&#x60; |   | host | Host | user | String | True | &#x60;localhost&#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | &#x60;True&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | &#x60;True&#x60; |   | database | Database | user | String | False | &#x60; &#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | preparedStatements | Use prepared statements | user | Boolean | False | &#x60;False&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | schema | Schema | user | String | False | &#x60;public&#x60; |   | user | user name to login as | user | String | True | &#x60; &#x60; |  - Shapefile    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/nyc.shp&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/nyc.shp\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |  - Directory of spatial files (shapefiles)    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/directory&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/directory\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |   - Web Feature Service    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;GET_CAPABILITIES_URL&gt;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities&lt;/GET_CAPABILITIES_URL&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;GET_CAPABILITIES_URL\&quot;,\&quot;$\&quot;:\&quot;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | &#x60; &#x60; |   | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | &#x60; &#x60; |   | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | &#x60;10&#x60; |   | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | &#x60; &#x60; |   | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | &#x60;org.geotools.xml.PreventLocalEntityResolver@75e98519&#x60; |   | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | &#x60;3000&#x60; |   | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | &#x60;0&#x60; |   | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | &#x60;False&#x60; |   | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | &#x60; &#x60; |   | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | &#x60;False&#x60; |   | Namespace | Override the original WFS type name namespaces | advanced | String | False | &#x60; &#x60; |   | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | &#x60; &#x60; |   | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | &#x60; &#x60; |   | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | &#x60;False&#x60; |   | Maximum features | Positive integer used as a hard limit for the number of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | &#x60;0&#x60; |   | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | &#x60;Compliant&#x60; |   | WFS Strategy | Override WFS strategy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | &#x60;auto&#x60; |   | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | &#x60;True&#x60; |   | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | &#x60;UTF-8&#x60; |   | Outputformat | This allows the user to specify an output format, different from the default one. | advanced | String | False | &#x60; &#x60; | 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putDatastore(workspaceName: string, storeName: string, dataStoreBody: Datastore, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new data store, or PUT on /datastores/{datastore} to edit an existing data store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putdatastores(options?: any): AxiosPromise<void>;

    /**
     * Rebuilds all MongoDB internal stores Schemas for an App-Schema store.
     * @summary Rebuilds all MongoDB internal stores Schemas for an App-Schema store.
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {string} storeName The name of the App-Schema store
     * @param {string} [ids] Comma separated MongoDB object IDs for use in new generated schema.
     * @param {number} [max] Max number of objects for use in new generated schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rebuildAllMongoSchemas(workspaceName: string, storeName: string, ids?: string, max?: number, options?: any): AxiosPromise<void>;

    /**
     * Rebuilds a MongoDB internal store Schemas for an App-Schema store.
     * @summary Rebuilds a MongoDB internal store Schemas for an App-Schema store.
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {string} storeName The name of the App-Schema store
     * @param {string} internalStoreId The store ID for the internal MongoDB store as specified on App-Schema Mappings.
     * @param {string} [ids] Comma separated MongoDB object IDs for use in new generated schema.
     * @param {number} [max] Max number of objects for use in new generated schema.
     * @param {string} [schema] Name of schema to re-build.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rebuildMongoSchema(workspaceName: string, storeName: string, internalStoreId: string, ids?: string, max?: number, schema?: string, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Cleans all MongoDB internal stores Schemas for an App-Schema store.
     * @summary Cleans all MongoDB internal stores Schemas for an App-Schema store.
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {string} storeName The name of the App-Schema store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cleanAllMongoSchemas(workspaceName: string, storeName: string, options?: any) {
        return DefaultApiFp(this.configuration).cleanAllMongoSchemas(workspaceName, storeName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cleans a MongoDB internal store Schemas for an App-Schema store.
     * @summary Cleans a MongoDB internal store Schemas for an App-Schema store.
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {string} storeName The name of the App-Schema store
     * @param {string} internalStoreId The store ID for the internal MongoDB store as specified on App-Schema Mappings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public cleanMongoSchema(workspaceName: string, storeName: string, internalStoreId: string, options?: any) {
        return DefaultApiFp(this.configuration).cleanMongoSchema(workspaceName, storeName, internalStoreId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid, only used for uploads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDataStoreUpload(options?: any) {
        return DefaultApiFp(this.configuration).deleteDataStoreUpload(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a data store from the server.
     * @summary Delete data store
     * @param {string} workspaceName The name of the workspace containing the data store.
     * @param {string} storeName The name of the data store to delete.
     * @param {boolean} [recurse] The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \&quot;false\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteDatastore(workspaceName: string, storeName: string, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteDatastore(workspaceName, storeName, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use /datastores/{datastore} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletedatastores(options?: any) {
        return DefaultApiFp(this.configuration).deletedatastores(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Controls a particular data store in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores/{datastore}.xml\" for XML).
     * @summary Retrieve a particular data store from a workspace
     * @param {string} workspaceName The name of the workspace containing the data store.
     * @param {string} storeName The name of the data store to retrieve.
     * @param {boolean} [quietOnNotFound] The quietOnNotFound parameter avoids logging an exception when the data store is not present. Note that 404 status code will still be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDataStore(workspaceName: string, storeName: string, quietOnNotFound?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getDataStore(workspaceName, storeName, quietOnNotFound, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deprecated. Retrieve the underlying files for the data store as a zip file with MIME type application/zip
     * @param {string} workspaceName The name of the workspace containing the data store.
     * @param {string} storeName The name of the store to be retrieved
     * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. Unused for GET
     * @param {string} format The type of source data store (e.g., \&quot;shp\&quot;). Unused for GET
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDataStoreUpload(workspaceName: string, storeName: string, method: string, format: string, options?: any) {
        return DefaultApiFp(this.configuration).getDataStoreUpload(workspaceName, storeName, method, format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all data stores in workspace ws. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
     * @summary Get a list of data stores
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDatastores(workspaceName: string, options?: any) {
        return DefaultApiFp(this.configuration).getDatastores(workspaceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid, use PUT for uploads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDataStoreUpload(options?: any) {
        return DefaultApiFp(this.configuration).postDataStoreUpload(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a data store definition, or POST with /datastore to add a new definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDatastore(options?: any) {
        return DefaultApiFp(this.configuration).postDatastore(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new data store to the workspace.
     * @summary Create a new data store
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {Datastore} dataStoreBody The data store body information to upload.  The contents of the connection parameters will differ depending on the type of data store being added.  - GeoPackage    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;database&gt;file:///path/to/nyc.gpkg&lt;/database&gt;         &lt;dbtype&gt;geopkg&lt;/dbtype&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;file:///path/to/nyc.gpkg\&quot;},             {\&quot;@key\&quot;:\&quot;dbtype\&quot;,\&quot;$\&quot;:\&quot;geopkg\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | database | Database | user | File | True | &#x60; &#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | dbtype | Type | program | String | True | &#x60;geopkg&#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | user | user name to login as | user | String | False | &#x60; &#x60; |  - PostGIS    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;host&gt;localhost&lt;/host&gt;         &lt;port&gt;5432&lt;/port&gt;         &lt;database&gt;nyc&lt;/database&gt;         &lt;user&gt;bob&lt;/user&gt;         &lt;passwd&gt;postgres&lt;/passwd&gt;         &lt;dbtype&gt;postgis&lt;/dbtype&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;host\&quot;,\&quot;$\&quot;:\&quot;localhost\&quot;},             {\&quot;@key\&quot;:\&quot;port\&quot;,\&quot;$\&quot;:\&quot;5432\&quot;},             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;nyc\&quot;},             {\&quot;@key\&quot;:\&quot;user\&quot;,\&quot;$\&quot;:\&quot;bob\&quot;},             {\&quot;@key\&quot;:\&quot;passwd\&quot;,\&quot;$\&quot;:\&quot;postgres\&quot;},             {\&quot;@key\&quot;:\&quot;dbtype\&quot;,\&quot;$\&quot;:\&quot;postgis\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | port | Port | user | Integer | True | &#x60;5432&#x60; |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | &#x60;True&#x60; |   | create database | Creates the database if it does not exist yet | advanced | Boolean | False | &#x60;False&#x60; |   | create database params | Extra specifications appended to the CREATE DATABASE command | advanced | String | False | &#x60;&#x60; |   | dbtype | Type | program | String | True | &#x60;postgis&#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | &#x60;50&#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows us to push more of the filter into the database, increasing performance of the postgis table. | advanced | Boolean | False | &#x60;False&#x60; |   | host | Host | user | String | True | &#x60;localhost&#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | &#x60;True&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | &#x60;True&#x60; |   | database | Database | user | String | False | &#x60; &#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | preparedStatements | Use prepared statements | user | Boolean | False | &#x60;False&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | schema | Schema | user | String | False | &#x60;public&#x60; |   | user | user name to login as | user | String | True | &#x60; &#x60; |  - Shapefile    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/nyc.shp&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/nyc.shp\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |  - Directory of spatial files (shapefiles)    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/directory&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/directory\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |   - Web Feature Service    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;name&gt;nyc&lt;/name&gt;       &lt;connectionParameters&gt;         &lt;GET_CAPABILITIES_URL&gt;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities&lt;/GET_CAPABILITIES_URL&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;name\&quot;: \&quot;nyc\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;GET_CAPABILITIES_URL\&quot;,\&quot;$\&quot;:\&quot;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | &#x60; &#x60; |   | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | &#x60; &#x60; |   | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | &#x60;10&#x60; |   | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | &#x60; &#x60; |   | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | &#x60;org.geotools.xml.PreventLocalEntityResolver@75e98519&#x60; |   | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | &#x60;3000&#x60; |   | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | &#x60;0&#x60; |   | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | &#x60;False&#x60; |   | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | &#x60; &#x60; |   | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | &#x60;False&#x60; |   | Namespace | Override the original WFS type name namespaces | advanced | String | False | &#x60; &#x60; |   | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | &#x60; &#x60; |   | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | &#x60; &#x60; |   | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | &#x60;False&#x60; |   | Maximum features | Positive integer used as a hard limit for the number of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | &#x60;0&#x60; |   | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | &#x60;Compliant&#x60; |   | WFS Strategy | Override WFS strategy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | &#x60;auto&#x60; |   | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | &#x60;True&#x60; |   | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | &#x60;UTF-8&#x60; |   | Outputformat | This allows the user to specify an output format, different from the default one. | advanced | String | False | &#x60; &#x60; | 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postDatastores(workspaceName: string, dataStoreBody: Datastore, options?: any) {
        return DefaultApiFp(this.configuration).postDatastores(workspaceName, dataStoreBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates or modifies a single data store by uploading spatial data or mapping configuration (in case an app-schema data store is targeted) files.
     * @summary Uploads files to the data store, creating it if necessary
     * @param {string} workspaceName The name of the workspace containing the coverage stores.
     * @param {string} storeName The name of the store to be retrieved
     * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from an remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
     * @param {string} format The type of source data store (e.g., \&quot;shp\&quot;).
     * @param {string} [configure] The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \&quot;none\&quot; to avoid configuring coverages.
     * @param {string} [target] The type of target data store (e.g., \&quot;shp\&quot;). Same as format if not provided.
     * @param {string} [update] The update mode. If \&quot;overwrite\&quot;, will overwrite existing data. Otherwise, will append to existing data.
     * @param {string} [charset] The character set of the data.
     * @param {string} [filename] The filename parameter specifies the target file name for the file to be uploaded. This is important to avoid clashes with existing files.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDataStoreUpload(workspaceName: string, storeName: string, method: string, format: string, configure?: string, target?: string, update?: string, charset?: string, filename?: string, options?: any) {
        return DefaultApiFp(this.configuration).putDataStoreUpload(workspaceName, storeName, method, format, configure, target, update, charset, filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify data store ds. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores/{ds}.xml\" for XML).
     * @summary Modify a data store.
     * @param {string} workspaceName The name of the workspace containing the data store.
     * @param {string} storeName The name of the data store to modify.
     * @param {Datastore} dataStoreBody The updated data store definition. For a PUT, only values which should be changed need to be included. The connectionParameters map counts as a single value,  so if you change it all pre-existing connection parameters will be overwritten.  The contents of the connection parameters will differ depending on the type of data store being added.  - GeoPackage    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;database&gt;file:///path/to/nyc.gpkg&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;file:///path/to/nyc.gpkg\&quot;},           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | database | Database | user | File | True | &#x60; &#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | dbtype | Type | program | String | True | &#x60;geopkg&#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | user | user name to login as | user | String | False | &#x60; &#x60; |  - PostGIS    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;host&gt;localhost&lt;/host&gt;         &lt;port&gt;5432&lt;/port&gt;         &lt;database&gt;nyc&lt;/database&gt;         &lt;user&gt;bob&lt;/user&gt;         &lt;passwd&gt;postgres&lt;/passwd&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;host\&quot;,\&quot;$\&quot;:\&quot;localhost\&quot;},             {\&quot;@key\&quot;:\&quot;port\&quot;,\&quot;$\&quot;:\&quot;5432\&quot;},             {\&quot;@key\&quot;:\&quot;database\&quot;,\&quot;$\&quot;:\&quot;nyc\&quot;},             {\&quot;@key\&quot;:\&quot;user\&quot;,\&quot;$\&quot;:\&quot;bob\&quot;},             {\&quot;@key\&quot;:\&quot;passwd\&quot;,\&quot;$\&quot;:\&quot;postgres\&quot;},           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Connection timeout | number of seconds the connection pool will wait before timing out attempting to get a new connection (default, 20 seconds) | user | Integer | False | &#x60;20&#x60; |   | validate connections | check connection is alive before using it | user | Boolean | False | &#x60;True&#x60; |   | port | Port | user | Integer | True | &#x60;5432&#x60; |   | Primary key metadata table | The optional table containing primary key structure and sequence associations. Can be expressed as \&#39;schema.name\&#39; or just \&#39;name\&#39; | user | String | False | &#x60; &#x60; |   | Support on the fly geometry simplification | When enabled, operations such as map rendering will pass a hint that will enable the usage of ST_Simplify | user | Boolean | False | &#x60;True&#x60; |   | create database | Creates the database if it does not exist yet | advanced | Boolean | False | &#x60;False&#x60; |   | create database params | Extra specifications appended to the CREATE DATABASE command | advanced | String | False | &#x60;&#x60; |   | dbtype | Type | program | String | True | &#x60;postgis&#x60; |   | Batch insert size | Number of records inserted in the same batch (default, 1). For optimal performance, set to 100. | user | Integer | False | &#x60;1&#x60; |   | namespace | Namespace prefix | user | String | False | &#x60; &#x60; |   | Max connection idle time | number of seconds a connection needs to stay idle for the evictor to consider closing it | user | Integer | False | &#x60;300&#x60; |   | Session startup SQL | SQL statement executed when the connection is grabbed from the pool | user | String | False | &#x60; &#x60; |   | Expose primary keys | Expose primary key columns as attributes of the feature type | user | Boolean | False | &#x60;False&#x60; |   | min connections | minimum number of pooled connections | user | Integer | False | &#x60;1&#x60; |   | Max open prepared statements | Maximum number of prepared statements kept open and cached for each connection in the pool. Set to 0 to have unbounded caching, to -1 to disable caching | user | Integer | False | &#x60;50&#x60; |   | Callback factory | Name of JDBCReaderCallbackFactory to enable on the data store | user | String | False | &#x60; &#x60; |   | passwd | password used to login | user | String | False | &#x60; &#x60; |   | encode functions | set to true to have a set of filter functions be translated directly in SQL. Due to differences in the type systems the result might not be the same as evaluating them in memory, including the SQL failing with errors while the in memory version works fine. However this allows us to push more of the filter into the database, increasing performance of the postgis table. | advanced | Boolean | False | &#x60;False&#x60; |   | host | Host | user | String | True | &#x60;localhost&#x60; |   | Evictor tests per run | number of connections checked by the idle connection evictor for each of its runs (defaults to 3) | user | Integer | False | &#x60;3&#x60; |   | Loose bbox | Perform only primary filter on bbox | user | Boolean | False | &#x60;True&#x60; |   | Evictor run periodicity | number of seconds between idle object evictor runs (default, 300 seconds) | user | Integer | False | &#x60;300&#x60; |   | Estimated extends | Use the spatial index information to quickly get an estimate of the data bounds | user | Boolean | False | &#x60;True&#x60; |   | database | Database | user | String | False | &#x60; &#x60; |   | fetch size | number of records read with each interaction with the DBMS | user | Integer | False | &#x60;1000&#x60; |   | Test while idle | Periodically test the connections are still valid also while idle in the pool | user | Boolean | False | &#x60;True&#x60; |   | max connections | maximum number of open connections | user | Integer | False | &#x60;10&#x60; |   | preparedStatements | Use prepared statements | user | Boolean | False | &#x60;False&#x60; |   | Session close-up SQL | SQL statement executed when the connection is released to the pool | user | String | False | &#x60; &#x60; |   | schema | Schema | user | String | False | &#x60;public&#x60; |   | user | user name to login as | user | String | True | &#x60; &#x60; |  - Shapefile    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/nyc.shp&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/nyc.shp\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |  - Directory of spatial files (shapefiles)    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;url&gt;file:/path/to/directory&lt;/database&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;url\&quot;,\&quot;$\&quot;:\&quot;file:/path/to/directory\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | cache and reuse memory maps | only memory map a file one, then cache and reuse the map | advanced | Boolean | False | &#x60;True&#x60; |   | namespace | URI to the namespace | advanced | URI | False | &#x60; &#x60; |   | filetype | Discriminator for directory stores | program | String | False | &#x60;shapefile&#x60; |   | charset | character used to decode strings from the DBF file | advanced | Charset | False | &#x60;ISO-8859-1&#x60; |   | create spatial index | enable/disable the automatic creation of spatial index | advanced | Boolean | False | &#x60;True&#x60; |   | fstype | Enable using a setting of \&#39;shape\&#39;. | advanced | String | False | &#x60;shape&#x60; |   | url | url to a .shp file | user | URL | True | &#x60; &#x60; |   | enable spatial index | enable/disable the use of spatial index for local shapefiles | advanced | Boolean | False | &#x60;True&#x60; |   | memory mapped buffer | enable/disable the use of memory-mapped IO | advanced | Boolean | False | &#x60;False&#x60; |   | timezone | time zone used to read dates from the DBF file | advanced | TimeZone | False | &#x60;Pacific Standard Time&#x60; |   - Web Feature Service    Examples:   - application/xml:      &#x60;&#x60;&#x60;     &lt;dataStore&gt;       &lt;description&gt;A data store&lt;/description&gt;       &lt;enabled&gt;true&lt;/enabled&gt;       &lt;__default&gt;true&lt;/__default&gt;       &lt;connectionParameters&gt;         &lt;GET_CAPABILITIES_URL&gt;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities&lt;/GET_CAPABILITIES_URL&gt;       &lt;/connectionParameters&gt;     &lt;/dataStore&gt;     &#x60;&#x60;&#x60;    - application/json:      &#x60;&#x60;&#x60;     {       \&quot;dataStore\&quot;: {         \&quot;description\&quot;: \&quot;A data store\&quot;,         \&quot;enabled\&quot;: \&quot;true\&quot;,         \&quot;_default\&quot;: \&quot;true\&quot;,         \&quot;connectionParameters\&quot;: {           \&quot;entry\&quot;: [             {\&quot;@key\&quot;:\&quot;GET_CAPABILITIES_URL\&quot;,\&quot;$\&quot;:\&quot;http://localhost:8080/geoserver/wfs?request&#x3D;GetCapabilities\&quot;}           ]         }       }     }     &#x60;&#x60;&#x60;    Connection Parameters:    | key | description | level | type | required | default |   | --- | ----------- | ----- | ---- | -------- | ------- |   | Protocol | Sets a preference for the HTTP protocol to use when requesting WFS functionality. Set this value to Boolean.TRUE for POST, Boolean.FALSE for GET or NULL for AUTO | user | Boolean | False | &#x60; &#x60; |   | WFS GetCapabilities URL | Represents a URL to the getCapabilities document or a server instance. | user | URL | False | &#x60; &#x60; |   | Buffer Size | This allows the user to specify a buffer size in features. This param has a default value of 10 features. | user | Integer | False | &#x60;10&#x60; |   | Filter compliance | Level of compliance to WFS specification (0-low,1-medium,2-high) | user | Integer | False | &#x60; &#x60; |   | EntityResolver | Sets the entity resolver used to expand XML entities | program | EntityResolver | False | &#x60;org.geotools.xml.PreventLocalEntityResolver@75e98519&#x60; |   | Time-out | This allows the user to specify a timeout in milliseconds. This param has a default value of 3000ms. | user | Integer | False | &#x60;3000&#x60; |   | GmlComplianceLevel | Optional OGC GML compliance level required. | user | Integer | False | &#x60;0&#x60; |   | Lenient | Indicates that datastore should do its best to create features from the provided data even if it does not accurately match the schema.  Errors will be logged but the parsing will continue if this is true.  Default is false | user | Boolean | False | &#x60;False&#x60; |   | Password | This allows the user to specify a username. This param should not be used without the USERNAME param. | user | String | False | &#x60; &#x60; |   | Use Default SRS | Use always the declared DefaultSRS for requests and reproject locally if necessary | advanced | Boolean | False | &#x60;False&#x60; |   | Namespace | Override the original WFS type name namespaces | advanced | String | False | &#x60; &#x60; |   | Username | This allows the user to specify a username. This param should not be used without the PASSWORD param. | user | String | False | &#x60; &#x60; |   | Axis Order Filter | Indicates axis order used by the remote WFS server for filters. It applies only to WFS 1.x.0 servers. Default is the same as AXIS_ORDER | advanced | String | False | &#x60; &#x60; |   | GmlCompatibleTypeNames | Use Gml Compatible TypeNames (replace : by _). | user | Boolean | False | &#x60;False&#x60; |   | Maximum features | Positive integer used as a hard limit for the number of Features to retrieve for each FeatureType. A value of zero or not providing this parameter means no limit. | user | Integer | False | &#x60;0&#x60; |   | Axis Order | Indicates axis order used by the remote WFS server in result coordinates. It applies only to WFS 1.x.0 servers. Default is Compliant | advanced | String | False | &#x60;Compliant&#x60; |   | WFS Strategy | Override WFS strategy with either cubwerx, ionic, mapserver, geoserver, strict, nonstrict or arcgis strategy. | user | String | False | &#x60;auto&#x60; |   | Try GZIP | Indicates that datastore should use gzip to transfer data if the server supports it. Default is true | user | Boolean | False | &#x60;True&#x60; |   | Encoding | This allows the user to specify the character encoding of the XML-Requests sent to the Server. Defaults to UTF-8 | user | String | False | &#x60;UTF-8&#x60; |   | Outputformat | This allows the user to specify an output format, different from the default one. | advanced | String | False | &#x60; &#x60; | 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putDatastore(workspaceName: string, storeName: string, dataStoreBody: Datastore, options?: any) {
        return DefaultApiFp(this.configuration).putDatastore(workspaceName, storeName, dataStoreBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new data store, or PUT on /datastores/{datastore} to edit an existing data store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putdatastores(options?: any) {
        return DefaultApiFp(this.configuration).putdatastores(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rebuilds all MongoDB internal stores Schemas for an App-Schema store.
     * @summary Rebuilds all MongoDB internal stores Schemas for an App-Schema store.
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {string} storeName The name of the App-Schema store
     * @param {string} [ids] Comma separated MongoDB object IDs for use in new generated schema.
     * @param {number} [max] Max number of objects for use in new generated schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rebuildAllMongoSchemas(workspaceName: string, storeName: string, ids?: string, max?: number, options?: any) {
        return DefaultApiFp(this.configuration).rebuildAllMongoSchemas(workspaceName, storeName, ids, max, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rebuilds a MongoDB internal store Schemas for an App-Schema store.
     * @summary Rebuilds a MongoDB internal store Schemas for an App-Schema store.
     * @param {string} workspaceName The name of the workspace containing the data stores.
     * @param {string} storeName The name of the App-Schema store
     * @param {string} internalStoreId The store ID for the internal MongoDB store as specified on App-Schema Mappings.
     * @param {string} [ids] Comma separated MongoDB object IDs for use in new generated schema.
     * @param {number} [max] Max number of objects for use in new generated schema.
     * @param {string} [schema] Name of schema to re-build.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rebuildMongoSchema(workspaceName: string, storeName: string, internalStoreId: string, ids?: string, max?: number, schema?: string, options?: any) {
        return DefaultApiFp(this.configuration).rebuildMongoSchema(workspaceName, storeName, internalStoreId, ids, max, schema, options).then((request) => request(this.axios, this.basePath));
    }

}


