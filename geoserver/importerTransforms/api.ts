// tslint:disable
/**
 * GeoServer Importer Extension - Transforms
 * The Importer extension gives a GeoServer administrator an alternate, more-streamlined method for uploading and configuring new layers. The transforms endpoint manages data transforms applied to sindividual import jobs. The importer extension is an optional install and may not be available on all deployments of GeoServer
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * A data transform applied to the import data.
 * @export
 * @interface Transform
 */
export interface Transform {
    /**
     * The name of the transform
     * @type {string}
     * @memberof Transform
     */
    type?: string;
    /**
     * URL to the transform endpoint
     * @type {string}
     * @memberof Transform
     */
    href?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Removes the transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
         * @summary Removes the transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} transformId The ID of the transform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransform: async (importId: string, taskId: string, transformId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling deleteTransform.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling deleteTransform.');
            }
            // verify required parameter 'transformId' is not null or undefined
            if (transformId === null || transformId === undefined) {
                throw new RequiredError('transformId','Required parameter transformId was null or undefined when calling deleteTransform.');
            }
            const localVarPath = `/imports/{importId}/tasks/{taskId}/transforms/{transformId}`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"transformId"}}`, encodeURIComponent(String(transformId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
         * @summary Retrieve a transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} transformId The ID of the transform
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransform: async (importId: string, taskId: string, transformId: string, expand?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling getTransform.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling getTransform.');
            }
            // verify required parameter 'transformId' is not null or undefined
            if (transformId === null || transformId === undefined) {
                throw new RequiredError('transformId','Required parameter transformId was null or undefined when calling getTransform.');
            }
            const localVarPath = `/imports/{importId}/tasks/{taskId}/transforms/{transformId}`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"transformId"}}`, encodeURIComponent(String(transformId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the list of transformations of a task with id {taskId} within import with id {importId}
         * @summary Retrieve transformation list
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransforms: async (importId: string, taskId: string, expand?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling getTransforms.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling getTransforms.');
            }
            const localVarPath = `/imports/{importId}/tasks/{taskId}/transforms`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new transormation and append it inside a task with id {taskId} within import with id {importId}
         * @summary Create a new transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {Transform} transformBody The transform to add.
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTransform: async (importId: string, taskId: string, transformBody: Transform, expand?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling postTransform.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling postTransform.');
            }
            // verify required parameter 'transformBody' is not null or undefined
            if (transformBody === null || transformBody === undefined) {
                throw new RequiredError('transformBody','Required parameter transformBody was null or undefined when calling postTransform.');
            }
            const localVarPath = `/imports/{importId}/tasks/{taskId}/transforms`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof transformBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transformBody !== undefined ? transformBody : {}) : (transformBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the definition of a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
         * @summary Modifies a transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} transformId The ID of the transform
         * @param {Transform} transformBody The transform to add.
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTransform: async (importId: string, taskId: string, transformId: string, transformBody: Transform, expand?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling putTransform.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling putTransform.');
            }
            // verify required parameter 'transformId' is not null or undefined
            if (transformId === null || transformId === undefined) {
                throw new RequiredError('transformId','Required parameter transformId was null or undefined when calling putTransform.');
            }
            // verify required parameter 'transformBody' is not null or undefined
            if (transformBody === null || transformBody === undefined) {
                throw new RequiredError('transformBody','Required parameter transformBody was null or undefined when calling putTransform.');
            }
            const localVarPath = `/imports/{importId}/tasks/{taskId}/transforms/{transformId}`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"transformId"}}`, encodeURIComponent(String(transformId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof transformBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transformBody !== undefined ? transformBody : {}) : (transformBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Removes the transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
         * @summary Removes the transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} transformId The ID of the transform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTransform(importId: string, taskId: string, transformId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteTransform(importId, taskId, transformId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
         * @summary Retrieve a transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} transformId The ID of the transform
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransform(importId: string, taskId: string, transformId: string, expand?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transform>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTransform(importId, taskId, transformId, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve the list of transformations of a task with id {taskId} within import with id {importId}
         * @summary Retrieve transformation list
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransforms(importId: string, taskId: string, expand?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transform>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTransforms(importId, taskId, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new transormation and append it inside a task with id {taskId} within import with id {importId}
         * @summary Create a new transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {Transform} transformBody The transform to add.
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTransform(importId: string, taskId: string, transformBody: Transform, expand?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postTransform(importId, taskId, transformBody, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies the definition of a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
         * @summary Modifies a transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} transformId The ID of the transform
         * @param {Transform} transformBody The transform to add.
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTransform(importId: string, taskId: string, transformId: string, transformBody: Transform, expand?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transform>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putTransform(importId, taskId, transformId, transformBody, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Removes the transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
         * @summary Removes the transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} transformId The ID of the transform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransform(importId: string, taskId: string, transformId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteTransform(importId, taskId, transformId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
         * @summary Retrieve a transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} transformId The ID of the transform
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransform(importId: string, taskId: string, transformId: string, expand?: string, options?: any): AxiosPromise<Transform> {
            return DefaultApiFp(configuration).getTransform(importId, taskId, transformId, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the list of transformations of a task with id {taskId} within import with id {importId}
         * @summary Retrieve transformation list
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransforms(importId: string, taskId: string, expand?: string, options?: any): AxiosPromise<Array<Transform>> {
            return DefaultApiFp(configuration).getTransforms(importId, taskId, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new transormation and append it inside a task with id {taskId} within import with id {importId}
         * @summary Create a new transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {Transform} transformBody The transform to add.
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTransform(importId: string, taskId: string, transformBody: Transform, expand?: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postTransform(importId, taskId, transformBody, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the definition of a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
         * @summary Modifies a transformation
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} transformId The ID of the transform
         * @param {Transform} transformBody The transform to add.
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTransform(importId: string, taskId: string, transformId: string, transformBody: Transform, expand?: string, options?: any): AxiosPromise<Transform> {
            return DefaultApiFp(configuration).putTransform(importId, taskId, transformId, transformBody, expand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Removes the transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
     * @summary Removes the transformation
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} transformId The ID of the transform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteTransform(importId: string, taskId: string, transformId: string, options?: any): AxiosPromise<void>;

    /**
     * Retrieve a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
     * @summary Retrieve a transformation
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} transformId The ID of the transform
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTransform(importId: string, taskId: string, transformId: string, expand?: string, options?: any): AxiosPromise<Transform>;

    /**
     * Retrieve the list of transformations of a task with id {taskId} within import with id {importId}
     * @summary Retrieve transformation list
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTransforms(importId: string, taskId: string, expand?: string, options?: any): AxiosPromise<Array<Transform>>;

    /**
     * Create a new transormation and append it inside a task with id {taskId} within import with id {importId}
     * @summary Create a new transformation
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {Transform} transformBody The transform to add.
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postTransform(importId: string, taskId: string, transformBody: Transform, expand?: string, options?: any): AxiosPromise<void>;

    /**
     * Modifies the definition of a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
     * @summary Modifies a transformation
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} transformId The ID of the transform
     * @param {Transform} transformBody The transform to add.
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putTransform(importId: string, taskId: string, transformId: string, transformBody: Transform, expand?: string, options?: any): AxiosPromise<Transform>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Removes the transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
     * @summary Removes the transformation
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} transformId The ID of the transform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTransform(importId: string, taskId: string, transformId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteTransform(importId, taskId, transformId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
     * @summary Retrieve a transformation
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} transformId The ID of the transform
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTransform(importId: string, taskId: string, transformId: string, expand?: string, options?: any) {
        return DefaultApiFp(this.configuration).getTransform(importId, taskId, transformId, expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the list of transformations of a task with id {taskId} within import with id {importId}
     * @summary Retrieve transformation list
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTransforms(importId: string, taskId: string, expand?: string, options?: any) {
        return DefaultApiFp(this.configuration).getTransforms(importId, taskId, expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new transormation and append it inside a task with id {taskId} within import with id {importId}
     * @summary Create a new transformation
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {Transform} transformBody The transform to add.
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postTransform(importId: string, taskId: string, transformBody: Transform, expand?: string, options?: any) {
        return DefaultApiFp(this.configuration).postTransform(importId, taskId, transformBody, expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the definition of a transformation identified by {transformId} inside a task with id {taskId} within import with id {importId}
     * @summary Modifies a transformation
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} transformId The ID of the transform
     * @param {Transform} transformBody The transform to add.
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to. Defaults to \&quot;self\&quot; or \&quot;none\&quot;, depending on the request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putTransform(importId: string, taskId: string, transformId: string, transformBody: Transform, expand?: string, options?: any) {
        return DefaultApiFp(this.configuration).putTransform(importId, taskId, transformId, transformBody, expand, options).then((request) => request(this.axios, this.basePath));
    }

}


