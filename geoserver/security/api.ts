// tslint:disable
/**
 * GeoServer Security
 * The Security area shows access rules and other configuration for the security subsystem
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ACLLayers
 */
export interface ACLLayers {
    /**
     * 
     * @type {ACLLayersRule}
     * @memberof ACLLayers
     */
    rule?: ACLLayersRule;
}
/**
 * 
 * @export
 * @interface ACLLayersRule
 */
export interface ACLLayersRule {
    /**
     * Security pattern of the form <workspace>.<layer>.[r|w|a] 
     * @type {string}
     * @memberof ACLLayersRule
     */
    resource?: string;
    /**
     * Comma-separated list of roles
     * @type {string}
     * @memberof ACLLayersRule
     */
    text?: string;
}
/**
 * 
 * @export
 * @interface ACLREST
 */
export interface ACLREST {
    /**
     * 
     * @type {ACLRESTRule}
     * @memberof ACLREST
     */
    rule?: ACLRESTRule;
}
/**
 * 
 * @export
 * @interface ACLRESTRule
 */
export interface ACLRESTRule {
    /**
     * Security pattern of the form \\<URL Ant pattern\\>:\\<comma separated list of HTTP methods\\> 
     * @type {string}
     * @memberof ACLRESTRule
     */
    resource?: string;
    /**
     * Comma-separated list of roles
     * @type {string}
     * @memberof ACLRESTRule
     */
    text?: string;
}
/**
 * 
 * @export
 * @interface ACLServices
 */
export interface ACLServices {
    /**
     * 
     * @type {ACLServicesRule}
     * @memberof ACLServices
     */
    rule?: ACLServicesRule;
}
/**
 * 
 * @export
 * @interface ACLServicesRule
 */
export interface ACLServicesRule {
    /**
     * Security pattern of the form \\<service\\>.\\<operation\\> 
     * @type {string}
     * @memberof ACLServicesRule
     */
    resource?: string;
    /**
     * Comma-separated list of roles
     * @type {string}
     * @memberof ACLServicesRule
     */
    text?: string;
}
/**
 * 
 * @export
 * @interface CatalogMode
 */
export interface CatalogMode {
    /**
     * 
     * @type {string}
     * @memberof CatalogMode
     */
    mode?: CatalogModeModeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CatalogModeModeEnum {
    HIDE = 'HIDE',
    MIXED = 'MIXED',
    CHALLENGE = 'CHALLENGE'
}

/**
 * 
 * @export
 * @interface MasterPW
 */
export interface MasterPW {
    /**
     * Current keystore password
     * @type {string}
     * @memberof MasterPW
     */
    oldMasterPassword?: string;
}
/**
 * 
 * @export
 * @interface SelfPassword
 */
export interface SelfPassword {
    /**
     * New password
     * @type {string}
     * @memberof SelfPassword
     */
    newPassword?: string;
}
/**
 * 
 * @export
 * @interface UpdateMasterPW
 */
export interface UpdateMasterPW {
    /**
     * Current keystore password
     * @type {string}
     * @memberof UpdateMasterPW
     */
    oldMasterPassword?: string;
    /**
     * New keystore password
     * @type {string}
     * @memberof UpdateMasterPW
     */
    newMasterPassword?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes specific layer-based rule(s). The {rule} must specified in the last part of the URL and of the form \\<workspace\\>.\\<layer\\>.[r|w|a] 
         * @summary Delete layer rule.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLLayer: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling deleteACLLayer.');
            }
            const localVarPath = `/rest/security/acl/layers/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes one or more layer-based rules in the list of security rules. 
         * @summary Delete layer rule(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLLayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/acl/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes specific REST access rule(s). The {rule} must specified as the last part of the URL and must be of the form \\<URL Ant pattern\\>:\\<comma separated list of HTTP methods\\> 
         * @summary Delete REST access rule
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLRESTRule: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling deleteACLRESTRule.');
            }
            const localVarPath = `/rest/security/acl/rest/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes one or more service-based rules.
         * @summary Delete REST access rule(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLRESTRules: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/acl/rest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes specific service-based rule(s). The {rule} must be specified as the last part of the URL and must be of the form \\<service\\>.\\<operation\\> 
         * @summary Delete service rule.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLService: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling deleteACLService.');
            }
            const localVarPath = `/rest/security/acl/services/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes one or more service-based rules in the list of security rules.
         * @summary Delete service rule(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLServices: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/acl/services`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to change catalog mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalogMode: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/acl/catalog`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to change keystore password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMasterPW: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/masterpw`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to change password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSelfPassword: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/self/password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLLayer: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling getACLLayer.');
            }
            const localVarPath = `/rest/security/acl/layers/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays the current layer-based security rules.
         * @summary Get layer rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLLayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/acl/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLRESTRule: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling getACLRESTRule.');
            }
            const localVarPath = `/rest/security/acl/rest/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays the current REST access rules.
         * @summary Get REST rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLRESTRules: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/acl/rest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLService: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling getACLService.');
            }
            const localVarPath = `/rest/security/acl/services/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays the current service-based security rules.
         * @summary Get service rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLServices: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/acl/services`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the catalog mode, which specifies how GeoServer will advertise secured layers and behave when a secured layer is accessed without the necessary privileges.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogMode: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/acl/catalog`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays the keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML). 
         * @summary Get keystore password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasterPW: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/masterpw`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to change password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfPassword: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/self/password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLLayer: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling postACLLayer.');
            }
            const localVarPath = `/rest/security/acl/layers/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds one or more new layer-based rules to the list of security rules. 
         * @summary Add layer rule(s)
         * @param {ACLLayers} aCLLayersBody The new rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLLayers: async (aCLLayersBody: ACLLayers, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'aCLLayersBody' is not null or undefined
            if (aCLLayersBody === null || aCLLayersBody === undefined) {
                throw new RequiredError('aCLLayersBody','Required parameter aCLLayersBody was null or undefined when calling postACLLayers.');
            }
            const localVarPath = `/rest/security/acl/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof aCLLayersBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(aCLLayersBody !== undefined ? aCLLayersBody : {}) : (aCLLayersBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLRESTRule: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling postACLRESTRule.');
            }
            const localVarPath = `/rest/security/acl/rest/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds one or more new REST access rules.
         * @summary Add REST access rule(s)
         * @param {ACLREST} aCLRESTBody The new rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLRESTRules: async (aCLRESTBody: ACLREST, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'aCLRESTBody' is not null or undefined
            if (aCLRESTBody === null || aCLRESTBody === undefined) {
                throw new RequiredError('aCLRESTBody','Required parameter aCLRESTBody was null or undefined when calling postACLRESTRules.');
            }
            const localVarPath = `/rest/security/acl/rest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof aCLRESTBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(aCLRESTBody !== undefined ? aCLRESTBody : {}) : (aCLRESTBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLService: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling postACLService.');
            }
            const localVarPath = `/rest/security/acl/services/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds one or more new service-based rules to the list of security rules.
         * @summary Add service rule(s)
         * @param {ACLServices} aCLServicesBody The new rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLServices: async (aCLServicesBody: ACLServices, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'aCLServicesBody' is not null or undefined
            if (aCLServicesBody === null || aCLServicesBody === undefined) {
                throw new RequiredError('aCLServicesBody','Required parameter aCLServicesBody was null or undefined when calling postACLServices.');
            }
            const localVarPath = `/rest/security/acl/services`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof aCLServicesBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(aCLServicesBody !== undefined ? aCLServicesBody : {}) : (aCLServicesBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to change catalog mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCatalogMode: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/acl/catalog`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to change keystore password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMasterPW: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/masterpw`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to change password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSelfPassword: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rest/security/self/password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLLayer: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling putACLLayer.');
            }
            const localVarPath = `/rest/security/acl/layers/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits one or more layer-based rules in the list of security rules.
         * @summary Edit layer rule(s)
         * @param {ACLLayers} aCLLayersBody The altered rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLLayers: async (aCLLayersBody: ACLLayers, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'aCLLayersBody' is not null or undefined
            if (aCLLayersBody === null || aCLLayersBody === undefined) {
                throw new RequiredError('aCLLayersBody','Required parameter aCLLayersBody was null or undefined when calling putACLLayers.');
            }
            const localVarPath = `/rest/security/acl/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof aCLLayersBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(aCLLayersBody !== undefined ? aCLLayersBody : {}) : (aCLLayersBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLRESTRule: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling putACLRESTRule.');
            }
            const localVarPath = `/rest/security/acl/rest/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits one or more REST access rules.
         * @summary Edit REST access rule(s)
         * @param {ACLREST} aCLRESTBody The altered rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLRESTRules: async (aCLRESTBody: ACLREST, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'aCLRESTBody' is not null or undefined
            if (aCLRESTBody === null || aCLRESTBody === undefined) {
                throw new RequiredError('aCLRESTBody','Required parameter aCLRESTBody was null or undefined when calling putACLRESTRules.');
            }
            const localVarPath = `/rest/security/acl/rest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof aCLRESTBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(aCLRESTBody !== undefined ? aCLRESTBody : {}) : (aCLRESTBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLService: async (rule: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'rule' is not null or undefined
            if (rule === null || rule === undefined) {
                throw new RequiredError('rule','Required parameter rule was null or undefined when calling putACLService.');
            }
            const localVarPath = `/rest/security/acl/services/{rule}`
                .replace(`{${"rule"}}`, encodeURIComponent(String(rule)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits one or more service-based rules in the list of security rules.
         * @summary Edit service rule(s)
         * @param {ACLServices} aCLServicesBody The altered rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLServices: async (aCLServicesBody: ACLServices, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'aCLServicesBody' is not null or undefined
            if (aCLServicesBody === null || aCLServicesBody === undefined) {
                throw new RequiredError('aCLServicesBody','Required parameter aCLServicesBody was null or undefined when calling putACLServices.');
            }
            const localVarPath = `/rest/security/acl/services`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof aCLServicesBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(aCLServicesBody !== undefined ? aCLServicesBody : {}) : (aCLServicesBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes catalog mode. The mode must be one of HIDE, MIXED, or CHALLENGE.
         * @summary Update catalog mode
         * @param {CatalogMode} catalogModeBody The catalog mode information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCatalogMode: async (catalogModeBody: CatalogMode, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'catalogModeBody' is not null or undefined
            if (catalogModeBody === null || catalogModeBody === undefined) {
                throw new RequiredError('catalogModeBody','Required parameter catalogModeBody was null or undefined when calling putCatalogMode.');
            }
            const localVarPath = `/rest/security/acl/catalog`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof catalogModeBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(catalogModeBody !== undefined ? catalogModeBody : {}) : (catalogModeBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Changes keystore password. Must supply current keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text.
         * @summary Update keystore password
         * @param {UpdateMasterPW} masterPWBody The old and new keystore password information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMasterPW: async (masterPWBody: UpdateMasterPW, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'masterPWBody' is not null or undefined
            if (masterPWBody === null || masterPWBody === undefined) {
                throw new RequiredError('masterPWBody','Required parameter masterPWBody was null or undefined when calling putMasterPW.');
            }
            const localVarPath = `/rest/security/masterpw`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof masterPWBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(masterPWBody !== undefined ? masterPWBody : {}) : (masterPWBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the password for the account used to issue the request.
         * @summary Update password
         * @param {SelfPassword} selfPasswordBody The catalog mode information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSelfPassword: async (selfPasswordBody: SelfPassword, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'selfPasswordBody' is not null or undefined
            if (selfPasswordBody === null || selfPasswordBody === undefined) {
                throw new RequiredError('selfPasswordBody','Required parameter selfPasswordBody was null or undefined when calling putSelfPassword.');
            }
            const localVarPath = `/rest/security/self/password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof selfPasswordBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(selfPasswordBody !== undefined ? selfPasswordBody : {}) : (selfPasswordBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes specific layer-based rule(s). The {rule} must specified in the last part of the URL and of the form \\<workspace\\>.\\<layer\\>.[r|w|a] 
         * @summary Delete layer rule.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteACLLayer(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteACLLayer(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes one or more layer-based rules in the list of security rules. 
         * @summary Delete layer rule(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteACLLayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteACLLayers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes specific REST access rule(s). The {rule} must specified as the last part of the URL and must be of the form \\<URL Ant pattern\\>:\\<comma separated list of HTTP methods\\> 
         * @summary Delete REST access rule
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteACLRESTRule(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteACLRESTRule(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes one or more service-based rules.
         * @summary Delete REST access rule(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteACLRESTRules(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteACLRESTRules(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes specific service-based rule(s). The {rule} must be specified as the last part of the URL and must be of the form \\<service\\>.\\<operation\\> 
         * @summary Delete service rule.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteACLService(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteACLService(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes one or more service-based rules in the list of security rules.
         * @summary Delete service rule(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteACLServices(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteACLServices(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to change catalog mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCatalogMode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteCatalogMode(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to change keystore password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMasterPW(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteMasterPW(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to change password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSelfPassword(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteSelfPassword(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACLLayer(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getACLLayer(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays the current layer-based security rules.
         * @summary Get layer rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACLLayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ACLLayers>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getACLLayers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACLRESTRule(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getACLRESTRule(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays the current REST access rules.
         * @summary Get REST rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACLRESTRules(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ACLREST>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getACLRESTRules(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACLService(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getACLService(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays the current service-based security rules.
         * @summary Get service rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACLServices(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ACLServices>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getACLServices(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the catalog mode, which specifies how GeoServer will advertise secured layers and behave when a secured layer is accessed without the necessary privileges.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCatalogMode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogMode>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCatalogMode(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays the keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML). 
         * @summary Get keystore password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMasterPW(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MasterPW>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMasterPW(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to change password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSelfPassword(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getSelfPassword(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postACLLayer(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postACLLayer(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds one or more new layer-based rules to the list of security rules. 
         * @summary Add layer rule(s)
         * @param {ACLLayers} aCLLayersBody The new rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postACLLayers(aCLLayersBody: ACLLayers, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postACLLayers(aCLLayersBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postACLRESTRule(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postACLRESTRule(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds one or more new REST access rules.
         * @summary Add REST access rule(s)
         * @param {ACLREST} aCLRESTBody The new rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postACLRESTRules(aCLRESTBody: ACLREST, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postACLRESTRules(aCLRESTBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postACLService(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postACLService(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds one or more new service-based rules to the list of security rules.
         * @summary Add service rule(s)
         * @param {ACLServices} aCLServicesBody The new rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postACLServices(aCLServicesBody: ACLServices, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postACLServices(aCLServicesBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to change catalog mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCatalogMode(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postCatalogMode(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to change keystore password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMasterPW(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMasterPW(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to change password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSelfPassword(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postSelfPassword(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putACLLayer(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putACLLayer(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits one or more layer-based rules in the list of security rules.
         * @summary Edit layer rule(s)
         * @param {ACLLayers} aCLLayersBody The altered rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putACLLayers(aCLLayersBody: ACLLayers, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putACLLayers(aCLLayersBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putACLRESTRule(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putACLRESTRule(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits one or more REST access rules.
         * @summary Edit REST access rule(s)
         * @param {ACLREST} aCLRESTBody The altered rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putACLRESTRules(aCLRESTBody: ACLREST, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putACLRESTRules(aCLRESTBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putACLService(rule: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putACLService(rule, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits one or more service-based rules in the list of security rules.
         * @summary Edit service rule(s)
         * @param {ACLServices} aCLServicesBody The altered rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putACLServices(aCLServicesBody: ACLServices, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putACLServices(aCLServicesBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Changes catalog mode. The mode must be one of HIDE, MIXED, or CHALLENGE.
         * @summary Update catalog mode
         * @param {CatalogMode} catalogModeBody The catalog mode information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCatalogMode(catalogModeBody: CatalogMode, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putCatalogMode(catalogModeBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Changes keystore password. Must supply current keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text.
         * @summary Update keystore password
         * @param {UpdateMasterPW} masterPWBody The old and new keystore password information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMasterPW(masterPWBody: UpdateMasterPW, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putMasterPW(masterPWBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the password for the account used to issue the request.
         * @summary Update password
         * @param {SelfPassword} selfPasswordBody The catalog mode information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSelfPassword(selfPasswordBody: SelfPassword, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putSelfPassword(selfPasswordBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes specific layer-based rule(s). The {rule} must specified in the last part of the URL and of the form \\<workspace\\>.\\<layer\\>.[r|w|a] 
         * @summary Delete layer rule.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLLayer(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteACLLayer(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes one or more layer-based rules in the list of security rules. 
         * @summary Delete layer rule(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLLayers(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteACLLayers(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes specific REST access rule(s). The {rule} must specified as the last part of the URL and must be of the form \\<URL Ant pattern\\>:\\<comma separated list of HTTP methods\\> 
         * @summary Delete REST access rule
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLRESTRule(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteACLRESTRule(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes one or more service-based rules.
         * @summary Delete REST access rule(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLRESTRules(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteACLRESTRules(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes specific service-based rule(s). The {rule} must be specified as the last part of the URL and must be of the form \\<service\\>.\\<operation\\> 
         * @summary Delete service rule.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLService(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteACLService(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes one or more service-based rules in the list of security rules.
         * @summary Delete service rule(s)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteACLServices(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteACLServices(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to change catalog mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCatalogMode(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteCatalogMode(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to change keystore password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMasterPW(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteMasterPW(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to change password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSelfPassword(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteSelfPassword(options).then((request) => request(axios, basePath));
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLLayer(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getACLLayer(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays the current layer-based security rules.
         * @summary Get layer rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLLayers(options?: any): AxiosPromise<ACLLayers> {
            return DefaultApiFp(configuration).getACLLayers(options).then((request) => request(axios, basePath));
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLRESTRule(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getACLRESTRule(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays the current REST access rules.
         * @summary Get REST rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLRESTRules(options?: any): AxiosPromise<ACLREST> {
            return DefaultApiFp(configuration).getACLRESTRules(options).then((request) => request(axios, basePath));
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLService(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getACLService(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays the current service-based security rules.
         * @summary Get service rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACLServices(options?: any): AxiosPromise<ACLServices> {
            return DefaultApiFp(configuration).getACLServices(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the catalog mode, which specifies how GeoServer will advertise secured layers and behave when a secured layer is accessed without the necessary privileges.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogMode(options?: any): AxiosPromise<CatalogMode> {
            return DefaultApiFp(configuration).getCatalogMode(options).then((request) => request(axios, basePath));
        },
        /**
         * Displays the keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML). 
         * @summary Get keystore password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasterPW(options?: any): AxiosPromise<MasterPW> {
            return DefaultApiFp(configuration).getMasterPW(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to change password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfPassword(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getSelfPassword(options).then((request) => request(axios, basePath));
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLLayer(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postACLLayer(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds one or more new layer-based rules to the list of security rules. 
         * @summary Add layer rule(s)
         * @param {ACLLayers} aCLLayersBody The new rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLLayers(aCLLayersBody: ACLLayers, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postACLLayers(aCLLayersBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLRESTRule(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postACLRESTRule(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds one or more new REST access rules.
         * @summary Add REST access rule(s)
         * @param {ACLREST} aCLRESTBody The new rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLRESTRules(aCLRESTBody: ACLREST, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postACLRESTRules(aCLRESTBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLService(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postACLService(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds one or more new service-based rules to the list of security rules.
         * @summary Add service rule(s)
         * @param {ACLServices} aCLServicesBody The new rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postACLServices(aCLServicesBody: ACLServices, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postACLServices(aCLServicesBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to change catalog mode.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCatalogMode(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postCatalogMode(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to change keystore password.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMasterPW(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postMasterPW(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to change password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSelfPassword(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postSelfPassword(options).then((request) => request(axios, basePath));
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLLayer(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putACLLayer(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits one or more layer-based rules in the list of security rules.
         * @summary Edit layer rule(s)
         * @param {ACLLayers} aCLLayersBody The altered rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLLayers(aCLLayersBody: ACLLayers, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putACLLayers(aCLLayersBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLRESTRule(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putACLRESTRule(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits one or more REST access rules.
         * @summary Edit REST access rule(s)
         * @param {ACLREST} aCLRESTBody The altered rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLRESTRules(aCLRESTBody: ACLREST, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putACLRESTRules(aCLRESTBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
         * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLService(rule: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putACLService(rule, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits one or more service-based rules in the list of security rules.
         * @summary Edit service rule(s)
         * @param {ACLServices} aCLServicesBody The altered rules to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putACLServices(aCLServicesBody: ACLServices, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putACLServices(aCLServicesBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes catalog mode. The mode must be one of HIDE, MIXED, or CHALLENGE.
         * @summary Update catalog mode
         * @param {CatalogMode} catalogModeBody The catalog mode information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCatalogMode(catalogModeBody: CatalogMode, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putCatalogMode(catalogModeBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Changes keystore password. Must supply current keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text.
         * @summary Update keystore password
         * @param {UpdateMasterPW} masterPWBody The old and new keystore password information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMasterPW(masterPWBody: UpdateMasterPW, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putMasterPW(masterPWBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the password for the account used to issue the request.
         * @summary Update password
         * @param {SelfPassword} selfPasswordBody The catalog mode information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSelfPassword(selfPasswordBody: SelfPassword, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putSelfPassword(selfPasswordBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Deletes specific layer-based rule(s). The {rule} must specified in the last part of the URL and of the form \\<workspace\\>.\\<layer\\>.[r|w|a] 
     * @summary Delete layer rule.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteACLLayer(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes one or more layer-based rules in the list of security rules. 
     * @summary Delete layer rule(s)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteACLLayers(options?: any): AxiosPromise<void>;

    /**
     * Deletes specific REST access rule(s). The {rule} must specified as the last part of the URL and must be of the form \\<URL Ant pattern\\>:\\<comma separated list of HTTP methods\\> 
     * @summary Delete REST access rule
     * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteACLRESTRule(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes one or more service-based rules.
     * @summary Delete REST access rule(s)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteACLRESTRules(options?: any): AxiosPromise<void>;

    /**
     * Deletes specific service-based rule(s). The {rule} must be specified as the last part of the URL and must be of the form \\<service\\>.\\<operation\\> 
     * @summary Delete service rule.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteACLService(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes one or more service-based rules in the list of security rules.
     * @summary Delete service rule(s)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteACLServices(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to change catalog mode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteCatalogMode(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to change keystore password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteMasterPW(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to change password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteSelfPassword(options?: any): AxiosPromise<void>;

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getACLLayer(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Displays the current layer-based security rules.
     * @summary Get layer rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getACLLayers(options?: any): AxiosPromise<ACLLayers>;

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getACLRESTRule(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Displays the current REST access rules.
     * @summary Get REST rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getACLRESTRules(options?: any): AxiosPromise<ACLREST>;

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getACLService(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Displays the current service-based security rules.
     * @summary Get service rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getACLServices(options?: any): AxiosPromise<ACLServices>;

    /**
     * Gets the catalog mode, which specifies how GeoServer will advertise secured layers and behave when a secured layer is accessed without the necessary privileges.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCatalogMode(options?: any): AxiosPromise<CatalogMode>;

    /**
     * Displays the keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML). 
     * @summary Get keystore password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMasterPW(options?: any): AxiosPromise<MasterPW>;

    /**
     * Invalid. Use PUT to change password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSelfPassword(options?: any): AxiosPromise<void>;

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postACLLayer(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Adds one or more new layer-based rules to the list of security rules. 
     * @summary Add layer rule(s)
     * @param {ACLLayers} aCLLayersBody The new rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postACLLayers(aCLLayersBody: ACLLayers, options?: any): AxiosPromise<void>;

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postACLRESTRule(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Adds one or more new REST access rules.
     * @summary Add REST access rule(s)
     * @param {ACLREST} aCLRESTBody The new rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postACLRESTRules(aCLRESTBody: ACLREST, options?: any): AxiosPromise<void>;

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postACLService(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Adds one or more new service-based rules to the list of security rules.
     * @summary Add service rule(s)
     * @param {ACLServices} aCLServicesBody The new rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postACLServices(aCLServicesBody: ACLServices, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to change catalog mode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postCatalogMode(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to change keystore password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postMasterPW(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to change password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postSelfPassword(options?: any): AxiosPromise<void>;

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putACLLayer(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Edits one or more layer-based rules in the list of security rules.
     * @summary Edit layer rule(s)
     * @param {ACLLayers} aCLLayersBody The altered rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putACLLayers(aCLLayersBody: ACLLayers, options?: any): AxiosPromise<void>;

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putACLRESTRule(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Edits one or more REST access rules.
     * @summary Edit REST access rule(s)
     * @param {ACLREST} aCLRESTBody The altered rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putACLRESTRules(aCLRESTBody: ACLREST, options?: any): AxiosPromise<void>;

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putACLService(rule: string, options?: any): AxiosPromise<void>;

    /**
     * Edits one or more service-based rules in the list of security rules.
     * @summary Edit service rule(s)
     * @param {ACLServices} aCLServicesBody The altered rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putACLServices(aCLServicesBody: ACLServices, options?: any): AxiosPromise<void>;

    /**
     * Changes catalog mode. The mode must be one of HIDE, MIXED, or CHALLENGE.
     * @summary Update catalog mode
     * @param {CatalogMode} catalogModeBody The catalog mode information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putCatalogMode(catalogModeBody: CatalogMode, options?: any): AxiosPromise<void>;

    /**
     * Changes keystore password. Must supply current keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text.
     * @summary Update keystore password
     * @param {UpdateMasterPW} masterPWBody The old and new keystore password information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putMasterPW(masterPWBody: UpdateMasterPW, options?: any): AxiosPromise<void>;

    /**
     * Updates the password for the account used to issue the request.
     * @summary Update password
     * @param {SelfPassword} selfPasswordBody The catalog mode information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putSelfPassword(selfPasswordBody: SelfPassword, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Deletes specific layer-based rule(s). The {rule} must specified in the last part of the URL and of the form \\<workspace\\>.\\<layer\\>.[r|w|a] 
     * @summary Delete layer rule.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteACLLayer(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteACLLayer(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes one or more layer-based rules in the list of security rules. 
     * @summary Delete layer rule(s)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteACLLayers(options?: any) {
        return DefaultApiFp(this.configuration).deleteACLLayers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes specific REST access rule(s). The {rule} must specified as the last part of the URL and must be of the form \\<URL Ant pattern\\>:\\<comma separated list of HTTP methods\\> 
     * @summary Delete REST access rule
     * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteACLRESTRule(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteACLRESTRule(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes one or more service-based rules.
     * @summary Delete REST access rule(s)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteACLRESTRules(options?: any) {
        return DefaultApiFp(this.configuration).deleteACLRESTRules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes specific service-based rule(s). The {rule} must be specified as the last part of the URL and must be of the form \\<service\\>.\\<operation\\> 
     * @summary Delete service rule.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteACLService(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteACLService(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes one or more service-based rules in the list of security rules.
     * @summary Delete service rule(s)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteACLServices(options?: any) {
        return DefaultApiFp(this.configuration).deleteACLServices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to change catalog mode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCatalogMode(options?: any) {
        return DefaultApiFp(this.configuration).deleteCatalogMode(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to change keystore password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMasterPW(options?: any) {
        return DefaultApiFp(this.configuration).deleteMasterPW(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to change password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSelfPassword(options?: any) {
        return DefaultApiFp(this.configuration).deleteSelfPassword(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getACLLayer(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).getACLLayer(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays the current layer-based security rules.
     * @summary Get layer rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getACLLayers(options?: any) {
        return DefaultApiFp(this.configuration).getACLLayers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getACLRESTRule(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).getACLRESTRule(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays the current REST access rules.
     * @summary Get REST rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getACLRESTRules(options?: any) {
        return DefaultApiFp(this.configuration).getACLRESTRules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getACLService(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).getACLService(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays the current service-based security rules.
     * @summary Get service rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getACLServices(options?: any) {
        return DefaultApiFp(this.configuration).getACLServices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the catalog mode, which specifies how GeoServer will advertise secured layers and behave when a secured layer is accessed without the necessary privileges.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCatalogMode(options?: any) {
        return DefaultApiFp(this.configuration).getCatalogMode(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays the keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML). 
     * @summary Get keystore password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMasterPW(options?: any) {
        return DefaultApiFp(this.configuration).getMasterPW(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to change password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSelfPassword(options?: any) {
        return DefaultApiFp(this.configuration).getSelfPassword(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postACLLayer(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).postACLLayer(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds one or more new layer-based rules to the list of security rules. 
     * @summary Add layer rule(s)
     * @param {ACLLayers} aCLLayersBody The new rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postACLLayers(aCLLayersBody: ACLLayers, options?: any) {
        return DefaultApiFp(this.configuration).postACLLayers(aCLLayersBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postACLRESTRule(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).postACLRESTRule(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds one or more new REST access rules.
     * @summary Add REST access rule(s)
     * @param {ACLREST} aCLRESTBody The new rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postACLRESTRules(aCLRESTBody: ACLREST, options?: any) {
        return DefaultApiFp(this.configuration).postACLRESTRules(aCLRESTBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postACLService(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).postACLService(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds one or more new service-based rules to the list of security rules.
     * @summary Add service rule(s)
     * @param {ACLServices} aCLServicesBody The new rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postACLServices(aCLServicesBody: ACLServices, options?: any) {
        return DefaultApiFp(this.configuration).postACLServices(aCLServicesBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to change catalog mode.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCatalogMode(options?: any) {
        return DefaultApiFp(this.configuration).postCatalogMode(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to change keystore password.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMasterPW(options?: any) {
        return DefaultApiFp(this.configuration).postMasterPW(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to change password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postSelfPassword(options?: any) {
        return DefaultApiFp(this.configuration).postSelfPassword(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putACLLayer(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).putACLLayer(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits one or more layer-based rules in the list of security rules.
     * @summary Edit layer rule(s)
     * @param {ACLLayers} aCLLayersBody The altered rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putACLLayers(aCLLayersBody: ACLLayers, options?: any) {
        return DefaultApiFp(this.configuration).putACLLayers(aCLLayersBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The REST rule, specified as \\&lt;URL Ant pattern\\&gt;;\\&lt;comma separated list of HTTP methods\\&gt;. Examples are  - /_**;GET - /_**;POST,DELETE,PUT 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putACLRESTRule(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).putACLRESTRule(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits one or more REST access rules.
     * @summary Edit REST access rule(s)
     * @param {ACLREST} aCLRESTBody The altered rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putACLRESTRules(aCLRESTBody: ACLREST, options?: any) {
        return DefaultApiFp(this.configuration).putACLRESTRules(aCLRESTBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Has no effect. Endpoint that includes a specific rule is only used with DELETE.
     * @param {string} rule The specified rule, as the last part in the URI, e.g. /security/acl/layers/\\*.\\*.r  
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putACLService(rule: string, options?: any) {
        return DefaultApiFp(this.configuration).putACLService(rule, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits one or more service-based rules in the list of security rules.
     * @summary Edit service rule(s)
     * @param {ACLServices} aCLServicesBody The altered rules to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putACLServices(aCLServicesBody: ACLServices, options?: any) {
        return DefaultApiFp(this.configuration).putACLServices(aCLServicesBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Changes catalog mode. The mode must be one of HIDE, MIXED, or CHALLENGE.
     * @summary Update catalog mode
     * @param {CatalogMode} catalogModeBody The catalog mode information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putCatalogMode(catalogModeBody: CatalogMode, options?: any) {
        return DefaultApiFp(this.configuration).putCatalogMode(catalogModeBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Changes keystore password. Must supply current keystore password. HTTPS is strongly suggested, otherwise password will be sent in plain text.
     * @summary Update keystore password
     * @param {UpdateMasterPW} masterPWBody The old and new keystore password information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putMasterPW(masterPWBody: UpdateMasterPW, options?: any) {
        return DefaultApiFp(this.configuration).putMasterPW(masterPWBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the password for the account used to issue the request.
     * @summary Update password
     * @param {SelfPassword} selfPasswordBody The catalog mode information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putSelfPassword(selfPasswordBody: SelfPassword, options?: any) {
        return DefaultApiFp(this.configuration).putSelfPassword(selfPasswordBody, options).then((request) => request(this.axios, this.basePath));
    }

}


