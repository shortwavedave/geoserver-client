// tslint:disable
/**
 * GeoWebCache Seeding and Truncating
 * A layer is a published resource (feature type or coverage).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface SeedRequest
 */
export interface SeedRequest {
    /**
     * name of the layer to seed, reseed, or truncate.
     * @type {string}
     * @memberof SeedRequest
     */
    name?: string;
    /**
     * 
     * @type {SeedRequestBounds}
     * @memberof SeedRequest
     */
    bounds?: SeedRequestBounds;
    /**
     * The projection used for the layer.
     * @type {string}
     * @memberof SeedRequest
     */
    gridSetId?: string;
    /**
     * The zoom level to start seeding.
     * @type {number}
     * @memberof SeedRequest
     */
    zoomStart?: number;
    /**
     * The zoom level to stop seeding.
     * @type {number}
     * @memberof SeedRequest
     */
    zoomStop?: number;
    /**
     * Type can be seed (add tiles), reseed (replace tiles), or truncate (remove tiles).
     * @type {string}
     * @memberof SeedRequest
     */
    type?: SeedRequestTypeEnum;
    /**
     * Number of seeding threads to run in parallel. If type is truncate only one thread will be used regardless of this parameter.
     * @type {number}
     * @memberof SeedRequest
     */
    threadCount?: number;
    /**
     * 
     * @type {SeedRequestParameters}
     * @memberof SeedRequest
     */
    parameters?: SeedRequestParameters;
}

/**
    * @export
    * @enum {string}
    */
export enum SeedRequestTypeEnum {
    Seed = 'seed',
    Reseed = 'reseed',
    Truncate = 'truncate'
}

/**
 * A set of coordinates describing the bounds of the seed layer.
 * @export
 * @interface SeedRequestBounds
 */
export interface SeedRequestBounds {
    /**
     * 
     * @type {object}
     * @memberof SeedRequestBounds
     */
    coords?: object;
}
/**
 * The filter parameters used for the requested layer
 * @export
 * @interface SeedRequestParameters
 */
export interface SeedRequestParameters {
    /**
     * 
     * @type {SeedRequestParametersEntry}
     * @memberof SeedRequestParameters
     */
    entry?: SeedRequestParametersEntry;
}
/**
 * A set of strings used to describe what filters to use
 * @export
 * @interface SeedRequestParametersEntry
 */
export interface SeedRequestParametersEntry {
    /**
     * 
     * @type {string}
     * @memberof SeedRequestParametersEntry
     */
    string?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns HTML of the GeoWebCache Seed ui page or a json array of the status for currently running task of a given layer if using json extension. The json array contains a set of long in the following order:[tiles processed, total number of tiles to process, number of remaining tiles, Task ID, Task status]
         * @summary Query\'s the currently running GWC task for a given layer
         * @param {string} layer The name of the layer to query GWC task.
         * @param {string} format Based on format, the request will return an application/html or application/json response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layerSeedGet: async (layer: string, format: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layer' is not null or undefined
            if (layer === null || layer === undefined) {
                throw new RequiredError('layer','Required parameter layer was null or undefined when calling layerSeedGet.');
            }
            // verify required parameter 'format' is not null or undefined
            if (format === null || format === undefined) {
                throw new RequiredError('format','Required parameter format was null or undefined when calling layerSeedGet.');
            }
            const localVarPath = `/seed/{layer}.{format}`
                .replace(`{${"layer"}}`, encodeURIComponent(String(layer)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Executes an issue to seed, reseed or truncate task request for a layer and returns HTML UI page of running GWC tasks and tasks to execute.
         * @summary Issue a seed, reseed or truncate task request
         * @param {string} layer The name of the layer to query GWC task.
         * @param {SeedRequest} [requestBody] The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layerSeedPost: async (layer: string, requestBody?: SeedRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layer' is not null or undefined
            if (layer === null || layer === undefined) {
                throw new RequiredError('layer','Required parameter layer was null or undefined when calling layerSeedPost.');
            }
            const localVarPath = `/seed/{layer}.{format}`
                .replace(`{${"layer"}}`, encodeURIComponent(String(layer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query\'s and returns a json array of the status for all currently running task. Requires json extension in the request. The array contains a set of long in the following order:[tiles processed, total number of tiles to process, number of remaining tiles, Task ID, Task status]. The returned task status will be one of -1 = ABORTED, 0 = PENDING, 1 = RUNNING, 2 = DONE
         * @summary Query\'s currently running GWC task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seedGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/seed.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns HTML of the GeoWebCache Seed ui page or a json array of the status for currently running task of a given layer if using json extension. The json array contains a set of long in the following order:[tiles processed, total number of tiles to process, number of remaining tiles, Task ID, Task status]
         * @summary Query\'s the currently running GWC task for a given layer
         * @param {string} layer The name of the layer to query GWC task.
         * @param {string} format Based on format, the request will return an application/html or application/json response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layerSeedGet(layer: string, format: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layerSeedGet(layer, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Executes an issue to seed, reseed or truncate task request for a layer and returns HTML UI page of running GWC tasks and tasks to execute.
         * @summary Issue a seed, reseed or truncate task request
         * @param {string} layer The name of the layer to query GWC task.
         * @param {SeedRequest} [requestBody] The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layerSeedPost(layer: string, requestBody?: SeedRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layerSeedPost(layer, requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query\'s and returns a json array of the status for all currently running task. Requires json extension in the request. The array contains a set of long in the following order:[tiles processed, total number of tiles to process, number of remaining tiles, Task ID, Task status]. The returned task status will be one of -1 = ABORTED, 0 = PENDING, 1 = RUNNING, 2 = DONE
         * @summary Query\'s currently running GWC task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seedGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).seedGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns HTML of the GeoWebCache Seed ui page or a json array of the status for currently running task of a given layer if using json extension. The json array contains a set of long in the following order:[tiles processed, total number of tiles to process, number of remaining tiles, Task ID, Task status]
         * @summary Query\'s the currently running GWC task for a given layer
         * @param {string} layer The name of the layer to query GWC task.
         * @param {string} format Based on format, the request will return an application/html or application/json response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layerSeedGet(layer: string, format: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layerSeedGet(layer, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Executes an issue to seed, reseed or truncate task request for a layer and returns HTML UI page of running GWC tasks and tasks to execute.
         * @summary Issue a seed, reseed or truncate task request
         * @param {string} layer The name of the layer to query GWC task.
         * @param {SeedRequest} [requestBody] The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layerSeedPost(layer: string, requestBody?: SeedRequest, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layerSeedPost(layer, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Query\'s and returns a json array of the status for all currently running task. Requires json extension in the request. The array contains a set of long in the following order:[tiles processed, total number of tiles to process, number of remaining tiles, Task ID, Task status]. The returned task status will be one of -1 = ABORTED, 0 = PENDING, 1 = RUNNING, 2 = DONE
         * @summary Query\'s currently running GWC task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seedGet(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).seedGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Returns HTML of the GeoWebCache Seed ui page or a json array of the status for currently running task of a given layer if using json extension. The json array contains a set of long in the following order:[tiles processed, total number of tiles to process, number of remaining tiles, Task ID, Task status]
     * @summary Query\'s the currently running GWC task for a given layer
     * @param {string} layer The name of the layer to query GWC task.
     * @param {string} format Based on format, the request will return an application/html or application/json response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layerSeedGet(layer: string, format: string, options?: any): AxiosPromise<void>;

    /**
     * Executes an issue to seed, reseed or truncate task request for a layer and returns HTML UI page of running GWC tasks and tasks to execute.
     * @summary Issue a seed, reseed or truncate task request
     * @param {string} layer The name of the layer to query GWC task.
     * @param {SeedRequest} [requestBody] The updated layer definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layerSeedPost(layer: string, requestBody?: SeedRequest, options?: any): AxiosPromise<void>;

    /**
     * Query\'s and returns a json array of the status for all currently running task. Requires json extension in the request. The array contains a set of long in the following order:[tiles processed, total number of tiles to process, number of remaining tiles, Task ID, Task status]. The returned task status will be one of -1 = ABORTED, 0 = PENDING, 1 = RUNNING, 2 = DONE
     * @summary Query\'s currently running GWC task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    seedGet(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Returns HTML of the GeoWebCache Seed ui page or a json array of the status for currently running task of a given layer if using json extension. The json array contains a set of long in the following order:[tiles processed, total number of tiles to process, number of remaining tiles, Task ID, Task status]
     * @summary Query\'s the currently running GWC task for a given layer
     * @param {string} layer The name of the layer to query GWC task.
     * @param {string} format Based on format, the request will return an application/html or application/json response.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layerSeedGet(layer: string, format: string, options?: any) {
        return DefaultApiFp(this.configuration).layerSeedGet(layer, format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Executes an issue to seed, reseed or truncate task request for a layer and returns HTML UI page of running GWC tasks and tasks to execute.
     * @summary Issue a seed, reseed or truncate task request
     * @param {string} layer The name of the layer to query GWC task.
     * @param {SeedRequest} [requestBody] The updated layer definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layerSeedPost(layer: string, requestBody?: SeedRequest, options?: any) {
        return DefaultApiFp(this.configuration).layerSeedPost(layer, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query\'s and returns a json array of the status for all currently running task. Requires json extension in the request. The array contains a set of long in the following order:[tiles processed, total number of tiles to process, number of remaining tiles, Task ID, Task status]. The returned task status will be one of -1 = ABORTED, 0 = PENDING, 1 = RUNNING, 2 = DONE
     * @summary Query\'s currently running GWC task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public seedGet(options?: any) {
        return DefaultApiFp(this.configuration).seedGet(options).then((request) => request(this.axios, this.basePath));
    }

}


