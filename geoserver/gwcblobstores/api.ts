// tslint:disable
/**
 * GeoWebCache Blobstores
 * BlobStores configure the persistence of tile data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BlobStore
 */
export interface BlobStore {
    /**
     * Name of the blobstore. Should be unique.
     * @type {string}
     * @memberof BlobStore
     */
    id?: string;
    /**
     * Whether or not the blobstore is enabled.
     * @type {boolean}
     * @memberof BlobStore
     */
    enabled?: boolean;
}
/**
 * 
 * @export
 * @interface BlobStoreReference
 */
export interface BlobStoreReference {
    /**
     * Name of the blobstore
     * @type {string}
     * @memberof BlobStoreReference
     */
    name?: string;
    /**
     * URL to blobstore definition
     * @type {string}
     * @memberof BlobStoreReference
     */
    link?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a configured blobstore from the server.
         * @summary Delete configured blobstore
         * @param {string} blobstoreName The name of the blobstore to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobstoreDelete: async (blobstoreName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'blobstoreName' is not null or undefined
            if (blobstoreName === null || blobstoreName === undefined) {
                throw new RequiredError('blobstoreName','Required parameter blobstoreName was null or undefined when calling blobstoreDelete.');
            }
            const localVarPath = `/blobstores/{blobstoreName}`
                .replace(`{${"blobstoreName"}}`, encodeURIComponent(String(blobstoreName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single configured blobstore definition.
         * @summary Retrieve a configured blobstore
         * @param {string} blobstoreName The name of the blobstore to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobstoreGet: async (blobstoreName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'blobstoreName' is not null or undefined
            if (blobstoreName === null || blobstoreName === undefined) {
                throw new RequiredError('blobstoreName','Required parameter blobstoreName was null or undefined when calling blobstoreGet.');
            }
            const localVarPath = `/blobstores/{blobstoreName}`
                .replace(`{${"blobstoreName"}}`, encodeURIComponent(String(blobstoreName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new configured blobstore on the server, or modifies an existing blobstore.
         * @summary Create or update a configured blobstore.
         * @param {string} blobstoreName The name of the blobstore to add or update.
         * @param {BlobStore} blobstoreBody The new blobstore definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobstorePut: async (blobstoreName: string, blobstoreBody: BlobStore, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'blobstoreName' is not null or undefined
            if (blobstoreName === null || blobstoreName === undefined) {
                throw new RequiredError('blobstoreName','Required parameter blobstoreName was null or undefined when calling blobstorePut.');
            }
            // verify required parameter 'blobstoreBody' is not null or undefined
            if (blobstoreBody === null || blobstoreBody === undefined) {
                throw new RequiredError('blobstoreBody','Required parameter blobstoreBody was null or undefined when calling blobstorePut.');
            }
            const localVarPath = `/blobstores/{blobstoreName}`
                .replace(`{${"blobstoreName"}}`, encodeURIComponent(String(blobstoreName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof blobstoreBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(blobstoreBody !== undefined ? blobstoreBody : {}) : (blobstoreBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all configured blobstores on the server.
         * @summary Get a list of configured blobstores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobstoresGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/blobstores`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a configured blobstore from the server.
         * @summary Delete configured blobstore
         * @param {string} blobstoreName The name of the blobstore to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blobstoreDelete(blobstoreName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).blobstoreDelete(blobstoreName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single configured blobstore definition.
         * @summary Retrieve a configured blobstore
         * @param {string} blobstoreName The name of the blobstore to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blobstoreGet(blobstoreName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlobStore>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).blobstoreGet(blobstoreName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new configured blobstore on the server, or modifies an existing blobstore.
         * @summary Create or update a configured blobstore.
         * @param {string} blobstoreName The name of the blobstore to add or update.
         * @param {BlobStore} blobstoreBody The new blobstore definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blobstorePut(blobstoreName: string, blobstoreBody: BlobStore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).blobstorePut(blobstoreName, blobstoreBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all configured blobstores on the server.
         * @summary Get a list of configured blobstores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blobstoresGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlobStoreReference>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).blobstoresGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a configured blobstore from the server.
         * @summary Delete configured blobstore
         * @param {string} blobstoreName The name of the blobstore to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobstoreDelete(blobstoreName: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).blobstoreDelete(blobstoreName, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single configured blobstore definition.
         * @summary Retrieve a configured blobstore
         * @param {string} blobstoreName The name of the blobstore to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobstoreGet(blobstoreName: string, options?: any): AxiosPromise<BlobStore> {
            return DefaultApiFp(configuration).blobstoreGet(blobstoreName, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new configured blobstore on the server, or modifies an existing blobstore.
         * @summary Create or update a configured blobstore.
         * @param {string} blobstoreName The name of the blobstore to add or update.
         * @param {BlobStore} blobstoreBody The new blobstore definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobstorePut(blobstoreName: string, blobstoreBody: BlobStore, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).blobstorePut(blobstoreName, blobstoreBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all configured blobstores on the server.
         * @summary Get a list of configured blobstores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blobstoresGet(options?: any): AxiosPromise<Array<BlobStoreReference>> {
            return DefaultApiFp(configuration).blobstoresGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Deletes a configured blobstore from the server.
     * @summary Delete configured blobstore
     * @param {string} blobstoreName The name of the blobstore to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    blobstoreDelete(blobstoreName: string, options?: any): AxiosPromise<void>;

    /**
     * Retrieves a single configured blobstore definition.
     * @summary Retrieve a configured blobstore
     * @param {string} blobstoreName The name of the blobstore to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    blobstoreGet(blobstoreName: string, options?: any): AxiosPromise<BlobStore>;

    /**
     * Creates a new configured blobstore on the server, or modifies an existing blobstore.
     * @summary Create or update a configured blobstore.
     * @param {string} blobstoreName The name of the blobstore to add or update.
     * @param {BlobStore} blobstoreBody The new blobstore definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    blobstorePut(blobstoreName: string, blobstoreBody: BlobStore, options?: any): AxiosPromise<void>;

    /**
     * Displays a list of all configured blobstores on the server.
     * @summary Get a list of configured blobstores
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    blobstoresGet(options?: any): AxiosPromise<Array<BlobStoreReference>>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Deletes a configured blobstore from the server.
     * @summary Delete configured blobstore
     * @param {string} blobstoreName The name of the blobstore to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public blobstoreDelete(blobstoreName: string, options?: any) {
        return DefaultApiFp(this.configuration).blobstoreDelete(blobstoreName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single configured blobstore definition.
     * @summary Retrieve a configured blobstore
     * @param {string} blobstoreName The name of the blobstore to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public blobstoreGet(blobstoreName: string, options?: any) {
        return DefaultApiFp(this.configuration).blobstoreGet(blobstoreName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new configured blobstore on the server, or modifies an existing blobstore.
     * @summary Create or update a configured blobstore.
     * @param {string} blobstoreName The name of the blobstore to add or update.
     * @param {BlobStore} blobstoreBody The new blobstore definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public blobstorePut(blobstoreName: string, blobstoreBody: BlobStore, options?: any) {
        return DefaultApiFp(this.configuration).blobstorePut(blobstoreName, blobstoreBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all configured blobstores on the server.
     * @summary Get a list of configured blobstores
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public blobstoresGet(options?: any) {
        return DefaultApiFp(this.configuration).blobstoresGet(options).then((request) => request(this.axios, this.basePath));
    }

}


