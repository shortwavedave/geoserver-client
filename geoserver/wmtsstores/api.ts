// tslint:disable
/**
 * GeoServer WMTS Stores
 * A WMTS store is a store whose source is a remote WMTS. Also known as \"Cascading WMTS\".
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface WMTSStoreInfo
 */
export interface WMTSStoreInfo {
    /**
     * Name of the WMTS store
     * @type {string}
     * @memberof WMTSStoreInfo
     */
    name?: string;
    /**
     * Description of the WMTS store
     * @type {string}
     * @memberof WMTSStoreInfo
     */
    description?: string;
    /**
     * Type of store. Set to WMTS.
     * @type {string}
     * @memberof WMTSStoreInfo
     */
    type?: string;
    /**
     * Whether the store is enabled
     * @type {boolean}
     * @memberof WMTSStoreInfo
     */
    enabled?: boolean;
    /**
     * 
     * @type {WMTSStoreInfoWorkspace}
     * @memberof WMTSStoreInfo
     */
    workspace?: WMTSStoreInfoWorkspace;
    /**
     * 
     * @type {WMTSStoreInfoMetadata}
     * @memberof WMTSStoreInfo
     */
    metadata?: WMTSStoreInfoMetadata;
    /**
     * Whether the store is the default store of the workspace
     * @type {boolean}
     * @memberof WMTSStoreInfo
     */
    __default__?: boolean;
    /**
     * Location of the WMTS capabilities URL where the store originates
     * @type {string}
     * @memberof WMTSStoreInfo
     */
    capabilitiesURL?: string;
    /**
     * User name to use when connecting to the remote WMTS
     * @type {string}
     * @memberof WMTSStoreInfo
     */
    user?: string;
    /**
     * Password or hash to use when connecting to the remote WMTS
     * @type {string}
     * @memberof WMTSStoreInfo
     */
    password?: string;
    /**
     * Maximum number of simultaneous connections to use
     * @type {number}
     * @memberof WMTSStoreInfo
     */
    maxConnections?: number;
    /**
     * Time in seconds before read time out
     * @type {string}
     * @memberof WMTSStoreInfo
     */
    readTimeout?: string;
    /**
     * Time in seconds before connection time out
     * @type {string}
     * @memberof WMTSStoreInfo
     */
    connectTimeout?: string;
    /**
     * 
     * @type {Array<WMTSStoreInfoWmtsLayers>}
     * @memberof WMTSStoreInfo
     */
    wmtsLayers?: Array<WMTSStoreInfoWmtsLayers>;
}
/**
 * Miscellaneous configuration details about the WMTS store
 * @export
 * @interface WMTSStoreInfoMetadata
 */
export interface WMTSStoreInfoMetadata {
    /**
     * 
     * @type {WMTSStoreInfoMetadataEntry}
     * @memberof WMTSStoreInfoMetadata
     */
    entry?: WMTSStoreInfoMetadataEntry;
}
/**
 * 
 * @export
 * @interface WMTSStoreInfoMetadataEntry
 */
export interface WMTSStoreInfoMetadataEntry {
    /**
     * Set to useConnectionPooling
     * @type {string}
     * @memberof WMTSStoreInfoMetadataEntry
     */
    key?: WMTSStoreInfoMetadataEntryKeyEnum;
    /**
     * Whether connection pooling is enabled
     * @type {boolean}
     * @memberof WMTSStoreInfoMetadataEntry
     */
    text?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum WMTSStoreInfoMetadataEntryKeyEnum {
    UseConnectionPooling = 'useConnectionPooling'
}

/**
 * 
 * @export
 * @interface WMTSStoreInfoWmtsLayers
 */
export interface WMTSStoreInfoWmtsLayers {
    /**
     * Link to the WMTS layers representation
     * @type {string}
     * @memberof WMTSStoreInfoWmtsLayers
     */
    link?: string;
}
/**
 * Workspace containing the store
 * @export
 * @interface WMTSStoreInfoWorkspace
 */
export interface WMTSStoreInfoWorkspace {
    /**
     * Name of the workspace
     * @type {string}
     * @memberof WMTSStoreInfoWorkspace
     */
    name: string;
    /**
     * Link to the workspace representation
     * @type {string}
     * @memberof WMTSStoreInfoWorkspace
     */
    link?: string;
}
/**
 * 
 * @export
 * @interface WMTSStoresListItem
 */
export interface WMTSStoresListItem {
    /**
     * Name of WMTS Store
     * @type {string}
     * @memberof WMTSStoresListItem
     */
    name?: string;
    /**
     * URL to WMTS store representation
     * @type {string}
     * @memberof WMTSStoresListItem
     */
    link?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a WMTS store
         * @summary Delete WMTS store
         * @param {string} workspace Name of the workspace containing the WMTS store.
         * @param {string} store Name of the WMTS store
         * @param {boolean} [recurse] When set to true all resources contained in the store are also removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStore: async (workspace: string, store: string, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWMTSStore.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling deleteWMTSStore.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{store}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use /workspaces/{workspace}/wmtsstores/{wmtsstore} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStores: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmtsstores`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a representation of the WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{store}.xml\" for XML). Defaults to HTML representation.
         * @summary Retrieve a WMTS store in a given workspace
         * @param {string} workspace The name of the workspace containing the WMTS store.
         * @param {string} store The name of the store to be retrieved
         * @param {boolean} [quietOnNotFound] When set to true, avoids to log an Exception when the WMTS store is not present. Note that 404 status code will be returned anyway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStore: async (workspace: string, store: string, quietOnNotFound?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWMTSStore.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling getWMTSStore.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{store}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quietOnNotFound !== undefined) {
                localVarQueryParameter['quietOnNotFound'] = quietOnNotFound;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all WMTS stores on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/rest/workspaces/{workspace}/wmtsstores.xml\" for XML).
         * @summary Get a list of WMTS stores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStores: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmtsstores`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST on /workspaces/{workspace}/WMTSstores for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{store} to edit/upload an existing WMTS store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStore: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{store}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new WMTS store entry to the server.
         * @summary Add a new WMTS store
         * @param {string} workspace Name of the worskpace containing the WMTS store.
         * @param {WMTSStoreInfo} wMTSStoreBody WMTS store body information to upload.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;wmtsStore&gt;     &lt;name&gt;remote&lt;/name&gt;     &lt;capabilitiesUrl&gt;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities&lt;/capabilitiesUrl&gt;   &lt;/wmtsStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;wmtsStore\&quot;: {       \&quot;name\&quot;: \&quot;remote\&quot;,       \&quot;capabilitiesUrl\&quot;: \&quot;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStores: async (workspace: string, wMTSStoreBody: WMTSStoreInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWMTSStores.');
            }
            // verify required parameter 'wMTSStoreBody' is not null or undefined
            if (wMTSStoreBody === null || wMTSStoreBody === undefined) {
                throw new RequiredError('wMTSStoreBody','Required parameter wMTSStoreBody was null or undefined when calling postWMTSStores.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtsstores`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMTSStoreBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMTSStoreBody !== undefined ? wMTSStoreBody : {}) : (wMTSStoreBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies a single WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).
         * @summary Modify a single WMTS store.
         * @param {string} workspace The name of the workspace containing the WMTS stores.
         * @param {string} store The name of the store to be retrieved
         * @param {WMTSStoreInfo} wMTSStoreBody WMTS store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;wmtsStore&gt;     &lt;description&gt;A wmts store&lt;/description&gt;     &lt;enabled&gt;true&lt;/enabled&gt;     &lt;__default&gt;true&lt;/__default&gt;     &lt;capabilitiesUrl&gt;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities&lt;/capabilitiesUrl&gt;     &lt;user&gt;admin&lt;/user&gt;     &lt;password&gt;geoserver&lt;/password&gt;     &lt;maxConnections&gt;6&lt;/maxConnections&gt;     &lt;readTimeout&gt;60&lt;/readTimeout&gt;     &lt;connectTimeout&gt;30&lt;/connectTimeout&gt;   &lt;/wmtsStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;wmtsStore\&quot;: {       \&quot;description\&quot;: \&quot;A wmts store\&quot;,       \&quot;enabled\&quot;: \&quot;true\&quot;,       \&quot;_default\&quot;: \&quot;true\&quot;,       \&quot;capabilitiesUrl\&quot;: \&quot;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities\&quot;,       \&quot;user\&quot;: \&quot;admin\&quot;,       \&quot;password\&quot;: \&quot;geoserver\&quot;,       \&quot;maxConnections\&quot;: \&quot;6\&quot;,       \&quot;readTimeout\&quot;: \&quot;60\&quot;,       \&quot;connectTimeout\&quot;: \&quot;30\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStore: async (workspace: string, store: string, wMTSStoreBody: WMTSStoreInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWMTSStore.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling putWMTSStore.');
            }
            // verify required parameter 'wMTSStoreBody' is not null or undefined
            if (wMTSStoreBody === null || wMTSStoreBody === undefined) {
                throw new RequiredError('wMTSStoreBody','Required parameter wMTSStoreBody was null or undefined when calling putWMTSStore.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{store}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMTSStoreBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMTSStoreBody !== undefined ? wMTSStoreBody : {}) : (wMTSStoreBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{wmtsstore} to edit an existing WMTS store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStores: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmtsstores`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a WMTS store
         * @summary Delete WMTS store
         * @param {string} workspace Name of the workspace containing the WMTS store.
         * @param {string} store Name of the WMTS store
         * @param {boolean} [recurse] When set to true all resources contained in the store are also removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMTSStore(workspace: string, store: string, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMTSStore(workspace, store, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use /workspaces/{workspace}/wmtsstores/{wmtsstore} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMTSStores(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMTSStores(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a representation of the WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{store}.xml\" for XML). Defaults to HTML representation.
         * @summary Retrieve a WMTS store in a given workspace
         * @param {string} workspace The name of the workspace containing the WMTS store.
         * @param {string} store The name of the store to be retrieved
         * @param {boolean} [quietOnNotFound] When set to true, avoids to log an Exception when the WMTS store is not present. Note that 404 status code will be returned anyway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMTSStore(workspace: string, store: string, quietOnNotFound?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WMTSStoreInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMTSStore(workspace, store, quietOnNotFound, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all WMTS stores on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/rest/workspaces/{workspace}/wmtsstores.xml\" for XML).
         * @summary Get a list of WMTS stores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMTSStores(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WMTSStoresListItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMTSStores(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST on /workspaces/{workspace}/WMTSstores for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{store} to edit/upload an existing WMTS store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMTSStore(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMTSStore(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new WMTS store entry to the server.
         * @summary Add a new WMTS store
         * @param {string} workspace Name of the worskpace containing the WMTS store.
         * @param {WMTSStoreInfo} wMTSStoreBody WMTS store body information to upload.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;wmtsStore&gt;     &lt;name&gt;remote&lt;/name&gt;     &lt;capabilitiesUrl&gt;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities&lt;/capabilitiesUrl&gt;   &lt;/wmtsStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;wmtsStore\&quot;: {       \&quot;name\&quot;: \&quot;remote\&quot;,       \&quot;capabilitiesUrl\&quot;: \&quot;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMTSStores(workspace: string, wMTSStoreBody: WMTSStoreInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMTSStores(workspace, wMTSStoreBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies a single WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).
         * @summary Modify a single WMTS store.
         * @param {string} workspace The name of the workspace containing the WMTS stores.
         * @param {string} store The name of the store to be retrieved
         * @param {WMTSStoreInfo} wMTSStoreBody WMTS store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;wmtsStore&gt;     &lt;description&gt;A wmts store&lt;/description&gt;     &lt;enabled&gt;true&lt;/enabled&gt;     &lt;__default&gt;true&lt;/__default&gt;     &lt;capabilitiesUrl&gt;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities&lt;/capabilitiesUrl&gt;     &lt;user&gt;admin&lt;/user&gt;     &lt;password&gt;geoserver&lt;/password&gt;     &lt;maxConnections&gt;6&lt;/maxConnections&gt;     &lt;readTimeout&gt;60&lt;/readTimeout&gt;     &lt;connectTimeout&gt;30&lt;/connectTimeout&gt;   &lt;/wmtsStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;wmtsStore\&quot;: {       \&quot;description\&quot;: \&quot;A wmts store\&quot;,       \&quot;enabled\&quot;: \&quot;true\&quot;,       \&quot;_default\&quot;: \&quot;true\&quot;,       \&quot;capabilitiesUrl\&quot;: \&quot;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities\&quot;,       \&quot;user\&quot;: \&quot;admin\&quot;,       \&quot;password\&quot;: \&quot;geoserver\&quot;,       \&quot;maxConnections\&quot;: \&quot;6\&quot;,       \&quot;readTimeout\&quot;: \&quot;60\&quot;,       \&quot;connectTimeout\&quot;: \&quot;30\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMTSStore(workspace: string, store: string, wMTSStoreBody: WMTSStoreInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMTSStore(workspace, store, wMTSStoreBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{wmtsstore} to edit an existing WMTS store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMTSStores(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMTSStores(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a WMTS store
         * @summary Delete WMTS store
         * @param {string} workspace Name of the workspace containing the WMTS store.
         * @param {string} store Name of the WMTS store
         * @param {boolean} [recurse] When set to true all resources contained in the store are also removed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStore(workspace: string, store: string, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMTSStore(workspace, store, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use /workspaces/{workspace}/wmtsstores/{wmtsstore} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStores(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMTSStores(options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a representation of the WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{store}.xml\" for XML). Defaults to HTML representation.
         * @summary Retrieve a WMTS store in a given workspace
         * @param {string} workspace The name of the workspace containing the WMTS store.
         * @param {string} store The name of the store to be retrieved
         * @param {boolean} [quietOnNotFound] When set to true, avoids to log an Exception when the WMTS store is not present. Note that 404 status code will be returned anyway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStore(workspace: string, store: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WMTSStoreInfo> {
            return DefaultApiFp(configuration).getWMTSStore(workspace, store, quietOnNotFound, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all WMTS stores on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/rest/workspaces/{workspace}/wmtsstores.xml\" for XML).
         * @summary Get a list of WMTS stores
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStores(options?: any): AxiosPromise<Array<WMTSStoresListItem>> {
            return DefaultApiFp(configuration).getWMTSStores(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST on /workspaces/{workspace}/WMTSstores for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{store} to edit/upload an existing WMTS store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStore(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMTSStore(options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new WMTS store entry to the server.
         * @summary Add a new WMTS store
         * @param {string} workspace Name of the worskpace containing the WMTS store.
         * @param {WMTSStoreInfo} wMTSStoreBody WMTS store body information to upload.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;wmtsStore&gt;     &lt;name&gt;remote&lt;/name&gt;     &lt;capabilitiesUrl&gt;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities&lt;/capabilitiesUrl&gt;   &lt;/wmtsStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;wmtsStore\&quot;: {       \&quot;name\&quot;: \&quot;remote\&quot;,       \&quot;capabilitiesUrl\&quot;: \&quot;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStores(workspace: string, wMTSStoreBody: WMTSStoreInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMTSStores(workspace, wMTSStoreBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies a single WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).
         * @summary Modify a single WMTS store.
         * @param {string} workspace The name of the workspace containing the WMTS stores.
         * @param {string} store The name of the store to be retrieved
         * @param {WMTSStoreInfo} wMTSStoreBody WMTS store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;wmtsStore&gt;     &lt;description&gt;A wmts store&lt;/description&gt;     &lt;enabled&gt;true&lt;/enabled&gt;     &lt;__default&gt;true&lt;/__default&gt;     &lt;capabilitiesUrl&gt;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities&lt;/capabilitiesUrl&gt;     &lt;user&gt;admin&lt;/user&gt;     &lt;password&gt;geoserver&lt;/password&gt;     &lt;maxConnections&gt;6&lt;/maxConnections&gt;     &lt;readTimeout&gt;60&lt;/readTimeout&gt;     &lt;connectTimeout&gt;30&lt;/connectTimeout&gt;   &lt;/wmtsStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;wmtsStore\&quot;: {       \&quot;description\&quot;: \&quot;A wmts store\&quot;,       \&quot;enabled\&quot;: \&quot;true\&quot;,       \&quot;_default\&quot;: \&quot;true\&quot;,       \&quot;capabilitiesUrl\&quot;: \&quot;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities\&quot;,       \&quot;user\&quot;: \&quot;admin\&quot;,       \&quot;password\&quot;: \&quot;geoserver\&quot;,       \&quot;maxConnections\&quot;: \&quot;6\&quot;,       \&quot;readTimeout\&quot;: \&quot;60\&quot;,       \&quot;connectTimeout\&quot;: \&quot;30\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStore(workspace: string, store: string, wMTSStoreBody: WMTSStoreInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMTSStore(workspace, store, wMTSStoreBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{wmtsstore} to edit an existing WMTS store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStores(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMTSStores(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Deletes a WMTS store
     * @summary Delete WMTS store
     * @param {string} workspace Name of the workspace containing the WMTS store.
     * @param {string} store Name of the WMTS store
     * @param {boolean} [recurse] When set to true all resources contained in the store are also removed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMTSStore(workspace: string, store: string, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use /workspaces/{workspace}/wmtsstores/{wmtsstore} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMTSStores(options?: any): AxiosPromise<void>;

    /**
     * Displays a representation of the WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{store}.xml\" for XML). Defaults to HTML representation.
     * @summary Retrieve a WMTS store in a given workspace
     * @param {string} workspace The name of the workspace containing the WMTS store.
     * @param {string} store The name of the store to be retrieved
     * @param {boolean} [quietOnNotFound] When set to true, avoids to log an Exception when the WMTS store is not present. Note that 404 status code will be returned anyway.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMTSStore(workspace: string, store: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WMTSStoreInfo>;

    /**
     * Displays a list of all WMTS stores on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/rest/workspaces/{workspace}/wmtsstores.xml\" for XML).
     * @summary Get a list of WMTS stores
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMTSStores(options?: any): AxiosPromise<Array<WMTSStoresListItem>>;

    /**
     * Invalid. Use POST on /workspaces/{workspace}/WMTSstores for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{store} to edit/upload an existing WMTS store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMTSStore(options?: any): AxiosPromise<void>;

    /**
     * Adds a new WMTS store entry to the server.
     * @summary Add a new WMTS store
     * @param {string} workspace Name of the worskpace containing the WMTS store.
     * @param {WMTSStoreInfo} wMTSStoreBody WMTS store body information to upload.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;wmtsStore&gt;     &lt;name&gt;remote&lt;/name&gt;     &lt;capabilitiesUrl&gt;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities&lt;/capabilitiesUrl&gt;   &lt;/wmtsStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;wmtsStore\&quot;: {       \&quot;name\&quot;: \&quot;remote\&quot;,       \&quot;capabilitiesUrl\&quot;: \&quot;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities\&quot;     }   }   &#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMTSStores(workspace: string, wMTSStoreBody: WMTSStoreInfo, options?: any): AxiosPromise<void>;

    /**
     * Modifies a single WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).
     * @summary Modify a single WMTS store.
     * @param {string} workspace The name of the workspace containing the WMTS stores.
     * @param {string} store The name of the store to be retrieved
     * @param {WMTSStoreInfo} wMTSStoreBody WMTS store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;wmtsStore&gt;     &lt;description&gt;A wmts store&lt;/description&gt;     &lt;enabled&gt;true&lt;/enabled&gt;     &lt;__default&gt;true&lt;/__default&gt;     &lt;capabilitiesUrl&gt;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities&lt;/capabilitiesUrl&gt;     &lt;user&gt;admin&lt;/user&gt;     &lt;password&gt;geoserver&lt;/password&gt;     &lt;maxConnections&gt;6&lt;/maxConnections&gt;     &lt;readTimeout&gt;60&lt;/readTimeout&gt;     &lt;connectTimeout&gt;30&lt;/connectTimeout&gt;   &lt;/wmtsStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;wmtsStore\&quot;: {       \&quot;description\&quot;: \&quot;A wmts store\&quot;,       \&quot;enabled\&quot;: \&quot;true\&quot;,       \&quot;_default\&quot;: \&quot;true\&quot;,       \&quot;capabilitiesUrl\&quot;: \&quot;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities\&quot;,       \&quot;user\&quot;: \&quot;admin\&quot;,       \&quot;password\&quot;: \&quot;geoserver\&quot;,       \&quot;maxConnections\&quot;: \&quot;6\&quot;,       \&quot;readTimeout\&quot;: \&quot;60\&quot;,       \&quot;connectTimeout\&quot;: \&quot;30\&quot;     }   }   &#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMTSStore(workspace: string, store: string, wMTSStoreBody: WMTSStoreInfo, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{wmtsstore} to edit an existing WMTS store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMTSStores(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Deletes a WMTS store
     * @summary Delete WMTS store
     * @param {string} workspace Name of the workspace containing the WMTS store.
     * @param {string} store Name of the WMTS store
     * @param {boolean} [recurse] When set to true all resources contained in the store are also removed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMTSStore(workspace: string, store: string, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteWMTSStore(workspace, store, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use /workspaces/{workspace}/wmtsstores/{wmtsstore} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMTSStores(options?: any) {
        return DefaultApiFp(this.configuration).deleteWMTSStores(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a representation of the WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{store}.xml\" for XML). Defaults to HTML representation.
     * @summary Retrieve a WMTS store in a given workspace
     * @param {string} workspace The name of the workspace containing the WMTS store.
     * @param {string} store The name of the store to be retrieved
     * @param {boolean} [quietOnNotFound] When set to true, avoids to log an Exception when the WMTS store is not present. Note that 404 status code will be returned anyway.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMTSStore(workspace: string, store: string, quietOnNotFound?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getWMTSStore(workspace, store, quietOnNotFound, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all WMTS stores on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/rest/workspaces/{workspace}/wmtsstores.xml\" for XML).
     * @summary Get a list of WMTS stores
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMTSStores(options?: any) {
        return DefaultApiFp(this.configuration).getWMTSStores(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST on /workspaces/{workspace}/WMTSstores for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{store} to edit/upload an existing WMTS store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMTSStore(options?: any) {
        return DefaultApiFp(this.configuration).postWMTSStore(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new WMTS store entry to the server.
     * @summary Add a new WMTS store
     * @param {string} workspace Name of the worskpace containing the WMTS store.
     * @param {WMTSStoreInfo} wMTSStoreBody WMTS store body information to upload.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;wmtsStore&gt;     &lt;name&gt;remote&lt;/name&gt;     &lt;capabilitiesUrl&gt;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities&lt;/capabilitiesUrl&gt;   &lt;/wmtsStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;wmtsStore\&quot;: {       \&quot;name\&quot;: \&quot;remote\&quot;,       \&quot;capabilitiesUrl\&quot;: \&quot;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities\&quot;     }   }   &#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMTSStores(workspace: string, wMTSStoreBody: WMTSStoreInfo, options?: any) {
        return DefaultApiFp(this.configuration).postWMTSStores(workspace, wMTSStoreBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies a single WMTS store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).
     * @summary Modify a single WMTS store.
     * @param {string} workspace The name of the workspace containing the WMTS stores.
     * @param {string} store The name of the store to be retrieved
     * @param {WMTSStoreInfo} wMTSStoreBody WMTS store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;wmtsStore&gt;     &lt;description&gt;A wmts store&lt;/description&gt;     &lt;enabled&gt;true&lt;/enabled&gt;     &lt;__default&gt;true&lt;/__default&gt;     &lt;capabilitiesUrl&gt;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities&lt;/capabilitiesUrl&gt;     &lt;user&gt;admin&lt;/user&gt;     &lt;password&gt;geoserver&lt;/password&gt;     &lt;maxConnections&gt;6&lt;/maxConnections&gt;     &lt;readTimeout&gt;60&lt;/readTimeout&gt;     &lt;connectTimeout&gt;30&lt;/connectTimeout&gt;   &lt;/wmtsStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;wmtsStore\&quot;: {       \&quot;description\&quot;: \&quot;A wmts store\&quot;,       \&quot;enabled\&quot;: \&quot;true\&quot;,       \&quot;_default\&quot;: \&quot;true\&quot;,       \&quot;capabilitiesUrl\&quot;: \&quot;http://demo.geoserver.org/geoserver/gwc/service/wmts?SERVICE&#x3D;WMTS&amp;VERSION&#x3D;1.0.0&amp;REQUEST&#x3D;GetCapabilities\&quot;,       \&quot;user\&quot;: \&quot;admin\&quot;,       \&quot;password\&quot;: \&quot;geoserver\&quot;,       \&quot;maxConnections\&quot;: \&quot;6\&quot;,       \&quot;readTimeout\&quot;: \&quot;60\&quot;,       \&quot;connectTimeout\&quot;: \&quot;30\&quot;     }   }   &#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMTSStore(workspace: string, store: string, wMTSStoreBody: WMTSStoreInfo, options?: any) {
        return DefaultApiFp(this.configuration).putWMTSStore(workspace, store, wMTSStoreBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new WMTS store, or PUT on /workspaces/{workspace}/wmtsstores/{wmtsstore} to edit an existing WMTS store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMTSStores(options?: any) {
        return DefaultApiFp(this.configuration).putWMTSStores(options).then((request) => request(this.axios, this.basePath));
    }

}


