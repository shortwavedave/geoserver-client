// tslint:disable
/**
 * GeoWebCache Layers
 * A layer is a published resource (feature type or coverage).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Layer
 */
export interface Layer {
    /**
     * Unique ID of the layer.
     * @type {string}
     * @memberof Layer
     */
    id?: string;
    /**
     * Indicates whether tile caching is enabled for this layer.
     * @type {boolean}
     * @memberof Layer
     */
    enabled?: boolean;
    /**
     * Determines if the layer is cached.
     * @type {boolean}
     * @memberof Layer
     */
    inMemoryCached?: boolean;
    /**
     * The name of the layer.
     * @type {string}
     * @memberof Layer
     */
    name?: string;
    /**
     * List of formats to be supported (ie. img/jpeg...).
     * @type {Array<string>}
     * @memberof Layer
     */
    mimeFormats?: Array<string>;
    /**
     * 
     * @type {LayerGridSubsets}
     * @memberof Layer
     */
    gridSubsets?: LayerGridSubsets;
    /**
     * The metatiling factors used for this layer.
     * @type {number}
     * @memberof Layer
     */
    metaWidthHeight?: number;
    /**
     * How old the tile may be before it is refetched from the backend.
     * @type {number}
     * @memberof Layer
     */
    expireCache?: number;
    /**
     * The HTTP expiration header sent to client.
     * @type {number}
     * @memberof Layer
     */
    expireClients?: number;
    /**
     * A list of parameter filters, meaning parameters the client may specify that GWC will forward to the backend.
     * @type {object}
     * @memberof Layer
     */
    parameterFilters?: object;
    /**
     * The gutter is a buffer around the image that is sliced away when saving the tiles to disk.
     * @type {number}
     * @memberof Layer
     */
    gutter?: number;
}
/**
 * The grid definitions contain information about the SRS, the maximum extent for this SRS and the bounds of your data.
 * @export
 * @interface LayerGridSubsets
 */
export interface LayerGridSubsets {
    /**
     * 
     * @type {LayerGridSubsetsGridSubset}
     * @memberof LayerGridSubsets
     */
    gridSubset?: LayerGridSubsetsGridSubset;
}
/**
 * Contains the values for gridSetName.
 * @export
 * @interface LayerGridSubsetsGridSubset
 */
export interface LayerGridSubsetsGridSubset {
    /**
     * This name must match the name of the parent gridSet exactly.
     * @type {string}
     * @memberof LayerGridSubsetsGridSubset
     */
    gridSetName?: string;
    /**
     * 
     * @type {LayerGridSubsetsGridSubsetExtent}
     * @memberof LayerGridSubsetsGridSubset
     */
    extent?: LayerGridSubsetsGridSubsetExtent;
    /**
     * If the the layer does not make sense at high zoom levels you can define a starting point here.
     * @type {number}
     * @memberof LayerGridSubsetsGridSubset
     */
    zoomStart?: number;
    /**
     * If the layer does not contain features that make sense to show when zoomed in then you can set the stop level here.
     * @type {number}
     * @memberof LayerGridSubsetsGridSubset
     */
    zoomStop?: number;
}
/**
 * These bounds define the subset of the extent that this grid subset covers.
 * @export
 * @interface LayerGridSubsetsGridSubsetExtent
 */
export interface LayerGridSubsetsGridSubsetExtent {
    /**
     * Coordinates used to set bounds uses double(ie. {-x,-y,x,y})
     * @type {number}
     * @memberof LayerGridSubsetsGridSubsetExtent
     */
    bounds?: number;
}
/**
 * 
 * @export
 * @interface LayerReference
 */
export interface LayerReference {
    /**
     * Name of layer
     * @type {string}
     * @memberof LayerReference
     */
    name?: string;
    /**
     * URL to layer definition
     * @type {string}
     * @memberof LayerReference
     */
    link?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Displays a list of all cached layers on the server.
         * @summary Get a list of cached layers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a cached layer from the server.
         * @summary Delete cached layer
         * @param {string} layerName The name of the layer to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameDelete: async (layerName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerName' is not null or undefined
            if (layerName === null || layerName === undefined) {
                throw new RequiredError('layerName','Required parameter layerName was null or undefined when calling layersNameDelete.');
            }
            const localVarPath = `/layers/{layerName}`
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single cached layer definition.
         * @summary Retrieve a cached layer
         * @param {string} layerName The name of the layer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameGet: async (layerName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerName' is not null or undefined
            if (layerName === null || layerName === undefined) {
                throw new RequiredError('layerName','Required parameter layerName was null or undefined when calling layersNameGet.');
            }
            const localVarPath = `/layers/{layerName}`
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies an existing cached layer on the server. Deprecated - use PUT instead.
         * @summary Modify a cached layer (Deprecated).
         * @param {string} layerName The name of the layer to modify.
         * @param {Layer} layerBody The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNamePost: async (layerName: string, layerBody: Layer, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerName' is not null or undefined
            if (layerName === null || layerName === undefined) {
                throw new RequiredError('layerName','Required parameter layerName was null or undefined when calling layersNamePost.');
            }
            // verify required parameter 'layerBody' is not null or undefined
            if (layerBody === null || layerBody === undefined) {
                throw new RequiredError('layerBody','Required parameter layerBody was null or undefined when calling layersNamePost.');
            }
            const localVarPath = `/layers/{layerName}`
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof layerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(layerBody !== undefined ? layerBody : {}) : (layerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new cached layer on the server, or modifies an existing cached layer.
         * @summary Create or update a cached layer.
         * @param {string} layerName The name of the layer to add.
         * @param {Layer} layerBody The new layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNamePut: async (layerName: string, layerBody: Layer, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerName' is not null or undefined
            if (layerName === null || layerName === undefined) {
                throw new RequiredError('layerName','Required parameter layerName was null or undefined when calling layersNamePut.');
            }
            // verify required parameter 'layerBody' is not null or undefined
            if (layerBody === null || layerBody === undefined) {
                throw new RequiredError('layerBody','Required parameter layerBody was null or undefined when calling layersNamePut.');
            }
            const localVarPath = `/layers/{layerName}`
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof layerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(layerBody !== undefined ? layerBody : {}) : (layerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Displays a list of all cached layers on the server.
         * @summary Get a list of cached layers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LayerReference>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a cached layer from the server.
         * @summary Delete cached layer
         * @param {string} layerName The name of the layer to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNameDelete(layerName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNameDelete(layerName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single cached layer definition.
         * @summary Retrieve a cached layer
         * @param {string} layerName The name of the layer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNameGet(layerName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Layer>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNameGet(layerName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies an existing cached layer on the server. Deprecated - use PUT instead.
         * @summary Modify a cached layer (Deprecated).
         * @param {string} layerName The name of the layer to modify.
         * @param {Layer} layerBody The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNamePost(layerName: string, layerBody: Layer, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNamePost(layerName, layerBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new cached layer on the server, or modifies an existing cached layer.
         * @summary Create or update a cached layer.
         * @param {string} layerName The name of the layer to add.
         * @param {Layer} layerBody The new layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNamePut(layerName: string, layerBody: Layer, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNamePut(layerName, layerBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Displays a list of all cached layers on the server.
         * @summary Get a list of cached layers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersGet(options?: any): AxiosPromise<Array<LayerReference>> {
            return DefaultApiFp(configuration).layersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a cached layer from the server.
         * @summary Delete cached layer
         * @param {string} layerName The name of the layer to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameDelete(layerName: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersNameDelete(layerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single cached layer definition.
         * @summary Retrieve a cached layer
         * @param {string} layerName The name of the layer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameGet(layerName: string, options?: any): AxiosPromise<Layer> {
            return DefaultApiFp(configuration).layersNameGet(layerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies an existing cached layer on the server. Deprecated - use PUT instead.
         * @summary Modify a cached layer (Deprecated).
         * @param {string} layerName The name of the layer to modify.
         * @param {Layer} layerBody The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNamePost(layerName: string, layerBody: Layer, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersNamePost(layerName, layerBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new cached layer on the server, or modifies an existing cached layer.
         * @summary Create or update a cached layer.
         * @param {string} layerName The name of the layer to add.
         * @param {Layer} layerBody The new layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNamePut(layerName: string, layerBody: Layer, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersNamePut(layerName, layerBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Displays a list of all cached layers on the server.
     * @summary Get a list of cached layers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersGet(options?: any): AxiosPromise<Array<LayerReference>>;

    /**
     * Deletes a cached layer from the server.
     * @summary Delete cached layer
     * @param {string} layerName The name of the layer to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNameDelete(layerName: string, options?: any): AxiosPromise<void>;

    /**
     * Retrieves a single cached layer definition.
     * @summary Retrieve a cached layer
     * @param {string} layerName The name of the layer to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNameGet(layerName: string, options?: any): AxiosPromise<Layer>;

    /**
     * Modifies an existing cached layer on the server. Deprecated - use PUT instead.
     * @summary Modify a cached layer (Deprecated).
     * @param {string} layerName The name of the layer to modify.
     * @param {Layer} layerBody The updated layer definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNamePost(layerName: string, layerBody: Layer, options?: any): AxiosPromise<void>;

    /**
     * Creates a new cached layer on the server, or modifies an existing cached layer.
     * @summary Create or update a cached layer.
     * @param {string} layerName The name of the layer to add.
     * @param {Layer} layerBody The new layer definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNamePut(layerName: string, layerBody: Layer, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Displays a list of all cached layers on the server.
     * @summary Get a list of cached layers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersGet(options?: any) {
        return DefaultApiFp(this.configuration).layersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a cached layer from the server.
     * @summary Delete cached layer
     * @param {string} layerName The name of the layer to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNameDelete(layerName: string, options?: any) {
        return DefaultApiFp(this.configuration).layersNameDelete(layerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single cached layer definition.
     * @summary Retrieve a cached layer
     * @param {string} layerName The name of the layer to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNameGet(layerName: string, options?: any) {
        return DefaultApiFp(this.configuration).layersNameGet(layerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies an existing cached layer on the server. Deprecated - use PUT instead.
     * @summary Modify a cached layer (Deprecated).
     * @param {string} layerName The name of the layer to modify.
     * @param {Layer} layerBody The updated layer definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNamePost(layerName: string, layerBody: Layer, options?: any) {
        return DefaultApiFp(this.configuration).layersNamePost(layerName, layerBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new cached layer on the server, or modifies an existing cached layer.
     * @summary Create or update a cached layer.
     * @param {string} layerName The name of the layer to add.
     * @param {Layer} layerBody The new layer definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNamePut(layerName: string, layerBody: Layer, options?: any) {
        return DefaultApiFp(this.configuration).layersNamePut(layerName, layerBody, options).then((request) => request(this.axios, this.basePath));
    }

}


