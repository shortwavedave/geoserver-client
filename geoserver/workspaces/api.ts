// tslint:disable
/**
 * GeoServer Workspace
 * A workspace is a grouping of data stores. Similar to a namespace, it is used to group data that is related in some way.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Workspace
 */
export interface Workspace {
    /**
     * name of the workspace
     * @type {string}
     * @memberof Workspace
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface WorkspaceResponse
 */
export interface WorkspaceResponse {
    /**
     * Name of workspace
     * @type {string}
     * @memberof WorkspaceResponse
     */
    name?: string;
    /**
     * URL to Datas tores in this workspace
     * @type {string}
     * @memberof WorkspaceResponse
     */
    dataStores?: string;
    /**
     * URL to Coverage stores in this workspace
     * @type {string}
     * @memberof WorkspaceResponse
     */
    coverageStores?: string;
    /**
     * URL to WMS stores in this workspace
     * @type {string}
     * @memberof WorkspaceResponse
     */
    wmsStores?: string;
}
/**
 * 
 * @export
 * @interface WorkspacesResponse
 */
export interface WorkspacesResponse {
    /**
     * 
     * @type {WorkspaceResponse}
     * @memberof WorkspacesResponse
     */
    workspaces?: WorkspaceResponse;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} workspaceName name of workspace
         * @param {boolean} [recurse] delete workspace contents (default false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace: async (workspaceName: string, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling deleteWorkspace.');
            }
            const localVarPath = `/workspaces/{workspaceName}`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaces: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single workspace definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}.xml\" for XML).
         * @summary Retrieve a layer group
         * @param {string} workspaceName the name of the workspace to fetch
         * @param {boolean} [quietOnNotFound] The quietOnNotFound parameter avoids logging an exception when the workspace is not present. Note that 404 status code will still be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace: async (workspaceName: string, quietOnNotFound?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling getWorkspace.');
            }
            const localVarPath = `/workspaces/{workspaceName}`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quietOnNotFound !== undefined) {
                localVarQueryParameter['quietOnNotFound'] = quietOnNotFound;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all workspaces on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces.xml\" for XML)
         * @summary Get a list of workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaces: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspace: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspaceName}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new workspace to the server
         * @summary add a new workspace to GeoServer
         * @param {Workspace} workspaceBody The layer group body information to upload.
         * @param {boolean} [_default] New workspace will be the used as the default. Allowed values are true or false,  The default value is false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaces: async (workspaceBody: Workspace, _default?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceBody' is not null or undefined
            if (workspaceBody === null || workspaceBody === undefined) {
                throw new RequiredError('workspaceBody','Required parameter workspaceBody was null or undefined when calling postWorkspaces.');
            }
            const localVarPath = `/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (_default !== undefined) {
                localVarQueryParameter['default'] = _default;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof workspaceBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workspaceBody !== undefined ? workspaceBody : {}) : (workspaceBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * takes the body of the post and modifies the workspace from it.
         * @summary Update a workspace
         * @param {string} workspaceName name of workspace
         * @param {Workspace} workspaceBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspace: async (workspaceName: string, workspaceBody: Workspace, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling putWorkspace.');
            }
            // verify required parameter 'workspaceBody' is not null or undefined
            if (workspaceBody === null || workspaceBody === undefined) {
                throw new RequiredError('workspaceBody','Required parameter workspaceBody was null or undefined when calling putWorkspace.');
            }
            const localVarPath = `/workspaces/{workspaceName}`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof workspaceBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(workspaceBody !== undefined ? workspaceBody : {}) : (workspaceBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaces: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} workspaceName name of workspace
         * @param {boolean} [recurse] delete workspace contents (default false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkspace(workspaceName: string, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWorkspace(workspaceName, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkspaces(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWorkspaces(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single workspace definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}.xml\" for XML).
         * @summary Retrieve a layer group
         * @param {string} workspaceName the name of the workspace to fetch
         * @param {boolean} [quietOnNotFound] The quietOnNotFound parameter avoids logging an exception when the workspace is not present. Note that 404 status code will still be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspace(workspaceName: string, quietOnNotFound?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWorkspace(workspaceName, quietOnNotFound, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all workspaces on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces.xml\" for XML)
         * @summary Get a list of workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaces(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspacesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWorkspaces(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWorkspace(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWorkspace(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new workspace to the server
         * @summary add a new workspace to GeoServer
         * @param {Workspace} workspaceBody The layer group body information to upload.
         * @param {boolean} [_default] New workspace will be the used as the default. Allowed values are true or false,  The default value is false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWorkspaces(workspaceBody: Workspace, _default?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWorkspaces(workspaceBody, _default, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * takes the body of the post and modifies the workspace from it.
         * @summary Update a workspace
         * @param {string} workspaceName name of workspace
         * @param {Workspace} workspaceBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWorkspace(workspaceName: string, workspaceBody: Workspace, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWorkspace(workspaceName, workspaceBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWorkspaces(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWorkspaces(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} workspaceName name of workspace
         * @param {boolean} [recurse] delete workspace contents (default false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspace(workspaceName: string, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWorkspace(workspaceName, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaces(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWorkspaces(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single workspace definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}.xml\" for XML).
         * @summary Retrieve a layer group
         * @param {string} workspaceName the name of the workspace to fetch
         * @param {boolean} [quietOnNotFound] The quietOnNotFound parameter avoids logging an exception when the workspace is not present. Note that 404 status code will still be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspace(workspaceName: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WorkspaceResponse> {
            return DefaultApiFp(configuration).getWorkspace(workspaceName, quietOnNotFound, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all workspaces on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces.xml\" for XML)
         * @summary Get a list of workspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaces(options?: any): AxiosPromise<WorkspacesResponse> {
            return DefaultApiFp(configuration).getWorkspaces(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspace(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWorkspace(options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new workspace to the server
         * @summary add a new workspace to GeoServer
         * @param {Workspace} workspaceBody The layer group body information to upload.
         * @param {boolean} [_default] New workspace will be the used as the default. Allowed values are true or false,  The default value is false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaces(workspaceBody: Workspace, _default?: boolean, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).postWorkspaces(workspaceBody, _default, options).then((request) => request(axios, basePath));
        },
        /**
         * takes the body of the post and modifies the workspace from it.
         * @summary Update a workspace
         * @param {string} workspaceName name of workspace
         * @param {Workspace} workspaceBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspace(workspaceName: string, workspaceBody: Workspace, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWorkspace(workspaceName, workspaceBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaces(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWorkspaces(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @param {string} workspaceName name of workspace
     * @param {boolean} [recurse] delete workspace contents (default false)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWorkspace(workspaceName: string, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWorkspaces(options?: any): AxiosPromise<void>;

    /**
     * Retrieves a single workspace definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}.xml\" for XML).
     * @summary Retrieve a layer group
     * @param {string} workspaceName the name of the workspace to fetch
     * @param {boolean} [quietOnNotFound] The quietOnNotFound parameter avoids logging an exception when the workspace is not present. Note that 404 status code will still be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWorkspace(workspaceName: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WorkspaceResponse>;

    /**
     * Displays a list of all workspaces on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces.xml\" for XML)
     * @summary Get a list of workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWorkspaces(options?: any): AxiosPromise<WorkspacesResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWorkspace(options?: any): AxiosPromise<void>;

    /**
     * Adds a new workspace to the server
     * @summary add a new workspace to GeoServer
     * @param {Workspace} workspaceBody The layer group body information to upload.
     * @param {boolean} [_default] New workspace will be the used as the default. Allowed values are true or false,  The default value is false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWorkspaces(workspaceBody: Workspace, _default?: boolean, options?: any): AxiosPromise<string>;

    /**
     * takes the body of the post and modifies the workspace from it.
     * @summary Update a workspace
     * @param {string} workspaceName name of workspace
     * @param {Workspace} workspaceBody The layer group body information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWorkspace(workspaceName: string, workspaceBody: Workspace, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWorkspaces(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @param {string} workspaceName name of workspace
     * @param {boolean} [recurse] delete workspace contents (default false)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWorkspace(workspaceName: string, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteWorkspace(workspaceName, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWorkspaces(options?: any) {
        return DefaultApiFp(this.configuration).deleteWorkspaces(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single workspace definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}.xml\" for XML).
     * @summary Retrieve a layer group
     * @param {string} workspaceName the name of the workspace to fetch
     * @param {boolean} [quietOnNotFound] The quietOnNotFound parameter avoids logging an exception when the workspace is not present. Note that 404 status code will still be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWorkspace(workspaceName: string, quietOnNotFound?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getWorkspace(workspaceName, quietOnNotFound, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all workspaces on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces.xml\" for XML)
     * @summary Get a list of workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWorkspaces(options?: any) {
        return DefaultApiFp(this.configuration).getWorkspaces(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWorkspace(options?: any) {
        return DefaultApiFp(this.configuration).postWorkspace(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new workspace to the server
     * @summary add a new workspace to GeoServer
     * @param {Workspace} workspaceBody The layer group body information to upload.
     * @param {boolean} [_default] New workspace will be the used as the default. Allowed values are true or false,  The default value is false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWorkspaces(workspaceBody: Workspace, _default?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).postWorkspaces(workspaceBody, _default, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * takes the body of the post and modifies the workspace from it.
     * @summary Update a workspace
     * @param {string} workspaceName name of workspace
     * @param {Workspace} workspaceBody The layer group body information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWorkspace(workspaceName: string, workspaceBody: Workspace, options?: any) {
        return DefaultApiFp(this.configuration).putWorkspace(workspaceName, workspaceBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWorkspaces(options?: any) {
        return DefaultApiFp(this.configuration).putWorkspaces(options).then((request) => request(this.axios, this.basePath));
    }

}


