// tslint:disable
/**
 * GeoServer Template
 * Manage templates used to configure output (for example GetFeatureInfo reponse). Templates can be registered for the entire server or workspace. You can also configure a template for use with a store, featureType or coverage.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface TemplateReference
 */
export interface TemplateReference {
    /**
     * Name of template
     * @type {string}
     * @memberof TemplateReference
     */
    name?: string;
    /**
     * URL to template definition
     * @type {string}
     * @memberof TemplateReference
     */
    link?: string;
}
/**
 * 
 * @export
 * @interface Templates
 */
export interface Templates {
    /**
     * 
     * @type {object}
     * @memberof Templates
     */
    layerGroups?: object;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a single template registered for use by a coverage.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateCoverageDelete: async (workspace: string, store: string, coverage: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateCoverageDelete.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateCoverageDelete.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling templateCoverageDelete.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateCoverageDelete.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a single template registered for use by a coverage (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a coverage
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateCoverageGet: async (workspace: string, store: string, coverage: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateCoverageGet.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateCoverageGet.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling templateCoverageGet.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateCoverageGet.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateCoveragePost: async (workspace: string, store: string, coverage: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateCoveragePost.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateCoveragePost.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling templateCoveragePost.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateCoveragePost.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Inserts or updates a single template registered for use by a coverage (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateCoveragePut: async (workspace: string, store: string, coverage: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateCoveragePut.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateCoveragePut.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling templateCoveragePut.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateCoveragePut.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof template !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a single template registered for use by all layers generated by a coverage store.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreCSDelete: async (workspace: string, store: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStoreCSDelete.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStoreCSDelete.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStoreCSDelete.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a coverage store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreCSGet: async (workspace: string, store: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStoreCSGet.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStoreCSGet.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStoreCSGet.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreCSPost: async (workspace: string, store: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStoreCSPost.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStoreCSPost.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStoreCSPost.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Inserts or updates a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreCSPut: async (workspace: string, store: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStoreCSPut.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStoreCSPut.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStoreCSPut.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof template !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a single template registered for use by all layers generated by a data store.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreDelete: async (workspace: string, store: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStoreDelete.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStoreDelete.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStoreDelete.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a single template registered for use by a feature type.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreFTDelete: async (workspace: string, store: string, type: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStoreFTDelete.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStoreFTDelete.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling templateDataStoreFTDelete.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStoreFTDelete.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a single template registered for use by a feature type (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a feature type.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreFTGet: async (workspace: string, store: string, type: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStoreFTGet.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStoreFTGet.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling templateDataStoreFTGet.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStoreFTGet.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreFTPost: async (workspace: string, store: string, type: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStoreFTPost.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStoreFTPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling templateDataStoreFTPost.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStoreFTPost.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Inserts or updates a single template registered for use by a feature type (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreFTPut: async (workspace: string, store: string, type: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStoreFTPut.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStoreFTPut.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling templateDataStoreFTPut.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStoreFTPut.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof template !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a data store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreGet: async (workspace: string, store: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStoreGet.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStoreGet.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStoreGet.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStorePost: async (workspace: string, store: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStorePost.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStorePost.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStorePost.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Inserts or updates a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStorePut: async (workspace: string, store: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateDataStorePut.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templateDataStorePut.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDataStorePut.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof template !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a single template registered for use on the server.
         * @summary Delete a template.
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDelete: async (template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateDelete.');
            }
            const localVarPath = `/templates/{template}.ftl`
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a single template registered for use on the server.
         * @summary Return a template
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateGet: async (template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateGet.');
            }
            const localVarPath = `/templates/{template}.ftl`
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatePost: async (template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templatePost.');
            }
            const localVarPath = `/templates/{template}.ftl`
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Inserts or updates a single template registered for use on the server. Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatePut: async (template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templatePut.');
            }
            const localVarPath = `/templates/{template}.ftl`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof template !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a single template registered for use in a workspace.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateWorkspaceDelete: async (workspace: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateWorkspaceDelete.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateWorkspaceDelete.');
            }
            const localVarPath = `/workspaces/{workspace}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a single template registered for use in a workspace (example for GetFeatureInfo WMS operation).
         * @summary Return a template for workspace
         * @param {string} workspace The workspace name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateWorkspaceGet: async (workspace: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateWorkspaceGet.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateWorkspaceGet.');
            }
            const localVarPath = `/workspaces/{workspace}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateWorkspacePost: async (workspace: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateWorkspacePost.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateWorkspacePost.');
            }
            const localVarPath = `/workspaces/{workspace}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"template"}}`, encodeURIComponent(String(template)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Inserts or updates a single template registered for use in a workspace (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateWorkspacePut: async (workspace: string, template: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templateWorkspacePut.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new RequiredError('template','Required parameter template was null or undefined when calling templateWorkspacePut.');
            }
            const localVarPath = `/workspaces/{workspace}/templates/{template}.ftl`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof template !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesCoverageDelete: async (workspace: string, store: string, coverage: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesCoverageDelete.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesCoverageDelete.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling templatesCoverageDelete.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of templates registered for use by a coverage (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a coverage
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesCoverageGet: async (workspace: string, store: string, coverage: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesCoverageGet.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesCoverageGet.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling templatesCoverageGet.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesCoveragePost: async (workspace: string, store: string, coverage: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesCoveragePost.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesCoveragePost.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling templatesCoveragePost.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesCoveragePut: async (workspace: string, store: string, coverage: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesCoveragePut.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesCoveragePut.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling templatesCoveragePut.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/coverages/{coverage}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreCSDelete: async (workspace: string, store: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStoreCSDelete.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStoreCSDelete.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of templates registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a coverage store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreCSGet: async (workspace: string, store: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStoreCSGet.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStoreCSGet.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreCSPost: async (workspace: string, store: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStoreCSPost.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStoreCSPost.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreCSPut: async (workspace: string, store: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStoreCSPut.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStoreCSPut.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestore/{store}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreDelete: async (workspace: string, store: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStoreDelete.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStoreDelete.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreFTDelete: async (workspace: string, store: string, type: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStoreFTDelete.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStoreFTDelete.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling templatesDataStoreFTDelete.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of templates registered for use by feature type (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a feature type.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreFTGet: async (workspace: string, store: string, type: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStoreFTGet.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStoreFTGet.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling templatesDataStoreFTGet.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreFTPost: async (workspace: string, store: string, type: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStoreFTPost.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStoreFTPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling templatesDataStoreFTPost.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreFTPut: async (workspace: string, store: string, type: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStoreFTPut.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStoreFTPut.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling templatesDataStoreFTPut.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/featuretypes/{type}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of templates registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a data store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreGet: async (workspace: string, store: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStoreGet.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStoreGet.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStorePost: async (workspace: string, store: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStorePost.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStorePost.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStorePut: async (workspace: string, store: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesDataStorePut.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling templatesDataStorePut.');
            }
            const localVarPath = `/workspaces/{workspace}/datastores/{store}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of templates registered for use on the server.
         * @summary List of templates for the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesPut: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesWorkspaceDelete: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesWorkspaceDelete.');
            }
            const localVarPath = `/workspaces/{workspace}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of templates registered for use in a workspace (example for GetFeatureInfo WMS operation).
         * @summary List of templates for workspace
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesWorkspaceGet: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesWorkspaceGet.');
            }
            const localVarPath = `/workspaces/{workspace}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesWorkspacePost: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesWorkspacePost.');
            }
            const localVarPath = `/workspaces/{workspace}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesWorkspacePut: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling templatesWorkspacePut.');
            }
            const localVarPath = `/workspaces/{workspace}/templates`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a single template registered for use by a coverage.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateCoverageDelete(workspace: string, store: string, coverage: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateCoverageDelete(workspace, store, coverage, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a single template registered for use by a coverage (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a coverage
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateCoverageGet(workspace: string, store: string, coverage: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateCoverageGet(workspace, store, coverage, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateCoveragePost(workspace: string, store: string, coverage: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateCoveragePost(workspace, store, coverage, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Inserts or updates a single template registered for use by a coverage (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateCoveragePut(workspace: string, store: string, coverage: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateCoveragePut(workspace, store, coverage, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a single template registered for use by all layers generated by a coverage store.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStoreCSDelete(workspace: string, store: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStoreCSDelete(workspace, store, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a coverage store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStoreCSGet(workspace: string, store: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStoreCSGet(workspace, store, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStoreCSPost(workspace: string, store: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStoreCSPost(workspace, store, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Inserts or updates a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStoreCSPut(workspace: string, store: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStoreCSPut(workspace, store, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a single template registered for use by all layers generated by a data store.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStoreDelete(workspace: string, store: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStoreDelete(workspace, store, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a single template registered for use by a feature type.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStoreFTDelete(workspace: string, store: string, type: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStoreFTDelete(workspace, store, type, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a single template registered for use by a feature type (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a feature type.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStoreFTGet(workspace: string, store: string, type: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStoreFTGet(workspace, store, type, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStoreFTPost(workspace: string, store: string, type: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStoreFTPost(workspace, store, type, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Inserts or updates a single template registered for use by a feature type (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStoreFTPut(workspace: string, store: string, type: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStoreFTPut(workspace, store, type, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a data store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStoreGet(workspace: string, store: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStoreGet(workspace, store, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStorePost(workspace: string, store: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStorePost(workspace, store, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Inserts or updates a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDataStorePut(workspace: string, store: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDataStorePut(workspace, store, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a single template registered for use on the server.
         * @summary Delete a template.
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateDelete(template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateDelete(template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a single template registered for use on the server.
         * @summary Return a template
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateGet(template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateGet(template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatePost(template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatePost(template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Inserts or updates a single template registered for use on the server. Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatePut(template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatePut(template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a single template registered for use in a workspace.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateWorkspaceDelete(workspace: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateWorkspaceDelete(workspace, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a single template registered for use in a workspace (example for GetFeatureInfo WMS operation).
         * @summary Return a template for workspace
         * @param {string} workspace The workspace name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateWorkspaceGet(workspace: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateWorkspaceGet(workspace, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateWorkspacePost(workspace: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateWorkspacePost(workspace, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Inserts or updates a single template registered for use in a workspace (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templateWorkspacePut(workspace: string, template: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templateWorkspacePut(workspace, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesCoverageDelete(workspace: string, store: string, coverage: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesCoverageDelete(workspace, store, coverage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of templates registered for use by a coverage (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a coverage
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesCoverageGet(workspace: string, store: string, coverage: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesCoverageGet(workspace, store, coverage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesCoveragePost(workspace: string, store: string, coverage: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesCoveragePost(workspace, store, coverage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesCoveragePut(workspace: string, store: string, coverage: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesCoveragePut(workspace, store, coverage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStoreCSDelete(workspace: string, store: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStoreCSDelete(workspace, store, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of templates registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a coverage store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStoreCSGet(workspace: string, store: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStoreCSGet(workspace, store, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStoreCSPost(workspace: string, store: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStoreCSPost(workspace, store, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStoreCSPut(workspace: string, store: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStoreCSPut(workspace, store, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStoreDelete(workspace: string, store: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStoreDelete(workspace, store, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStoreFTDelete(workspace: string, store: string, type: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStoreFTDelete(workspace, store, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of templates registered for use by feature type (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a feature type.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStoreFTGet(workspace: string, store: string, type: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStoreFTGet(workspace, store, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStoreFTPost(workspace: string, store: string, type: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStoreFTPost(workspace, store, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStoreFTPut(workspace: string, store: string, type: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStoreFTPut(workspace, store, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of templates registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a data store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStoreGet(workspace: string, store: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStoreGet(workspace, store, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStorePost(workspace: string, store: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStorePost(workspace, store, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDataStorePut(workspace: string, store: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDataStorePut(workspace, store, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesDelete(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of templates registered for use on the server.
         * @summary List of templates for the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesPut(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesPut(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesWorkspaceDelete(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesWorkspaceDelete(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of templates registered for use in a workspace (example for GetFeatureInfo WMS operation).
         * @summary List of templates for workspace
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesWorkspaceGet(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Templates>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesWorkspaceGet(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesWorkspacePost(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesWorkspacePost(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesWorkspacePut(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).templatesWorkspacePut(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a single template registered for use by a coverage.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateCoverageDelete(workspace: string, store: string, coverage: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateCoverageDelete(workspace, store, coverage, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a single template registered for use by a coverage (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a coverage
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateCoverageGet(workspace: string, store: string, coverage: string, template: string, options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templateCoverageGet(workspace, store, coverage, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateCoveragePost(workspace: string, store: string, coverage: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateCoveragePost(workspace, store, coverage, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Inserts or updates a single template registered for use by a coverage (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateCoveragePut(workspace: string, store: string, coverage: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateCoveragePut(workspace, store, coverage, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a single template registered for use by all layers generated by a coverage store.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreCSDelete(workspace: string, store: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateDataStoreCSDelete(workspace, store, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a coverage store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreCSGet(workspace: string, store: string, template: string, options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templateDataStoreCSGet(workspace, store, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreCSPost(workspace: string, store: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateDataStoreCSPost(workspace, store, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Inserts or updates a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreCSPut(workspace: string, store: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateDataStoreCSPut(workspace, store, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a single template registered for use by all layers generated by a data store.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreDelete(workspace: string, store: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateDataStoreDelete(workspace, store, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a single template registered for use by a feature type.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreFTDelete(workspace: string, store: string, type: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateDataStoreFTDelete(workspace, store, type, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a single template registered for use by a feature type (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a feature type.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreFTGet(workspace: string, store: string, type: string, template: string, options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templateDataStoreFTGet(workspace, store, type, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreFTPost(workspace: string, store: string, type: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateDataStoreFTPost(workspace, store, type, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Inserts or updates a single template registered for use by a feature type (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreFTPut(workspace: string, store: string, type: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateDataStoreFTPut(workspace, store, type, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
         * @summary Return a template for a data store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStoreGet(workspace: string, store: string, template: string, options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templateDataStoreGet(workspace, store, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStorePost(workspace: string, store: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateDataStorePost(workspace, store, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Inserts or updates a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDataStorePut(workspace: string, store: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateDataStorePut(workspace, store, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a single template registered for use on the server.
         * @summary Delete a template.
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateDelete(template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateDelete(template, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a single template registered for use on the server.
         * @summary Return a template
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateGet(template: string, options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templateGet(template, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatePost(template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatePost(template, options).then((request) => request(axios, basePath));
        },
        /**
         * Inserts or updates a single template registered for use on the server. Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatePut(template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatePut(template, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a single template registered for use in a workspace.
         * @summary Delete a template.
         * @param {string} workspace The workspace name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateWorkspaceDelete(workspace: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateWorkspaceDelete(workspace, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a single template registered for use in a workspace (example for GetFeatureInfo WMS operation).
         * @summary Return a template for workspace
         * @param {string} workspace The workspace name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateWorkspaceGet(workspace: string, template: string, options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templateWorkspaceGet(workspace, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to insert a template.
         * @param {string} workspace The workspace name
         * @param {string} template The template name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateWorkspacePost(workspace: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateWorkspacePost(workspace, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Inserts or updates a single template registered for use in a workspace (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
         * @summary Insert or update a template
         * @param {string} workspace The workspace name
         * @param {string} template The template content to upload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateWorkspacePut(workspace: string, template: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templateWorkspacePut(workspace, template, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesCoverageDelete(workspace: string, store: string, coverage: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesCoverageDelete(workspace, store, coverage, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of templates registered for use by a coverage (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a coverage
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesCoverageGet(workspace: string, store: string, coverage: string, options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templatesCoverageGet(workspace, store, coverage, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesCoveragePost(workspace: string, store: string, coverage: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesCoveragePost(workspace, store, coverage, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} coverage The coverage name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesCoveragePut(workspace: string, store: string, coverage: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesCoveragePut(workspace, store, coverage, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreCSDelete(workspace: string, store: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesDataStoreCSDelete(workspace, store, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of templates registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a coverage store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreCSGet(workspace: string, store: string, options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templatesDataStoreCSGet(workspace, store, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreCSPost(workspace: string, store: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesDataStoreCSPost(workspace, store, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreCSPut(workspace: string, store: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesDataStoreCSPut(workspace, store, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreDelete(workspace: string, store: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesDataStoreDelete(workspace, store, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreFTDelete(workspace: string, store: string, type: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesDataStoreFTDelete(workspace, store, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of templates registered for use by feature type (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a feature type.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreFTGet(workspace: string, store: string, type: string, options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templatesDataStoreFTGet(workspace, store, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreFTPost(workspace: string, store: string, type: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesDataStoreFTPost(workspace, store, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {string} type The feature type name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreFTPut(workspace: string, store: string, type: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesDataStoreFTPut(workspace, store, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of templates registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
         * @summary List of templates for a data store
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStoreGet(workspace: string, store: string, options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templatesDataStoreGet(workspace, store, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStorePost(workspace: string, store: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesDataStorePost(workspace, store, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {string} store The store name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDataStorePut(workspace: string, store: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesDataStorePut(workspace, store, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDelete(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of templates registered for use on the server.
         * @summary List of templates for the server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesGet(options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templatesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesPost(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesPut(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesPut(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Delete from `/{template}` to remove a template.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesWorkspaceDelete(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesWorkspaceDelete(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of templates registered for use in a workspace (example for GetFeatureInfo WMS operation).
         * @summary List of templates for workspace
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesWorkspaceGet(workspace: string, options?: any): AxiosPromise<Templates> {
            return DefaultApiFp(configuration).templatesWorkspaceGet(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesWorkspacePost(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesWorkspacePost(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. PUT to `/{template}` to edit a template.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesWorkspacePut(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).templatesWorkspacePut(workspace, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Deletes a single template registered for use by a coverage.
     * @summary Delete a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateCoverageDelete(workspace: string, store: string, coverage: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a single template registered for use by a coverage (example for GetFeatureInfo WMS operation).
     * @summary Return a template for a coverage
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateCoverageGet(workspace: string, store: string, coverage: string, template: string, options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateCoveragePost(workspace: string, store: string, coverage: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Inserts or updates a single template registered for use by a coverage (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateCoveragePut(workspace: string, store: string, coverage: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes a single template registered for use by all layers generated by a coverage store.
     * @summary Delete a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStoreCSDelete(workspace: string, store: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
     * @summary Return a template for a coverage store
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStoreCSGet(workspace: string, store: string, template: string, options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStoreCSPost(workspace: string, store: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Inserts or updates a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStoreCSPut(workspace: string, store: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes a single template registered for use by all layers generated by a data store.
     * @summary Delete a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStoreDelete(workspace: string, store: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes a single template registered for use by a feature type.
     * @summary Delete a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStoreFTDelete(workspace: string, store: string, type: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a single template registered for use by a feature type (example for GetFeatureInfo WMS operation).
     * @summary Return a template for a feature type.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStoreFTGet(workspace: string, store: string, type: string, template: string, options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStoreFTPost(workspace: string, store: string, type: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Inserts or updates a single template registered for use by a feature type (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStoreFTPut(workspace: string, store: string, type: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
     * @summary Return a template for a data store
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStoreGet(workspace: string, store: string, template: string, options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStorePost(workspace: string, store: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Inserts or updates a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDataStorePut(workspace: string, store: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes a single template registered for use on the server.
     * @summary Delete a template.
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateDelete(template: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a single template registered for use on the server.
     * @summary Return a template
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateGet(template: string, options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatePost(template: string, options?: any): AxiosPromise<void>;

    /**
     * Inserts or updates a single template registered for use on the server. Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatePut(template: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes a single template registered for use in a workspace.
     * @summary Delete a template.
     * @param {string} workspace The workspace name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateWorkspaceDelete(workspace: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a single template registered for use in a workspace (example for GetFeatureInfo WMS operation).
     * @summary Return a template for workspace
     * @param {string} workspace The workspace name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateWorkspaceGet(workspace: string, template: string, options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} workspace The workspace name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateWorkspacePost(workspace: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Inserts or updates a single template registered for use in a workspace (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} workspace The workspace name
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templateWorkspacePut(workspace: string, template: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesCoverageDelete(workspace: string, store: string, coverage: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a list of templates registered for use by a coverage (example for GetFeatureInfo WMS operation).
     * @summary List of templates for a coverage
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesCoverageGet(workspace: string, store: string, coverage: string, options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesCoveragePost(workspace: string, store: string, coverage: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesCoveragePut(workspace: string, store: string, coverage: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStoreCSDelete(workspace: string, store: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a list of templates registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
     * @summary List of templates for a coverage store
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStoreCSGet(workspace: string, store: string, options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStoreCSPost(workspace: string, store: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStoreCSPut(workspace: string, store: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStoreDelete(workspace: string, store: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStoreFTDelete(workspace: string, store: string, type: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a list of templates registered for use by feature type (example for GetFeatureInfo WMS operation).
     * @summary List of templates for a feature type.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStoreFTGet(workspace: string, store: string, type: string, options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStoreFTPost(workspace: string, store: string, type: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStoreFTPut(workspace: string, store: string, type: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a list of templates registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
     * @summary List of templates for a data store
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStoreGet(workspace: string, store: string, options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStorePost(workspace: string, store: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDataStorePut(workspace: string, store: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesDelete(options?: any): AxiosPromise<void>;

    /**
     * Displays a list of templates registered for use on the server.
     * @summary List of templates for the server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesGet(options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesPost(options?: any): AxiosPromise<void>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesPut(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesWorkspaceDelete(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a list of templates registered for use in a workspace (example for GetFeatureInfo WMS operation).
     * @summary List of templates for workspace
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesWorkspaceGet(workspace: string, options?: any): AxiosPromise<Templates>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesWorkspacePost(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    templatesWorkspacePut(workspace: string, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Deletes a single template registered for use by a coverage.
     * @summary Delete a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateCoverageDelete(workspace: string, store: string, coverage: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateCoverageDelete(workspace, store, coverage, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a single template registered for use by a coverage (example for GetFeatureInfo WMS operation).
     * @summary Return a template for a coverage
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateCoverageGet(workspace: string, store: string, coverage: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateCoverageGet(workspace, store, coverage, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateCoveragePost(workspace: string, store: string, coverage: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateCoveragePost(workspace, store, coverage, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Inserts or updates a single template registered for use by a coverage (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateCoveragePut(workspace: string, store: string, coverage: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateCoveragePut(workspace, store, coverage, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a single template registered for use by all layers generated by a coverage store.
     * @summary Delete a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStoreCSDelete(workspace: string, store: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStoreCSDelete(workspace, store, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
     * @summary Return a template for a coverage store
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStoreCSGet(workspace: string, store: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStoreCSGet(workspace, store, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStoreCSPost(workspace: string, store: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStoreCSPost(workspace, store, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Inserts or updates a single template registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStoreCSPut(workspace: string, store: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStoreCSPut(workspace, store, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a single template registered for use by all layers generated by a data store.
     * @summary Delete a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStoreDelete(workspace: string, store: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStoreDelete(workspace, store, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a single template registered for use by a feature type.
     * @summary Delete a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStoreFTDelete(workspace: string, store: string, type: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStoreFTDelete(workspace, store, type, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a single template registered for use by a feature type (example for GetFeatureInfo WMS operation).
     * @summary Return a template for a feature type.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStoreFTGet(workspace: string, store: string, type: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStoreFTGet(workspace, store, type, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStoreFTPost(workspace: string, store: string, type: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStoreFTPost(workspace, store, type, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Inserts or updates a single template registered for use by a feature type (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStoreFTPut(workspace: string, store: string, type: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStoreFTPut(workspace, store, type, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
     * @summary Return a template for a data store
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStoreGet(workspace: string, store: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStoreGet(workspace, store, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStorePost(workspace: string, store: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStorePost(workspace, store, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Inserts or updates a single template registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDataStorePut(workspace: string, store: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDataStorePut(workspace, store, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a single template registered for use on the server.
     * @summary Delete a template.
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateDelete(template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateDelete(template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a single template registered for use on the server.
     * @summary Return a template
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateGet(template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateGet(template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatePost(template: string, options?: any) {
        return DefaultApiFp(this.configuration).templatePost(template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Inserts or updates a single template registered for use on the server. Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatePut(template: string, options?: any) {
        return DefaultApiFp(this.configuration).templatePut(template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a single template registered for use in a workspace.
     * @summary Delete a template.
     * @param {string} workspace The workspace name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateWorkspaceDelete(workspace: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateWorkspaceDelete(workspace, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a single template registered for use in a workspace (example for GetFeatureInfo WMS operation).
     * @summary Return a template for workspace
     * @param {string} workspace The workspace name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateWorkspaceGet(workspace: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateWorkspaceGet(workspace, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to insert a template.
     * @param {string} workspace The workspace name
     * @param {string} template The template name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateWorkspacePost(workspace: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateWorkspacePost(workspace, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Inserts or updates a single template registered for use in a workspace (example for GetFeatureInfo WMS operation). Overwrites any existing template with the same name and location.
     * @summary Insert or update a template
     * @param {string} workspace The workspace name
     * @param {string} template The template content to upload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templateWorkspacePut(workspace: string, template: string, options?: any) {
        return DefaultApiFp(this.configuration).templateWorkspacePut(workspace, template, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesCoverageDelete(workspace: string, store: string, coverage: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesCoverageDelete(workspace, store, coverage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of templates registered for use by a coverage (example for GetFeatureInfo WMS operation).
     * @summary List of templates for a coverage
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesCoverageGet(workspace: string, store: string, coverage: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesCoverageGet(workspace, store, coverage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesCoveragePost(workspace: string, store: string, coverage: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesCoveragePost(workspace, store, coverage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} coverage The coverage name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesCoveragePut(workspace: string, store: string, coverage: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesCoveragePut(workspace, store, coverage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStoreCSDelete(workspace: string, store: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStoreCSDelete(workspace, store, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of templates registered for use by all layers generated by a coverage store (example for GetFeatureInfo WMS operation).
     * @summary List of templates for a coverage store
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStoreCSGet(workspace: string, store: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStoreCSGet(workspace, store, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStoreCSPost(workspace: string, store: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStoreCSPost(workspace, store, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStoreCSPut(workspace: string, store: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStoreCSPut(workspace, store, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStoreDelete(workspace: string, store: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStoreDelete(workspace, store, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStoreFTDelete(workspace: string, store: string, type: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStoreFTDelete(workspace, store, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of templates registered for use by feature type (example for GetFeatureInfo WMS operation).
     * @summary List of templates for a feature type.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStoreFTGet(workspace: string, store: string, type: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStoreFTGet(workspace, store, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStoreFTPost(workspace: string, store: string, type: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStoreFTPost(workspace, store, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {string} type The feature type name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStoreFTPut(workspace: string, store: string, type: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStoreFTPut(workspace, store, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of templates registered for use by all layers generated by a data store (example for GetFeatureInfo WMS operation).
     * @summary List of templates for a data store
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStoreGet(workspace: string, store: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStoreGet(workspace, store, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStorePost(workspace: string, store: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStorePost(workspace, store, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {string} store The store name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDataStorePut(workspace: string, store: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesDataStorePut(workspace, store, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesDelete(options?: any) {
        return DefaultApiFp(this.configuration).templatesDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of templates registered for use on the server.
     * @summary List of templates for the server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesGet(options?: any) {
        return DefaultApiFp(this.configuration).templatesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesPost(options?: any) {
        return DefaultApiFp(this.configuration).templatesPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesPut(options?: any) {
        return DefaultApiFp(this.configuration).templatesPut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Delete from `/{template}` to remove a template.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesWorkspaceDelete(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesWorkspaceDelete(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of templates registered for use in a workspace (example for GetFeatureInfo WMS operation).
     * @summary List of templates for workspace
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesWorkspaceGet(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesWorkspaceGet(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesWorkspacePost(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesWorkspacePost(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. PUT to `/{template}` to edit a template.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public templatesWorkspacePut(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).templatesWorkspacePut(workspace, options).then((request) => request(this.axios, this.basePath));
    }

}


