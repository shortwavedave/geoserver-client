// tslint:disable
/**
 * Roles
 * Organisation of security roles
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a role in the default role service.
         * @summary Delete a role
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultDelete: async (role: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling roleDefaultDelete.');
            }
            const localVarPath = `/roles/role/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disassociate a role in the default role service with a group.
         * @summary Disassociate a role from a group
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultGroupDelete: async (role: string, group: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling roleDefaultGroupDelete.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling roleDefaultGroupDelete.');
            }
            const localVarPath = `/roles/role/{role}/group/{group}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)))
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Associate an existing role in the default role service with a group.
         * @summary Associate a role with a group
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultGroupPost: async (role: string, group: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling roleDefaultGroupPost.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling roleDefaultGroupPost.');
            }
            const localVarPath = `/roles/role/{role}/group/{group}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)))
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a role in the default role service.
         * @summary Add a role
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultPost: async (role: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling roleDefaultPost.');
            }
            const localVarPath = `/roles/role/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disassociate a role in the default role service with a user.
         * @summary Disassociate a role from a user
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultUserDelete: async (role: string, user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling roleDefaultUserDelete.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling roleDefaultUserDelete.');
            }
            const localVarPath = `/roles/role/{role}/user/{user}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Associate an existing role in the default role service with a user.
         * @summary Associate a role with a user
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultUserPost: async (role: string, user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling roleDefaultUserPost.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling roleDefaultUserPost.');
            }
            const localVarPath = `/roles/role/{role}/user/{user}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a role in a particular role service.
         * @summary Delete a role
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDelete: async (serviceName: string, role: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling roleDelete.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling roleDelete.');
            }
            const localVarPath = `/service/{serviceName}/role/{role}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disassociate a role in a particular role service with a group.
         * @summary Disassociate a role from a group
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleGroupDelete: async (serviceName: string, role: string, group: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling roleGroupDelete.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling roleGroupDelete.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling roleGroupDelete.');
            }
            const localVarPath = `/service/{serviceName}/roles/role/{role}/group/{group}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)))
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Associate an existing role in a particular role service with a group.
         * @summary Associate a role with a group
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleGroupPost: async (serviceName: string, role: string, group: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling roleGroupPost.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling roleGroupPost.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling roleGroupPost.');
            }
            const localVarPath = `/service/{serviceName}/roles/role/{role}/group/{group}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)))
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a role in a particular role service.
         * @summary Add a role
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolePost: async (serviceName: string, role: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling rolePost.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling rolePost.');
            }
            const localVarPath = `/service/{serviceName}/role/{role}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disassociate a role in a particular role service with a user.
         * @summary Disassociate a role from a user
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleUserDelete: async (serviceName: string, role: string, user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling roleUserDelete.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling roleUserDelete.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling roleUserDelete.');
            }
            const localVarPath = `/service/{serviceName}/roles/role/{role}/user/{user}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Associate an existing role in a particular role service with a user.
         * @summary Associate a role with a user
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleUserPost: async (serviceName: string, role: string, user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling roleUserPost.');
            }
            // verify required parameter 'role' is not null or undefined
            if (role === null || role === undefined) {
                throw new RequiredError('role','Required parameter role was null or undefined when calling roleUserPost.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling roleUserPost.');
            }
            const localVarPath = `/service/{serviceName}/roles/role/{role}/user/{user}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"role"}}`, encodeURIComponent(String(role)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query all roles in the default role service.
         * @summary Query all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesDefaultGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/roles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query all roles for the group in the default role service.
         * @summary Query all roles for group
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesDefaultGroupGet: async (group: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling rolesDefaultGroupGet.');
            }
            const localVarPath = `/roles/group/{group}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query all roles for the user in the default role service.
         * @summary Query all roles for user
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesDefaultUserGet: async (user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling rolesDefaultUserGet.');
            }
            const localVarPath = `/roles/user/{user}`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query all roles in a particular role service.
         * @summary Query all roles
         * @param {string} serviceName the name of the role role service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGet: async (serviceName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling rolesGet.');
            }
            const localVarPath = `/roles/service/{serviceName}/roles/`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query all roles for the group in a particular role service.
         * @summary Query all roles for group
         * @param {string} serviceName the name of the role role service
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGroupGet: async (serviceName: string, group: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling rolesGroupGet.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling rolesGroupGet.');
            }
            const localVarPath = `/roles/service/{serviceName}/group/{group}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query all roles for the user in a particular role service.
         * @summary Query all roles for user
         * @param {string} serviceName the name of the role role service
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesUserGet: async (serviceName: string, user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling rolesUserGet.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling rolesUserGet.');
            }
            const localVarPath = `/roles/service/{serviceName}/user/{user}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a role in the default role service.
         * @summary Delete a role
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleDefaultDelete(role: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).roleDefaultDelete(role, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Disassociate a role in the default role service with a group.
         * @summary Disassociate a role from a group
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleDefaultGroupDelete(role: string, group: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).roleDefaultGroupDelete(role, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Associate an existing role in the default role service with a group.
         * @summary Associate a role with a group
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleDefaultGroupPost(role: string, group: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).roleDefaultGroupPost(role, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a role in the default role service.
         * @summary Add a role
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleDefaultPost(role: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).roleDefaultPost(role, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Disassociate a role in the default role service with a user.
         * @summary Disassociate a role from a user
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleDefaultUserDelete(role: string, user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).roleDefaultUserDelete(role, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Associate an existing role in the default role service with a user.
         * @summary Associate a role with a user
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleDefaultUserPost(role: string, user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).roleDefaultUserPost(role, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a role in a particular role service.
         * @summary Delete a role
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleDelete(serviceName: string, role: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).roleDelete(serviceName, role, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Disassociate a role in a particular role service with a group.
         * @summary Disassociate a role from a group
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleGroupDelete(serviceName: string, role: string, group: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).roleGroupDelete(serviceName, role, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Associate an existing role in a particular role service with a group.
         * @summary Associate a role with a group
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleGroupPost(serviceName: string, role: string, group: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).roleGroupPost(serviceName, role, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a role in a particular role service.
         * @summary Add a role
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolePost(serviceName: string, role: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).rolePost(serviceName, role, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Disassociate a role in a particular role service with a user.
         * @summary Disassociate a role from a user
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleUserDelete(serviceName: string, role: string, user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).roleUserDelete(serviceName, role, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Associate an existing role in a particular role service with a user.
         * @summary Associate a role with a user
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roleUserPost(serviceName: string, role: string, user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).roleUserPost(serviceName, role, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query all roles in the default role service.
         * @summary Query all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesDefaultGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).rolesDefaultGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query all roles for the group in the default role service.
         * @summary Query all roles for group
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesDefaultGroupGet(group: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).rolesDefaultGroupGet(group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query all roles for the user in the default role service.
         * @summary Query all roles for user
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesDefaultUserGet(user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).rolesDefaultUserGet(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query all roles in a particular role service.
         * @summary Query all roles
         * @param {string} serviceName the name of the role role service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGet(serviceName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).rolesGet(serviceName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query all roles for the group in a particular role service.
         * @summary Query all roles for group
         * @param {string} serviceName the name of the role role service
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesGroupGet(serviceName: string, group: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).rolesGroupGet(serviceName, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query all roles for the user in a particular role service.
         * @summary Query all roles for user
         * @param {string} serviceName the name of the role role service
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rolesUserGet(serviceName: string, user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).rolesUserGet(serviceName, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete a role in the default role service.
         * @summary Delete a role
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultDelete(role: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).roleDefaultDelete(role, options).then((request) => request(axios, basePath));
        },
        /**
         * Disassociate a role in the default role service with a group.
         * @summary Disassociate a role from a group
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultGroupDelete(role: string, group: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).roleDefaultGroupDelete(role, group, options).then((request) => request(axios, basePath));
        },
        /**
         * Associate an existing role in the default role service with a group.
         * @summary Associate a role with a group
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultGroupPost(role: string, group: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).roleDefaultGroupPost(role, group, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a role in the default role service.
         * @summary Add a role
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultPost(role: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).roleDefaultPost(role, options).then((request) => request(axios, basePath));
        },
        /**
         * Disassociate a role in the default role service with a user.
         * @summary Disassociate a role from a user
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultUserDelete(role: string, user: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).roleDefaultUserDelete(role, user, options).then((request) => request(axios, basePath));
        },
        /**
         * Associate an existing role in the default role service with a user.
         * @summary Associate a role with a user
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDefaultUserPost(role: string, user: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).roleDefaultUserPost(role, user, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a role in a particular role service.
         * @summary Delete a role
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleDelete(serviceName: string, role: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).roleDelete(serviceName, role, options).then((request) => request(axios, basePath));
        },
        /**
         * Disassociate a role in a particular role service with a group.
         * @summary Disassociate a role from a group
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleGroupDelete(serviceName: string, role: string, group: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).roleGroupDelete(serviceName, role, group, options).then((request) => request(axios, basePath));
        },
        /**
         * Associate an existing role in a particular role service with a group.
         * @summary Associate a role with a group
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleGroupPost(serviceName: string, role: string, group: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).roleGroupPost(serviceName, role, group, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a role in a particular role service.
         * @summary Add a role
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolePost(serviceName: string, role: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).rolePost(serviceName, role, options).then((request) => request(axios, basePath));
        },
        /**
         * Disassociate a role in a particular role service with a user.
         * @summary Disassociate a role from a user
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleUserDelete(serviceName: string, role: string, user: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).roleUserDelete(serviceName, role, user, options).then((request) => request(axios, basePath));
        },
        /**
         * Associate an existing role in a particular role service with a user.
         * @summary Associate a role with a user
         * @param {string} serviceName the name of the role service
         * @param {string} role the name of the role
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleUserPost(serviceName: string, role: string, user: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).roleUserPost(serviceName, role, user, options).then((request) => request(axios, basePath));
        },
        /**
         * Query all roles in the default role service.
         * @summary Query all roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesDefaultGet(options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).rolesDefaultGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Query all roles for the group in the default role service.
         * @summary Query all roles for group
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesDefaultGroupGet(group: string, options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).rolesDefaultGroupGet(group, options).then((request) => request(axios, basePath));
        },
        /**
         * Query all roles for the user in the default role service.
         * @summary Query all roles for user
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesDefaultUserGet(user: string, options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).rolesDefaultUserGet(user, options).then((request) => request(axios, basePath));
        },
        /**
         * Query all roles in a particular role service.
         * @summary Query all roles
         * @param {string} serviceName the name of the role role service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGet(serviceName: string, options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).rolesGet(serviceName, options).then((request) => request(axios, basePath));
        },
        /**
         * Query all roles for the group in a particular role service.
         * @summary Query all roles for group
         * @param {string} serviceName the name of the role role service
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGroupGet(serviceName: string, group: string, options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).rolesGroupGet(serviceName, group, options).then((request) => request(axios, basePath));
        },
        /**
         * Query all roles for the user in a particular role service.
         * @summary Query all roles for user
         * @param {string} serviceName the name of the role role service
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesUserGet(serviceName: string, user: string, options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).rolesUserGet(serviceName, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Delete a role in the default role service.
     * @summary Delete a role
     * @param {string} role the name of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    roleDefaultDelete(role: string, options?: any): AxiosPromise<void>;

    /**
     * Disassociate a role in the default role service with a group.
     * @summary Disassociate a role from a group
     * @param {string} role the name of the role
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    roleDefaultGroupDelete(role: string, group: string, options?: any): AxiosPromise<void>;

    /**
     * Associate an existing role in the default role service with a group.
     * @summary Associate a role with a group
     * @param {string} role the name of the role
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    roleDefaultGroupPost(role: string, group: string, options?: any): AxiosPromise<void>;

    /**
     * Add a role in the default role service.
     * @summary Add a role
     * @param {string} role the name of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    roleDefaultPost(role: string, options?: any): AxiosPromise<void>;

    /**
     * Disassociate a role in the default role service with a user.
     * @summary Disassociate a role from a user
     * @param {string} role the name of the role
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    roleDefaultUserDelete(role: string, user: string, options?: any): AxiosPromise<void>;

    /**
     * Associate an existing role in the default role service with a user.
     * @summary Associate a role with a user
     * @param {string} role the name of the role
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    roleDefaultUserPost(role: string, user: string, options?: any): AxiosPromise<void>;

    /**
     * Delete a role in a particular role service.
     * @summary Delete a role
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    roleDelete(serviceName: string, role: string, options?: any): AxiosPromise<void>;

    /**
     * Disassociate a role in a particular role service with a group.
     * @summary Disassociate a role from a group
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    roleGroupDelete(serviceName: string, role: string, group: string, options?: any): AxiosPromise<void>;

    /**
     * Associate an existing role in a particular role service with a group.
     * @summary Associate a role with a group
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    roleGroupPost(serviceName: string, role: string, group: string, options?: any): AxiosPromise<void>;

    /**
     * Add a role in a particular role service.
     * @summary Add a role
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rolePost(serviceName: string, role: string, options?: any): AxiosPromise<void>;

    /**
     * Disassociate a role in a particular role service with a user.
     * @summary Disassociate a role from a user
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    roleUserDelete(serviceName: string, role: string, user: string, options?: any): AxiosPromise<void>;

    /**
     * Associate an existing role in a particular role service with a user.
     * @summary Associate a role with a user
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    roleUserPost(serviceName: string, role: string, user: string, options?: any): AxiosPromise<void>;

    /**
     * Query all roles in the default role service.
     * @summary Query all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rolesDefaultGet(options?: any): AxiosPromise<Array<string>>;

    /**
     * Query all roles for the group in the default role service.
     * @summary Query all roles for group
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rolesDefaultGroupGet(group: string, options?: any): AxiosPromise<Array<string>>;

    /**
     * Query all roles for the user in the default role service.
     * @summary Query all roles for user
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rolesDefaultUserGet(user: string, options?: any): AxiosPromise<Array<string>>;

    /**
     * Query all roles in a particular role service.
     * @summary Query all roles
     * @param {string} serviceName the name of the role role service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rolesGet(serviceName: string, options?: any): AxiosPromise<Array<string>>;

    /**
     * Query all roles for the group in a particular role service.
     * @summary Query all roles for group
     * @param {string} serviceName the name of the role role service
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rolesGroupGet(serviceName: string, group: string, options?: any): AxiosPromise<Array<string>>;

    /**
     * Query all roles for the user in a particular role service.
     * @summary Query all roles for user
     * @param {string} serviceName the name of the role role service
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    rolesUserGet(serviceName: string, user: string, options?: any): AxiosPromise<Array<string>>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Delete a role in the default role service.
     * @summary Delete a role
     * @param {string} role the name of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roleDefaultDelete(role: string, options?: any) {
        return DefaultApiFp(this.configuration).roleDefaultDelete(role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disassociate a role in the default role service with a group.
     * @summary Disassociate a role from a group
     * @param {string} role the name of the role
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roleDefaultGroupDelete(role: string, group: string, options?: any) {
        return DefaultApiFp(this.configuration).roleDefaultGroupDelete(role, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Associate an existing role in the default role service with a group.
     * @summary Associate a role with a group
     * @param {string} role the name of the role
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roleDefaultGroupPost(role: string, group: string, options?: any) {
        return DefaultApiFp(this.configuration).roleDefaultGroupPost(role, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a role in the default role service.
     * @summary Add a role
     * @param {string} role the name of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roleDefaultPost(role: string, options?: any) {
        return DefaultApiFp(this.configuration).roleDefaultPost(role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disassociate a role in the default role service with a user.
     * @summary Disassociate a role from a user
     * @param {string} role the name of the role
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roleDefaultUserDelete(role: string, user: string, options?: any) {
        return DefaultApiFp(this.configuration).roleDefaultUserDelete(role, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Associate an existing role in the default role service with a user.
     * @summary Associate a role with a user
     * @param {string} role the name of the role
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roleDefaultUserPost(role: string, user: string, options?: any) {
        return DefaultApiFp(this.configuration).roleDefaultUserPost(role, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a role in a particular role service.
     * @summary Delete a role
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roleDelete(serviceName: string, role: string, options?: any) {
        return DefaultApiFp(this.configuration).roleDelete(serviceName, role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disassociate a role in a particular role service with a group.
     * @summary Disassociate a role from a group
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roleGroupDelete(serviceName: string, role: string, group: string, options?: any) {
        return DefaultApiFp(this.configuration).roleGroupDelete(serviceName, role, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Associate an existing role in a particular role service with a group.
     * @summary Associate a role with a group
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roleGroupPost(serviceName: string, role: string, group: string, options?: any) {
        return DefaultApiFp(this.configuration).roleGroupPost(serviceName, role, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a role in a particular role service.
     * @summary Add a role
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolePost(serviceName: string, role: string, options?: any) {
        return DefaultApiFp(this.configuration).rolePost(serviceName, role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disassociate a role in a particular role service with a user.
     * @summary Disassociate a role from a user
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roleUserDelete(serviceName: string, role: string, user: string, options?: any) {
        return DefaultApiFp(this.configuration).roleUserDelete(serviceName, role, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Associate an existing role in a particular role service with a user.
     * @summary Associate a role with a user
     * @param {string} serviceName the name of the role service
     * @param {string} role the name of the role
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public roleUserPost(serviceName: string, role: string, user: string, options?: any) {
        return DefaultApiFp(this.configuration).roleUserPost(serviceName, role, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query all roles in the default role service.
     * @summary Query all roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolesDefaultGet(options?: any) {
        return DefaultApiFp(this.configuration).rolesDefaultGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query all roles for the group in the default role service.
     * @summary Query all roles for group
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolesDefaultGroupGet(group: string, options?: any) {
        return DefaultApiFp(this.configuration).rolesDefaultGroupGet(group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query all roles for the user in the default role service.
     * @summary Query all roles for user
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolesDefaultUserGet(user: string, options?: any) {
        return DefaultApiFp(this.configuration).rolesDefaultUserGet(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query all roles in a particular role service.
     * @summary Query all roles
     * @param {string} serviceName the name of the role role service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolesGet(serviceName: string, options?: any) {
        return DefaultApiFp(this.configuration).rolesGet(serviceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query all roles for the group in a particular role service.
     * @summary Query all roles for group
     * @param {string} serviceName the name of the role role service
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolesGroupGet(serviceName: string, group: string, options?: any) {
        return DefaultApiFp(this.configuration).rolesGroupGet(serviceName, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query all roles for the user in a particular role service.
     * @summary Query all roles for user
     * @param {string} serviceName the name of the role role service
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rolesUserGet(serviceName: string, user: string, options?: any) {
        return DefaultApiFp(this.configuration).rolesUserGet(serviceName, user, options).then((request) => request(this.axios, this.basePath));
    }

}


