// tslint:disable
/**
 * GeoServer monitoring requests
 * Request provides details about OWS and REST requests that GeoServer has handled
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Request
 */
export interface Request {
    /**
     * Requested bounding box
     * @type {string}
     * @memberof Request
     */
    Bbox?: string;
    /**
     * Body of the request (for POST/PUT)
     * @type {string}
     * @memberof Request
     */
    BodyAsString?: string;
    /**
     * Request body content lenght
     * @type {number}
     * @memberof Request
     */
    BodyContentLength?: number;
    /**
     * Request body content type
     * @type {string}
     * @memberof Request
     */
    BodyContentType?: string;
    /**
     * Can be OWS or REST
     * @type {string}
     * @memberof Request
     */
    Category?: string;
    /**
     * Request completion time
     * @type {string}
     * @memberof Request
     */
    EndTime?: string;
    /**
     * The error message, in case the request failed, empt otherwise
     * @type {string}
     * @memberof Request
     */
    ErrorMessage?: string;
    /**
     * Host GeoServer is running on
     * @type {string}
     * @memberof Request
     */
    Host?: string;
    /**
     * HTTP method of the request (e.g., GET, POST, ...)
     * @type {string}
     * @memberof Request
     */
    HttpMethod?: string;
    /**
     * HTTP referrer, if any
     * @type {string}
     * @memberof Request
     */
    HttpReferer?: string;
    /**
     * Request identifier
     * @type {string}
     * @memberof Request
     */
    Id?: string;
    /**
     * Name of the host GeoServer is running on
     * @type {string}
     * @memberof Request
     */
    InternalHost?: string;
    /**
     * OGC operation, e.g. GetMap, GetFeature (available only for OWS requests)
     * @type {string}
     * @memberof Request
     */
    Operation?: string;
    /**
     * OGC protocol version (e.g., 1.1.0, 1.1.3)
     * @type {string}
     * @memberof Request
     */
    OwsVersion?: string;
    /**
     * HTTP request path (e.g. \"/topp/wms\")
     * @type {string}
     * @memberof Request
     */
    Path?: string;
    /**
     * The HTTP request query string
     * @type {string}
     * @memberof Request
     */
    QueryString?: string;
    /**
     * Remote request IP address
     * @type {string}
     * @memberof Request
     */
    RemoteAddr?: string;
    /**
     * Remote client city (available only if GeoIP lookup is enabled)
     * @type {string}
     * @memberof Request
     */
    RemoteCity?: string;
    /**
     * Remote client country (available only if GeoIP lookup is enabled)
     * @type {string}
     * @memberof Request
     */
    RemoteCountry?: string;
    /**
     * Remote client  host
     * @type {string}
     * @memberof Request
     */
    RemoteHost?: string;
    /**
     * Remote client latitude (available only if GeoIP lookup is enabled)
     * @type {string}
     * @memberof Request
     */
    RemoteLat?: string;
    /**
     * Remote client longitude (available only if GeoIP lookup is enabled)
     * @type {string}
     * @memberof Request
     */
    RemoteLon?: string;
    /**
     * User issuing the request
     * @type {string}
     * @memberof Request
     */
    RemoteUser?: string;
    /**
     * Remote client user agent
     * @type {string}
     * @memberof Request
     */
    RemoteUserAgent?: string;
    /**
     * Name of the resources (layers, processes, ...) specified as part of the request
     * @type {string}
     * @memberof Request
     */
    Resources?: string;
    /**
     * Name of the resources (layers, processes, ...) specified as part of the request
     * @type {string}
     * @memberof Request
     */
    ResourcesList?: string;
    /**
     * Content type of the response
     * @type {string}
     * @memberof Request
     */
    ResponseContentType?: string;
    /**
     * Size of the response in bytes
     * @type {number}
     * @memberof Request
     */
    ResponseLength?: number;
    /**
     * HTTP status of the response
     * @type {string}
     * @memberof Request
     */
    ResponseStatus?: string;
    /**
     * OGC service in use (available only for OGC requests)
     * @type {string}
     * @memberof Request
     */
    Service?: string;
    /**
     * Request start time
     * @type {string}
     * @memberof Request
     */
    StartTime?: string;
    /**
     * Status of the request (WAITING, RUNNING, CANCELLING, FAILED, FINISHED, CANCELLED, INTERRUPTED)
     * @type {string}
     * @memberof Request
     */
    Status?: string;
    /**
     * The OGC sub operations, for the cases in which it applies (e.g., for WFS-T it can be Insert/Delete/Update)
     * @type {string}
     * @memberof Request
     */
    SubOperation?: string;
    /**
     * Total request time in milliseconds
     * @type {number}
     * @memberof Request
     */
    TotalTime?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Invalid. Cannot delete a specific request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMonitorRequest: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/monitor/requests/{request}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clears all reqests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMonitorRequests: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/monitor/requests`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a specific request, by identifier The HTML format returns all details of the request. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/request/1.xls\" for Excel). 
         * @summary Get a list of requests
         * @param {string} request The request identifier
         * @param {string} [fields] Comma separated list of fields to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonitorRequest: async (request: string, fields?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling getMonitorRequest.');
            }
            const localVarPath = `/monitor/requests/{request}`
                .replace(`{${"request"}}`, encodeURIComponent(String(request)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all requests known to the monitoring system. If no list of fields is specified, the full list will be returned, with the exception of of Class, Body and Error fields. The HTML format return a summary of the requests, and links to the single request to gather details. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/requests.xls\" for Excel). 
         * @summary Get a list of requests
         * @param {string} [from] Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \&quot;2010-07-23\&quot;, \&quot;2010-07-23T16:16:44\&quot;)   
         * @param {string} [to] Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \&quot;2010-07-23\&quot;, \&quot;2010-07-23T16:16:44\&quot;)   
         * @param {string} [filter] Specifies generic filter against the available fields, in the form \&quot;attributeName:OP:value\&quot; where OP can be: - EQ: equals - NEQ: not equals - LT: less than - LTE: less than or equals - GT: greater than - GTE: greater than or equals - IN: in list (\&quot;value\&quot; must be a comma separated list of values 
         * @param {string} [order] Specifies which request attribute to sort by, and optionally specifies the sort direction. The syntax is \&quot;attribute[;ASC|DESC]\&quot;, where the sorting direction is optional 
         * @param {number} [offset] Specifies where in the result set records should be returned from
         * @param {number} [count] Specifies how many records should be returned.
         * @param {boolean} [live] Specifies which requests to return based on status. If true, only returns live (RUNNING, WAITING, CANCELLING) requests. If false, only returns completed (FINISHED, FAILED) requests. If not specified, all requests are returned regardless of status. 
         * @param {string} [fields] Comma separated list of fields to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonitorRequests: async (from?: string, to?: string, filter?: string, order?: string, offset?: number, count?: number, live?: boolean, fields?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/monitor/requests`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This resource cannot be modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMonitorRequest: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/monitor/requests/{request}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. This resource cannot be modified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMonitorRequests: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/monitor/requests`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This resource cannot be modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMonitorRequest: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/monitor/requests/{request}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. This resource cannot be modified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMonitorRequests: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/monitor/requests`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Invalid. Cannot delete a specific request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMonitorRequest(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteMonitorRequest(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Clears all reqests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMonitorRequests(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteMonitorRequests(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a specific request, by identifier The HTML format returns all details of the request. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/request/1.xls\" for Excel). 
         * @summary Get a list of requests
         * @param {string} request The request identifier
         * @param {string} [fields] Comma separated list of fields to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMonitorRequest(request: string, fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Request>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMonitorRequest(request, fields, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of all requests known to the monitoring system. If no list of fields is specified, the full list will be returned, with the exception of of Class, Body and Error fields. The HTML format return a summary of the requests, and links to the single request to gather details. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/requests.xls\" for Excel). 
         * @summary Get a list of requests
         * @param {string} [from] Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \&quot;2010-07-23\&quot;, \&quot;2010-07-23T16:16:44\&quot;)   
         * @param {string} [to] Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \&quot;2010-07-23\&quot;, \&quot;2010-07-23T16:16:44\&quot;)   
         * @param {string} [filter] Specifies generic filter against the available fields, in the form \&quot;attributeName:OP:value\&quot; where OP can be: - EQ: equals - NEQ: not equals - LT: less than - LTE: less than or equals - GT: greater than - GTE: greater than or equals - IN: in list (\&quot;value\&quot; must be a comma separated list of values 
         * @param {string} [order] Specifies which request attribute to sort by, and optionally specifies the sort direction. The syntax is \&quot;attribute[;ASC|DESC]\&quot;, where the sorting direction is optional 
         * @param {number} [offset] Specifies where in the result set records should be returned from
         * @param {number} [count] Specifies how many records should be returned.
         * @param {boolean} [live] Specifies which requests to return based on status. If true, only returns live (RUNNING, WAITING, CANCELLING) requests. If false, only returns completed (FINISHED, FAILED) requests. If not specified, all requests are returned regardless of status. 
         * @param {string} [fields] Comma separated list of fields to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMonitorRequests(from?: string, to?: string, filter?: string, order?: string, offset?: number, count?: number, live?: boolean, fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Request>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMonitorRequests(from, to, filter, order, offset, count, live, fields, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This resource cannot be modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMonitorRequest(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMonitorRequest(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. This resource cannot be modified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMonitorRequests(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMonitorRequests(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This resource cannot be modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMonitorRequest(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putMonitorRequest(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. This resource cannot be modified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMonitorRequests(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putMonitorRequests(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Invalid. Cannot delete a specific request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMonitorRequest(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteMonitorRequest(options).then((request) => request(axios, basePath));
        },
        /**
         * Clears all reqests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMonitorRequests(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteMonitorRequests(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a specific request, by identifier The HTML format returns all details of the request. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/request/1.xls\" for Excel). 
         * @summary Get a list of requests
         * @param {string} request The request identifier
         * @param {string} [fields] Comma separated list of fields to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonitorRequest(request: string, fields?: string, options?: any): AxiosPromise<Request> {
            return DefaultApiFp(configuration).getMonitorRequest(request, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all requests known to the monitoring system. If no list of fields is specified, the full list will be returned, with the exception of of Class, Body and Error fields. The HTML format return a summary of the requests, and links to the single request to gather details. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/requests.xls\" for Excel). 
         * @summary Get a list of requests
         * @param {string} [from] Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \&quot;2010-07-23\&quot;, \&quot;2010-07-23T16:16:44\&quot;)   
         * @param {string} [to] Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \&quot;2010-07-23\&quot;, \&quot;2010-07-23T16:16:44\&quot;)   
         * @param {string} [filter] Specifies generic filter against the available fields, in the form \&quot;attributeName:OP:value\&quot; where OP can be: - EQ: equals - NEQ: not equals - LT: less than - LTE: less than or equals - GT: greater than - GTE: greater than or equals - IN: in list (\&quot;value\&quot; must be a comma separated list of values 
         * @param {string} [order] Specifies which request attribute to sort by, and optionally specifies the sort direction. The syntax is \&quot;attribute[;ASC|DESC]\&quot;, where the sorting direction is optional 
         * @param {number} [offset] Specifies where in the result set records should be returned from
         * @param {number} [count] Specifies how many records should be returned.
         * @param {boolean} [live] Specifies which requests to return based on status. If true, only returns live (RUNNING, WAITING, CANCELLING) requests. If false, only returns completed (FINISHED, FAILED) requests. If not specified, all requests are returned regardless of status. 
         * @param {string} [fields] Comma separated list of fields to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMonitorRequests(from?: string, to?: string, filter?: string, order?: string, offset?: number, count?: number, live?: boolean, fields?: string, options?: any): AxiosPromise<Array<Request>> {
            return DefaultApiFp(configuration).getMonitorRequests(from, to, filter, order, offset, count, live, fields, options).then((request) => request(axios, basePath));
        },
        /**
         * This resource cannot be modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMonitorRequest(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postMonitorRequest(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. This resource cannot be modified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMonitorRequests(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postMonitorRequests(options).then((request) => request(axios, basePath));
        },
        /**
         * This resource cannot be modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMonitorRequest(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putMonitorRequest(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. This resource cannot be modified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMonitorRequests(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putMonitorRequests(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Invalid. Cannot delete a specific request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteMonitorRequest(options?: any): AxiosPromise<void>;

    /**
     * Clears all reqests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteMonitorRequests(options?: any): AxiosPromise<void>;

    /**
     * Returns a specific request, by identifier The HTML format returns all details of the request. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/request/1.xls\" for Excel). 
     * @summary Get a list of requests
     * @param {string} request The request identifier
     * @param {string} [fields] Comma separated list of fields to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMonitorRequest(request: string, fields?: string, options?: any): AxiosPromise<Request>;

    /**
     * Returns a list of all requests known to the monitoring system. If no list of fields is specified, the full list will be returned, with the exception of of Class, Body and Error fields. The HTML format return a summary of the requests, and links to the single request to gather details. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/requests.xls\" for Excel). 
     * @summary Get a list of requests
     * @param {string} [from] Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \&quot;2010-07-23\&quot;, \&quot;2010-07-23T16:16:44\&quot;)   
     * @param {string} [to] Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \&quot;2010-07-23\&quot;, \&quot;2010-07-23T16:16:44\&quot;)   
     * @param {string} [filter] Specifies generic filter against the available fields, in the form \&quot;attributeName:OP:value\&quot; where OP can be: - EQ: equals - NEQ: not equals - LT: less than - LTE: less than or equals - GT: greater than - GTE: greater than or equals - IN: in list (\&quot;value\&quot; must be a comma separated list of values 
     * @param {string} [order] Specifies which request attribute to sort by, and optionally specifies the sort direction. The syntax is \&quot;attribute[;ASC|DESC]\&quot;, where the sorting direction is optional 
     * @param {number} [offset] Specifies where in the result set records should be returned from
     * @param {number} [count] Specifies how many records should be returned.
     * @param {boolean} [live] Specifies which requests to return based on status. If true, only returns live (RUNNING, WAITING, CANCELLING) requests. If false, only returns completed (FINISHED, FAILED) requests. If not specified, all requests are returned regardless of status. 
     * @param {string} [fields] Comma separated list of fields to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMonitorRequests(from?: string, to?: string, filter?: string, order?: string, offset?: number, count?: number, live?: boolean, fields?: string, options?: any): AxiosPromise<Array<Request>>;

    /**
     * This resource cannot be modified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postMonitorRequest(options?: any): AxiosPromise<void>;

    /**
     * Invalid. This resource cannot be modified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postMonitorRequests(options?: any): AxiosPromise<void>;

    /**
     * This resource cannot be modified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putMonitorRequest(options?: any): AxiosPromise<void>;

    /**
     * Invalid. This resource cannot be modified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putMonitorRequests(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Invalid. Cannot delete a specific request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMonitorRequest(options?: any) {
        return DefaultApiFp(this.configuration).deleteMonitorRequest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clears all reqests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMonitorRequests(options?: any) {
        return DefaultApiFp(this.configuration).deleteMonitorRequests(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a specific request, by identifier The HTML format returns all details of the request. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/request/1.xls\" for Excel). 
     * @summary Get a list of requests
     * @param {string} request The request identifier
     * @param {string} [fields] Comma separated list of fields to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMonitorRequest(request: string, fields?: string, options?: any) {
        return DefaultApiFp(this.configuration).getMonitorRequest(request, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all requests known to the monitoring system. If no list of fields is specified, the full list will be returned, with the exception of of Class, Body and Error fields. The HTML format return a summary of the requests, and links to the single request to gather details. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/requests.xls\" for Excel). 
     * @summary Get a list of requests
     * @param {string} [from] Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \&quot;2010-07-23\&quot;, \&quot;2010-07-23T16:16:44\&quot;)   
     * @param {string} [to] Specifies an inclusive lower bound on the timestamp for the start of a request.  The timestamp must be expressed as an ISO can be specified to any desired precision (e..g, \&quot;2010-07-23\&quot;, \&quot;2010-07-23T16:16:44\&quot;)   
     * @param {string} [filter] Specifies generic filter against the available fields, in the form \&quot;attributeName:OP:value\&quot; where OP can be: - EQ: equals - NEQ: not equals - LT: less than - LTE: less than or equals - GT: greater than - GTE: greater than or equals - IN: in list (\&quot;value\&quot; must be a comma separated list of values 
     * @param {string} [order] Specifies which request attribute to sort by, and optionally specifies the sort direction. The syntax is \&quot;attribute[;ASC|DESC]\&quot;, where the sorting direction is optional 
     * @param {number} [offset] Specifies where in the result set records should be returned from
     * @param {number} [count] Specifies how many records should be returned.
     * @param {boolean} [live] Specifies which requests to return based on status. If true, only returns live (RUNNING, WAITING, CANCELLING) requests. If false, only returns completed (FINISHED, FAILED) requests. If not specified, all requests are returned regardless of status. 
     * @param {string} [fields] Comma separated list of fields to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMonitorRequests(from?: string, to?: string, filter?: string, order?: string, offset?: number, count?: number, live?: boolean, fields?: string, options?: any) {
        return DefaultApiFp(this.configuration).getMonitorRequests(from, to, filter, order, offset, count, live, fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This resource cannot be modified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMonitorRequest(options?: any) {
        return DefaultApiFp(this.configuration).postMonitorRequest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. This resource cannot be modified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMonitorRequests(options?: any) {
        return DefaultApiFp(this.configuration).postMonitorRequests(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This resource cannot be modified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putMonitorRequest(options?: any) {
        return DefaultApiFp(this.configuration).putMonitorRequest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. This resource cannot be modified.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putMonitorRequests(options?: any) {
        return DefaultApiFp(this.configuration).putMonitorRequests(options).then((request) => request(this.axios, this.basePath));
    }

}


