// tslint:disable
/**
 * GeoServer Parameter Extractor
 * A parameter extractor rule allows specific request parameters as URL path fragments instead of using the query string. A echo parameter makes sure that certain URL paratemers are added to the capabilities documents backlinks.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface EchoParameter
 */
export interface EchoParameter {
    /**
     * identifier of the echo parameter
     * @type {string}
     * @memberof EchoParameter
     */
    id?: string;
    /**
     * The parameter name
     * @type {string}
     * @memberof EchoParameter
     */
    parameter?: string;
    /**
     * Whether or not the parameter echoing is active
     * @type {boolean}
     * @memberof EchoParameter
     */
    activated?: boolean;
}
/**
 * 
 * @export
 * @interface Rule
 */
export interface Rule {
    /**
     * identifier of the rule
     * @type {string}
     * @memberof Rule
     */
    id?: string;
    /**
     * Whether or not the parameter echoing is active
     * @type {boolean}
     * @memberof Rule
     */
    activated?: boolean;
    /**
     * The position of the URL base path element to be selected
     * @type {number}
     * @memberof Rule
     */
    position?: number;
    /**
     * The name of the parameter produced by this rule
     * @type {string}
     * @memberof Rule
     */
    parameter?: string;
    /**
     * Expression that defines the value of the parameter, use {PARAMETER} as a placeholder for the selected path element
     * @type {string}
     * @memberof Rule
     */
    transform?: string;
    /**
     * Regex match expression with groups, for example ^(?:/[^/]*){3}(/([^/]+)).*$ selects the URL base path third element
     * @type {string}
     * @memberof Rule
     */
    match?: string;
    /**
     * If defined this rule will only be applied to URLs that match this regex expression
     * @type {string}
     * @memberof Rule
     */
    activation?: string;
    /**
     * The match expression group to be removed from URL, by default 1
     * @type {number}
     * @memberof Rule
     */
    remove?: number;
    /**
     * Defines how to combine parameter existing value ($1 existing value, $2 new value), by default the value is overridden
     * @type {string}
     * @memberof Rule
     */
    combine?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes an echo parameter from the configuration
         * @summary Delete an echo parameter
         * @param {string} parameterId The identifier of the  echo parameter to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEchoParameter: async (parameterId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'parameterId' is not null or undefined
            if (parameterId === null || parameterId === undefined) {
                throw new RequiredError('parameterId','Required parameter parameterId was null or undefined when calling deleteEchoParameter.');
            }
            const localVarPath = `/params-extractor/echoes/{parameterId}`
                .replace(`{${"parameterId"}}`, encodeURIComponent(String(parameterId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a rule from the configuration
         * @summary Delete a rule
         * @param {string} ruleId The identifier of the  rule to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRule: async (ruleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling deleteRule.');
            }
            const localVarPath = `/params-extractor/rules/{ruleId}`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Controls a particular echo parameter. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/echos/{parameterId}.xml\" for XML).
         * @summary Retrieve a particular echo parameter definition
         * @param {string} parameterId The identifier of the  echo parameter to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEchoParameter: async (parameterId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'parameterId' is not null or undefined
            if (parameterId === null || parameterId === undefined) {
                throw new RequiredError('parameterId','Required parameter parameterId was null or undefined when calling getEchoParameter.');
            }
            const localVarPath = `/params-extractor/echoes/{parameterId}`
                .replace(`{${"parameterId"}}`, encodeURIComponent(String(parameterId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all echo parameters currently configured.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
         * @summary Get a list of echo parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEchoParameters: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/params-extractor/echoes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Controls a particular rule . Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/echos/{parameterId}.xml\" for XML).
         * @summary Retrieve a particular rule definition
         * @param {string} ruleId The identifier of the  rule to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRule: async (ruleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling getRule.');
            }
            const localVarPath = `/params-extractor/rules/{ruleId}`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all rules currently configured.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
         * @summary Get a list of rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRules: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/params-extractor/rules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new echo parameter
         * @summary Create a new echo parameter
         * @param {EchoParameter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEchoParameter: async (body?: EchoParameter, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/params-extractor/echoes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new rule
         * @summary Create a new rule
         * @param {Rule} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRule: async (body?: Rule, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/params-extractor/rules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify an echo parameter
         * @summary Modify an echo parametr
         * @param {string} parameterId The identifier of the  echo parameter to retrieve.
         * @param {EchoParameter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putEchoParameter: async (parameterId: string, body?: EchoParameter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'parameterId' is not null or undefined
            if (parameterId === null || parameterId === undefined) {
                throw new RequiredError('parameterId','Required parameter parameterId was null or undefined when calling putEchoParameter.');
            }
            const localVarPath = `/params-extractor/echoes/{parameterId}`
                .replace(`{${"parameterId"}}`, encodeURIComponent(String(parameterId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify a rule
         * @summary Modify a rule
         * @param {string} ruleId The identifier of the  echo parameter to retrieve.
         * @param {Rule} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRule: async (ruleId: string, body?: Rule, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling putRule.');
            }
            const localVarPath = `/params-extractor/rules/{ruleId}`
                .replace(`{${"ruleId"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes an echo parameter from the configuration
         * @summary Delete an echo parameter
         * @param {string} parameterId The identifier of the  echo parameter to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEchoParameter(parameterId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteEchoParameter(parameterId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a rule from the configuration
         * @summary Delete a rule
         * @param {string} ruleId The identifier of the  rule to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRule(ruleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteRule(ruleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Controls a particular echo parameter. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/echos/{parameterId}.xml\" for XML).
         * @summary Retrieve a particular echo parameter definition
         * @param {string} parameterId The identifier of the  echo parameter to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEchoParameter(parameterId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EchoParameter>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getEchoParameter(parameterId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all echo parameters currently configured.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
         * @summary Get a list of echo parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEchoParameters(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getEchoParameters(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Controls a particular rule . Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/echos/{parameterId}.xml\" for XML).
         * @summary Retrieve a particular rule definition
         * @param {string} ruleId The identifier of the  rule to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRule(ruleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getRule(ruleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all rules currently configured.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
         * @summary Get a list of rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRules(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getRules(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new echo parameter
         * @summary Create a new echo parameter
         * @param {EchoParameter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEchoParameter(body?: EchoParameter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postEchoParameter(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new rule
         * @summary Create a new rule
         * @param {Rule} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRule(body?: Rule, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postRule(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify an echo parameter
         * @summary Modify an echo parametr
         * @param {string} parameterId The identifier of the  echo parameter to retrieve.
         * @param {EchoParameter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putEchoParameter(parameterId: string, body?: EchoParameter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putEchoParameter(parameterId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify a rule
         * @summary Modify a rule
         * @param {string} ruleId The identifier of the  echo parameter to retrieve.
         * @param {Rule} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRule(ruleId: string, body?: Rule, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putRule(ruleId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes an echo parameter from the configuration
         * @summary Delete an echo parameter
         * @param {string} parameterId The identifier of the  echo parameter to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEchoParameter(parameterId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteEchoParameter(parameterId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a rule from the configuration
         * @summary Delete a rule
         * @param {string} ruleId The identifier of the  rule to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRule(ruleId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteRule(ruleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Controls a particular echo parameter. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/echos/{parameterId}.xml\" for XML).
         * @summary Retrieve a particular echo parameter definition
         * @param {string} parameterId The identifier of the  echo parameter to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEchoParameter(parameterId: string, options?: any): AxiosPromise<EchoParameter> {
            return DefaultApiFp(configuration).getEchoParameter(parameterId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all echo parameters currently configured.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
         * @summary Get a list of echo parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEchoParameters(options?: any): AxiosPromise<Array<object>> {
            return DefaultApiFp(configuration).getEchoParameters(options).then((request) => request(axios, basePath));
        },
        /**
         * Controls a particular rule . Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/echos/{parameterId}.xml\" for XML).
         * @summary Retrieve a particular rule definition
         * @param {string} ruleId The identifier of the  rule to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRule(ruleId: string, options?: any): AxiosPromise<Rule> {
            return DefaultApiFp(configuration).getRule(ruleId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all rules currently configured.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
         * @summary Get a list of rules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRules(options?: any): AxiosPromise<Array<object>> {
            return DefaultApiFp(configuration).getRules(options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new echo parameter
         * @summary Create a new echo parameter
         * @param {EchoParameter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEchoParameter(body?: EchoParameter, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).postEchoParameter(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new rule
         * @summary Create a new rule
         * @param {Rule} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRule(body?: Rule, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).postRule(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify an echo parameter
         * @summary Modify an echo parametr
         * @param {string} parameterId The identifier of the  echo parameter to retrieve.
         * @param {EchoParameter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putEchoParameter(parameterId: string, body?: EchoParameter, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putEchoParameter(parameterId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify a rule
         * @summary Modify a rule
         * @param {string} ruleId The identifier of the  echo parameter to retrieve.
         * @param {Rule} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRule(ruleId: string, body?: Rule, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putRule(ruleId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Deletes an echo parameter from the configuration
     * @summary Delete an echo parameter
     * @param {string} parameterId The identifier of the  echo parameter to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteEchoParameter(parameterId: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes a rule from the configuration
     * @summary Delete a rule
     * @param {string} ruleId The identifier of the  rule to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteRule(ruleId: string, options?: any): AxiosPromise<void>;

    /**
     * Controls a particular echo parameter. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/echos/{parameterId}.xml\" for XML).
     * @summary Retrieve a particular echo parameter definition
     * @param {string} parameterId The identifier of the  echo parameter to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEchoParameter(parameterId: string, options?: any): AxiosPromise<EchoParameter>;

    /**
     * List all echo parameters currently configured.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
     * @summary Get a list of echo parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getEchoParameters(options?: any): AxiosPromise<Array<object>>;

    /**
     * Controls a particular rule . Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/echos/{parameterId}.xml\" for XML).
     * @summary Retrieve a particular rule definition
     * @param {string} ruleId The identifier of the  rule to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRule(ruleId: string, options?: any): AxiosPromise<Rule>;

    /**
     * List all rules currently configured.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
     * @summary Get a list of rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getRules(options?: any): AxiosPromise<Array<object>>;

    /**
     * Adds a new echo parameter
     * @summary Create a new echo parameter
     * @param {EchoParameter} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postEchoParameter(body?: EchoParameter, options?: any): AxiosPromise<string>;

    /**
     * Adds a new rule
     * @summary Create a new rule
     * @param {Rule} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postRule(body?: Rule, options?: any): AxiosPromise<string>;

    /**
     * Modify an echo parameter
     * @summary Modify an echo parametr
     * @param {string} parameterId The identifier of the  echo parameter to retrieve.
     * @param {EchoParameter} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putEchoParameter(parameterId: string, body?: EchoParameter, options?: any): AxiosPromise<void>;

    /**
     * Modify a rule
     * @summary Modify a rule
     * @param {string} ruleId The identifier of the  echo parameter to retrieve.
     * @param {Rule} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putRule(ruleId: string, body?: Rule, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Deletes an echo parameter from the configuration
     * @summary Delete an echo parameter
     * @param {string} parameterId The identifier of the  echo parameter to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteEchoParameter(parameterId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteEchoParameter(parameterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a rule from the configuration
     * @summary Delete a rule
     * @param {string} ruleId The identifier of the  rule to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRule(ruleId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteRule(ruleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Controls a particular echo parameter. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/echos/{parameterId}.xml\" for XML).
     * @summary Retrieve a particular echo parameter definition
     * @param {string} parameterId The identifier of the  echo parameter to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEchoParameter(parameterId: string, options?: any) {
        return DefaultApiFp(this.configuration).getEchoParameter(parameterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all echo parameters currently configured.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
     * @summary Get a list of echo parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEchoParameters(options?: any) {
        return DefaultApiFp(this.configuration).getEchoParameters(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Controls a particular rule . Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/echos/{parameterId}.xml\" for XML).
     * @summary Retrieve a particular rule definition
     * @param {string} ruleId The identifier of the  rule to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRule(ruleId: string, options?: any) {
        return DefaultApiFp(this.configuration).getRule(ruleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all rules currently configured.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/datastores.xml\" for XML)
     * @summary Get a list of rules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRules(options?: any) {
        return DefaultApiFp(this.configuration).getRules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new echo parameter
     * @summary Create a new echo parameter
     * @param {EchoParameter} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postEchoParameter(body?: EchoParameter, options?: any) {
        return DefaultApiFp(this.configuration).postEchoParameter(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new rule
     * @summary Create a new rule
     * @param {Rule} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postRule(body?: Rule, options?: any) {
        return DefaultApiFp(this.configuration).postRule(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify an echo parameter
     * @summary Modify an echo parametr
     * @param {string} parameterId The identifier of the  echo parameter to retrieve.
     * @param {EchoParameter} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putEchoParameter(parameterId: string, body?: EchoParameter, options?: any) {
        return DefaultApiFp(this.configuration).putEchoParameter(parameterId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify a rule
     * @summary Modify a rule
     * @param {string} ruleId The identifier of the  echo parameter to retrieve.
     * @param {Rule} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putRule(ruleId: string, body?: Rule, options?: any) {
        return DefaultApiFp(this.configuration).putRule(ruleId, body, options).then((request) => request(this.axios, this.basePath));
    }

}


