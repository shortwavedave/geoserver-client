// tslint:disable
/**
 * Users and Groups
 * Organisation of security users and groups
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    enabled?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a group in the default user/group service.
         * @summary Delete a group
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupDefaultDelete: async (group: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling groupDefaultDelete.');
            }
            const localVarPath = `/usergroup/groups/{group}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a group in the default user/group service.
         * @summary Add a group
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupDefaultPost: async (group: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling groupDefaultPost.');
            }
            const localVarPath = `/usergroup/groups/{group}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a group in a particular user/group service.
         * @summary Delete a group
         * @param {string} serviceName the name of the user/group service
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupDelete: async (serviceName: string, group: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling groupDelete.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling groupDelete.');
            }
            const localVarPath = `/usergroup/service/{serviceName}/groups/{group}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a group in a particular user/group service.
         * @summary Add a group
         * @param {string} serviceName the name of the user/group service
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPost: async (serviceName: string, group: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling groupPost.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling groupPost.');
            }
            const localVarPath = `/usergroup/service/{serviceName}/groups/{group}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"group"}}`, encodeURIComponent(String(group)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query all groups in the default user/group service.
         * @summary Query all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDefaultGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/usergroup/groups/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query all groups in a particular user/group service.
         * @summary Query all groups
         * @param {string} serviceName the name of the group group service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet: async (serviceName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling groupsGet.');
            }
            const localVarPath = `/usergroup/service/{serviceName}/groups/`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user in the default user/group service.
         * @summary Delete a user
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDefaultDelete: async (user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling userDefaultDelete.');
            }
            const localVarPath = `/usergroup/users/{user}`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query a user in the default user/group service.
         * @summary Query a user
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDefaultGet: async (user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling userDefaultGet.');
            }
            const localVarPath = `/usergroup/users/{user}`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify a user in the default user/group service, unspecified fields remain unchanged.
         * @summary Modify a user
         * @param {string} user the name of the user
         * @param {User} userDefaultPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDefaultPost: async (user: string, userDefaultPostBody: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling userDefaultPost.');
            }
            // verify required parameter 'userDefaultPostBody' is not null or undefined
            if (userDefaultPostBody === null || userDefaultPostBody === undefined) {
                throw new RequiredError('userDefaultPostBody','Required parameter userDefaultPostBody was null or undefined when calling userDefaultPost.');
            }
            const localVarPath = `/usergroup/users/{user}`
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userDefaultPostBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userDefaultPostBody !== undefined ? userDefaultPostBody : {}) : (userDefaultPostBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user in a particular user/group service.
         * @summary Delete a user
         * @param {string} serviceName the name of the user/group service
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDelete: async (serviceName: string, user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling userDelete.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling userDelete.');
            }
            const localVarPath = `/usergroup/service/{serviceName}/users/{user}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query a user in a particular user/group service.
         * @summary Query a user
         * @param {string} serviceName the name of the user/group service
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet: async (serviceName: string, user: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling userGet.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling userGet.');
            }
            const localVarPath = `/usergroup/service/{serviceName}/users/{user}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modify a user in a particular user/group service, unspecified fields remain unchanged.
         * @summary Modify a user
         * @param {string} serviceName the name of the user/group service
         * @param {string} user the name of the user
         * @param {User} userPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost: async (serviceName: string, user: string, userPostBody: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling userPost.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling userPost.');
            }
            // verify required parameter 'userPostBody' is not null or undefined
            if (userPostBody === null || userPostBody === undefined) {
                throw new RequiredError('userPostBody','Required parameter userPostBody was null or undefined when calling userPost.');
            }
            const localVarPath = `/usergroup/service/{serviceName}/users/{user}`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)))
                .replace(`{${"user"}}`, encodeURIComponent(String(user)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userPostBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userPostBody !== undefined ? userPostBody : {}) : (userPostBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query all users in the default user/group service.
         * @summary Query all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDefaultGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/usergroup/users/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new user to the default user/group service
         * @summary Add a new user
         * @param {User} usersDefaultPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDefaultPost: async (usersDefaultPostBody: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersDefaultPostBody' is not null or undefined
            if (usersDefaultPostBody === null || usersDefaultPostBody === undefined) {
                throw new RequiredError('usersDefaultPostBody','Required parameter usersDefaultPostBody was null or undefined when calling usersDefaultPost.');
            }
            const localVarPath = `/usergroup/users/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof usersDefaultPostBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(usersDefaultPostBody !== undefined ? usersDefaultPostBody : {}) : (usersDefaultPostBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query all users in a particular user/group service.
         * @summary Query all users
         * @param {string} serviceName the name of the user/group service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (serviceName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling usersGet.');
            }
            const localVarPath = `/usergroup/service/{serviceName}/users/`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new user to a particular user/group service.
         * @summary Add a new user
         * @param {string} serviceName the name of the user/group service
         * @param {User} usersPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (serviceName: string, usersPostBody: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling usersPost.');
            }
            // verify required parameter 'usersPostBody' is not null or undefined
            if (usersPostBody === null || usersPostBody === undefined) {
                throw new RequiredError('usersPostBody','Required parameter usersPostBody was null or undefined when calling usersPost.');
            }
            const localVarPath = `/usergroup/service/{serviceName}/users/`
                .replace(`{${"serviceName"}}`, encodeURIComponent(String(serviceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof usersPostBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(usersPostBody !== undefined ? usersPostBody : {}) : (usersPostBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a group in the default user/group service.
         * @summary Delete a group
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupDefaultDelete(group: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).groupDefaultDelete(group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a group in the default user/group service.
         * @summary Add a group
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupDefaultPost(group: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).groupDefaultPost(group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a group in a particular user/group service.
         * @summary Delete a group
         * @param {string} serviceName the name of the user/group service
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupDelete(serviceName: string, group: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).groupDelete(serviceName, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a group in a particular user/group service.
         * @summary Add a group
         * @param {string} serviceName the name of the user/group service
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupPost(serviceName: string, group: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).groupPost(serviceName, group, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query all groups in the default user/group service.
         * @summary Query all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsDefaultGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).groupsDefaultGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query all groups in a particular user/group service.
         * @summary Query all groups
         * @param {string} serviceName the name of the group group service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGet(serviceName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).groupsGet(serviceName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a user in the default user/group service.
         * @summary Delete a user
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userDefaultDelete(user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).userDefaultDelete(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query a user in the default user/group service.
         * @summary Query a user
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userDefaultGet(user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).userDefaultGet(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify a user in the default user/group service, unspecified fields remain unchanged.
         * @summary Modify a user
         * @param {string} user the name of the user
         * @param {User} userDefaultPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userDefaultPost(user: string, userDefaultPostBody: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).userDefaultPost(user, userDefaultPostBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a user in a particular user/group service.
         * @summary Delete a user
         * @param {string} serviceName the name of the user/group service
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userDelete(serviceName: string, user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).userDelete(serviceName, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query a user in a particular user/group service.
         * @summary Query a user
         * @param {string} serviceName the name of the user/group service
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userGet(serviceName: string, user: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).userGet(serviceName, user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modify a user in a particular user/group service, unspecified fields remain unchanged.
         * @summary Modify a user
         * @param {string} serviceName the name of the user/group service
         * @param {string} user the name of the user
         * @param {User} userPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userPost(serviceName: string, user: string, userPostBody: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).userPost(serviceName, user, userPostBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query all users in the default user/group service.
         * @summary Query all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersDefaultGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).usersDefaultGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a new user to the default user/group service
         * @summary Add a new user
         * @param {User} usersDefaultPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersDefaultPost(usersDefaultPostBody: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).usersDefaultPost(usersDefaultPostBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query all users in a particular user/group service.
         * @summary Query all users
         * @param {string} serviceName the name of the user/group service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(serviceName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).usersGet(serviceName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a new user to a particular user/group service.
         * @summary Add a new user
         * @param {string} serviceName the name of the user/group service
         * @param {User} usersPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(serviceName: string, usersPostBody: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).usersPost(serviceName, usersPostBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete a group in the default user/group service.
         * @summary Delete a group
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupDefaultDelete(group: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).groupDefaultDelete(group, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a group in the default user/group service.
         * @summary Add a group
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupDefaultPost(group: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).groupDefaultPost(group, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a group in a particular user/group service.
         * @summary Delete a group
         * @param {string} serviceName the name of the user/group service
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupDelete(serviceName: string, group: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).groupDelete(serviceName, group, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a group in a particular user/group service.
         * @summary Add a group
         * @param {string} serviceName the name of the user/group service
         * @param {string} group the name of the group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPost(serviceName: string, group: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).groupPost(serviceName, group, options).then((request) => request(axios, basePath));
        },
        /**
         * Query all groups in the default user/group service.
         * @summary Query all groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsDefaultGet(options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).groupsDefaultGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Query all groups in a particular user/group service.
         * @summary Query all groups
         * @param {string} serviceName the name of the group group service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(serviceName: string, options?: any): AxiosPromise<Array<string>> {
            return DefaultApiFp(configuration).groupsGet(serviceName, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user in the default user/group service.
         * @summary Delete a user
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDefaultDelete(user: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).userDefaultDelete(user, options).then((request) => request(axios, basePath));
        },
        /**
         * Query a user in the default user/group service.
         * @summary Query a user
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDefaultGet(user: string, options?: any): AxiosPromise<User> {
            return DefaultApiFp(configuration).userDefaultGet(user, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify a user in the default user/group service, unspecified fields remain unchanged.
         * @summary Modify a user
         * @param {string} user the name of the user
         * @param {User} userDefaultPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDefaultPost(user: string, userDefaultPostBody: User, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).userDefaultPost(user, userDefaultPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user in a particular user/group service.
         * @summary Delete a user
         * @param {string} serviceName the name of the user/group service
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDelete(serviceName: string, user: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).userDelete(serviceName, user, options).then((request) => request(axios, basePath));
        },
        /**
         * Query a user in a particular user/group service.
         * @summary Query a user
         * @param {string} serviceName the name of the user/group service
         * @param {string} user the name of the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userGet(serviceName: string, user: string, options?: any): AxiosPromise<User> {
            return DefaultApiFp(configuration).userGet(serviceName, user, options).then((request) => request(axios, basePath));
        },
        /**
         * Modify a user in a particular user/group service, unspecified fields remain unchanged.
         * @summary Modify a user
         * @param {string} serviceName the name of the user/group service
         * @param {string} user the name of the user
         * @param {User} userPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userPost(serviceName: string, user: string, userPostBody: User, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).userPost(serviceName, user, userPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Query all users in the default user/group service.
         * @summary Query all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDefaultGet(options?: any): AxiosPromise<Array<User>> {
            return DefaultApiFp(configuration).usersDefaultGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new user to the default user/group service
         * @summary Add a new user
         * @param {User} usersDefaultPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDefaultPost(usersDefaultPostBody: User, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).usersDefaultPost(usersDefaultPostBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Query all users in a particular user/group service.
         * @summary Query all users
         * @param {string} serviceName the name of the user/group service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(serviceName: string, options?: any): AxiosPromise<Array<User>> {
            return DefaultApiFp(configuration).usersGet(serviceName, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new user to a particular user/group service.
         * @summary Add a new user
         * @param {string} serviceName the name of the user/group service
         * @param {User} usersPostBody the new user\&#39;s details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(serviceName: string, usersPostBody: User, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).usersPost(serviceName, usersPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Delete a group in the default user/group service.
     * @summary Delete a group
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    groupDefaultDelete(group: string, options?: any): AxiosPromise<void>;

    /**
     * Add a group in the default user/group service.
     * @summary Add a group
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    groupDefaultPost(group: string, options?: any): AxiosPromise<void>;

    /**
     * Delete a group in a particular user/group service.
     * @summary Delete a group
     * @param {string} serviceName the name of the user/group service
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    groupDelete(serviceName: string, group: string, options?: any): AxiosPromise<void>;

    /**
     * Add a group in a particular user/group service.
     * @summary Add a group
     * @param {string} serviceName the name of the user/group service
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    groupPost(serviceName: string, group: string, options?: any): AxiosPromise<void>;

    /**
     * Query all groups in the default user/group service.
     * @summary Query all groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    groupsDefaultGet(options?: any): AxiosPromise<Array<string>>;

    /**
     * Query all groups in a particular user/group service.
     * @summary Query all groups
     * @param {string} serviceName the name of the group group service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    groupsGet(serviceName: string, options?: any): AxiosPromise<Array<string>>;

    /**
     * Delete a user in the default user/group service.
     * @summary Delete a user
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    userDefaultDelete(user: string, options?: any): AxiosPromise<void>;

    /**
     * Query a user in the default user/group service.
     * @summary Query a user
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    userDefaultGet(user: string, options?: any): AxiosPromise<User>;

    /**
     * Modify a user in the default user/group service, unspecified fields remain unchanged.
     * @summary Modify a user
     * @param {string} user the name of the user
     * @param {User} userDefaultPostBody the new user\&#39;s details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    userDefaultPost(user: string, userDefaultPostBody: User, options?: any): AxiosPromise<void>;

    /**
     * Delete a user in a particular user/group service.
     * @summary Delete a user
     * @param {string} serviceName the name of the user/group service
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    userDelete(serviceName: string, user: string, options?: any): AxiosPromise<void>;

    /**
     * Query a user in a particular user/group service.
     * @summary Query a user
     * @param {string} serviceName the name of the user/group service
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    userGet(serviceName: string, user: string, options?: any): AxiosPromise<User>;

    /**
     * Modify a user in a particular user/group service, unspecified fields remain unchanged.
     * @summary Modify a user
     * @param {string} serviceName the name of the user/group service
     * @param {string} user the name of the user
     * @param {User} userPostBody the new user\&#39;s details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    userPost(serviceName: string, user: string, userPostBody: User, options?: any): AxiosPromise<void>;

    /**
     * Query all users in the default user/group service.
     * @summary Query all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    usersDefaultGet(options?: any): AxiosPromise<Array<User>>;

    /**
     * Add a new user to the default user/group service
     * @summary Add a new user
     * @param {User} usersDefaultPostBody the new user\&#39;s details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    usersDefaultPost(usersDefaultPostBody: User, options?: any): AxiosPromise<void>;

    /**
     * Query all users in a particular user/group service.
     * @summary Query all users
     * @param {string} serviceName the name of the user/group service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    usersGet(serviceName: string, options?: any): AxiosPromise<Array<User>>;

    /**
     * Add a new user to a particular user/group service.
     * @summary Add a new user
     * @param {string} serviceName the name of the user/group service
     * @param {User} usersPostBody the new user\&#39;s details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    usersPost(serviceName: string, usersPostBody: User, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Delete a group in the default user/group service.
     * @summary Delete a group
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupDefaultDelete(group: string, options?: any) {
        return DefaultApiFp(this.configuration).groupDefaultDelete(group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a group in the default user/group service.
     * @summary Add a group
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupDefaultPost(group: string, options?: any) {
        return DefaultApiFp(this.configuration).groupDefaultPost(group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a group in a particular user/group service.
     * @summary Delete a group
     * @param {string} serviceName the name of the user/group service
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupDelete(serviceName: string, group: string, options?: any) {
        return DefaultApiFp(this.configuration).groupDelete(serviceName, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a group in a particular user/group service.
     * @summary Add a group
     * @param {string} serviceName the name of the user/group service
     * @param {string} group the name of the group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupPost(serviceName: string, group: string, options?: any) {
        return DefaultApiFp(this.configuration).groupPost(serviceName, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query all groups in the default user/group service.
     * @summary Query all groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupsDefaultGet(options?: any) {
        return DefaultApiFp(this.configuration).groupsDefaultGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query all groups in a particular user/group service.
     * @summary Query all groups
     * @param {string} serviceName the name of the group group service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public groupsGet(serviceName: string, options?: any) {
        return DefaultApiFp(this.configuration).groupsGet(serviceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user in the default user/group service.
     * @summary Delete a user
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userDefaultDelete(user: string, options?: any) {
        return DefaultApiFp(this.configuration).userDefaultDelete(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query a user in the default user/group service.
     * @summary Query a user
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userDefaultGet(user: string, options?: any) {
        return DefaultApiFp(this.configuration).userDefaultGet(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify a user in the default user/group service, unspecified fields remain unchanged.
     * @summary Modify a user
     * @param {string} user the name of the user
     * @param {User} userDefaultPostBody the new user\&#39;s details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userDefaultPost(user: string, userDefaultPostBody: User, options?: any) {
        return DefaultApiFp(this.configuration).userDefaultPost(user, userDefaultPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user in a particular user/group service.
     * @summary Delete a user
     * @param {string} serviceName the name of the user/group service
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userDelete(serviceName: string, user: string, options?: any) {
        return DefaultApiFp(this.configuration).userDelete(serviceName, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query a user in a particular user/group service.
     * @summary Query a user
     * @param {string} serviceName the name of the user/group service
     * @param {string} user the name of the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userGet(serviceName: string, user: string, options?: any) {
        return DefaultApiFp(this.configuration).userGet(serviceName, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modify a user in a particular user/group service, unspecified fields remain unchanged.
     * @summary Modify a user
     * @param {string} serviceName the name of the user/group service
     * @param {string} user the name of the user
     * @param {User} userPostBody the new user\&#39;s details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userPost(serviceName: string, user: string, userPostBody: User, options?: any) {
        return DefaultApiFp(this.configuration).userPost(serviceName, user, userPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query all users in the default user/group service.
     * @summary Query all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersDefaultGet(options?: any) {
        return DefaultApiFp(this.configuration).usersDefaultGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new user to the default user/group service
     * @summary Add a new user
     * @param {User} usersDefaultPostBody the new user\&#39;s details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersDefaultPost(usersDefaultPostBody: User, options?: any) {
        return DefaultApiFp(this.configuration).usersDefaultPost(usersDefaultPostBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query all users in a particular user/group service.
     * @summary Query all users
     * @param {string} serviceName the name of the user/group service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersGet(serviceName: string, options?: any) {
        return DefaultApiFp(this.configuration).usersGet(serviceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new user to a particular user/group service.
     * @summary Add a new user
     * @param {string} serviceName the name of the user/group service
     * @param {User} usersPostBody the new user\&#39;s details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersPost(serviceName: string, usersPostBody: User, options?: any) {
        return DefaultApiFp(this.configuration).usersPost(serviceName, usersPostBody, options).then((request) => request(this.axios, this.basePath));
    }

}


