// tslint:disable
/**
 * GeoServer StructuredCoverageStores
 * A structured coverage store allows description of its \"granules\" and management of them.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * An attribute description
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * Name of the attribute
     * @type {string}
     * @memberof Attribute
     */
    name?: string;
    /**
     * Minimum number of occurences (0 for optional attribute)
     * @type {number}
     * @memberof Attribute
     */
    minOccurs?: number;
    /**
     * Maximumn number of occurences (normally 1)
     * @type {number}
     * @memberof Attribute
     */
    maxOccurs?: number;
    /**
     * If the attribute can be missing
     * @type {boolean}
     * @memberof Attribute
     */
    nillable?: boolean;
    /**
     * Name of the java class for the attribute
     * @type {string}
     * @memberof Attribute
     */
    binding?: string;
    /**
     * Length of the field
     * @type {number}
     * @memberof Attribute
     */
    length?: number;
}
/**
 *
 * @export
 * @interface Schema
 */
export interface Schema {
    /**
     * List of attributes
     * @type {Array<Attribute>}
     * @memberof Schema
     */
    attributes: Array<Attribute>;
    /**
     * Link to the list of granules
     * @type {string}
     * @memberof Schema
     */
    link: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Invalid, the index cannot be created or modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoverageStores: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows removing the specified granule
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} granuleId The granule ID
         * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot; and \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \&quot;metadata\&quot; delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
         * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStructuredCoverageGranule: async (workspace: string, store: string, coverage: string, granuleId: string, purge?: string, updateBBox?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteStructuredCoverageGranule.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling deleteStructuredCoverageGranule.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling deleteStructuredCoverageGranule.');
            }
            // verify required parameter 'granuleId' is not null or undefined
            if (granuleId === null || granuleId === undefined) {
                throw new RequiredError('granuleId','Required parameter granuleId was null or undefined when calling deleteStructuredCoverageGranule.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules/{granuleId}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)))
                .replace(`{${"granuleId"}}`, encodeURIComponent(String(granuleId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (purge !== undefined) {
                localVarQueryParameter['purge'] = purge;
            }

            if (updateBBox !== undefined) {
                localVarQueryParameter['updateBBox'] = updateBBox;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows removing one or more granules from the index
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} [filter] A CQL filter to reduce the returned granules
         * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot; and \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \&quot;metadata\&quot; delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
         * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStructuredCoverageGranules: async (workspace: string, store: string, coverage: string, filter?: string, purge?: string, updateBBox?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteStructuredCoverageGranules.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling deleteStructuredCoverageGranules.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling deleteStructuredCoverageGranules.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (purge !== undefined) {
                localVarQueryParameter['purge'] = purge;
            }

            if (updateBBox !== undefined) {
                localVarQueryParameter['updateBBox'] = updateBBox;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all the attributes associated to a particular coverage\'s granule. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
         * @summary Get the attributes of a particular granule
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} granuleId The granule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStructuredCoverageGranule: async (workspace: string, store: string, coverage: string, granuleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getStructuredCoverageGranule.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling getStructuredCoverageGranule.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling getStructuredCoverageGranule.');
            }
            // verify required parameter 'granuleId' is not null or undefined
            if (granuleId === null || granuleId === undefined) {
                throw new RequiredError('granuleId','Required parameter granuleId was null or undefined when calling getStructuredCoverageGranule.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules/{granuleId}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)))
                .replace(`{${"granuleId"}}`, encodeURIComponent(String(granuleId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all the attributes associated to a particular coverage\'s granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
         * @summary Get the attributes associated to the granules
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} [filter] A CQL filter to reduce the returned granules
         * @param {number} [offset] Used for paging, the start of the current page
         * @param {number} [limit] Used for paging, the number of items to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStructuredCoverageGranules: async (workspace: string, store: string, coverage: string, filter?: string, offset?: number, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getStructuredCoverageGranules.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling getStructuredCoverageGranules.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling getStructuredCoverageGranules.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all the attributes associated to a particular coverage\'s granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation.
         * @summary Get the information schema attached to the granules
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStructuredCoverageIndex: async (workspace: string, store: string, coverage: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getStructuredCoverageIndex.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling getStructuredCoverageIndex.');
            }
            // verify required parameter 'coverage' is not null or undefined
            if (coverage === null || coverage === undefined) {
                throw new RequiredError('coverage','Required parameter coverage was null or undefined when calling getStructuredCoverageIndex.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"coverage"}}`, encodeURIComponent(String(coverage)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStructuredCoverageGranule: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules/{granuleId}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStructuredCoverageGranules: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid, the index cannot be created or modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStructuredCoverageIndex: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStructuredCoverageGranule: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules/{granuleId}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStructuredCoverageGranules: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index/granules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid, the index cannot be created or modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStructuredCoverageIndex: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/coverages/{coverage}/index`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Invalid, the index cannot be created or modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCoverageStores(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteCoverageStores(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows removing the specified granule
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} granuleId The granule ID
         * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot; and \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \&quot;metadata\&quot; delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
         * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStructuredCoverageGranule(workspace: string, store: string, coverage: string, granuleId: string, purge?: string, updateBBox?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteStructuredCoverageGranule(workspace, store, coverage, granuleId, purge, updateBBox, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows removing one or more granules from the index
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} [filter] A CQL filter to reduce the returned granules
         * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot; and \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \&quot;metadata\&quot; delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
         * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStructuredCoverageGranules(workspace: string, store: string, coverage: string, filter?: string, purge?: string, updateBBox?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteStructuredCoverageGranules(workspace, store, coverage, filter, purge, updateBBox, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all the attributes associated to a particular coverage\'s granule. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
         * @summary Get the attributes of a particular granule
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} granuleId The granule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStructuredCoverageGranule(workspace: string, store: string, coverage: string, granuleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getStructuredCoverageGranule(workspace, store, coverage, granuleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all the attributes associated to a particular coverage\'s granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
         * @summary Get the attributes associated to the granules
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} [filter] A CQL filter to reduce the returned granules
         * @param {number} [offset] Used for paging, the start of the current page
         * @param {number} [limit] Used for paging, the number of items to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStructuredCoverageGranules(workspace: string, store: string, coverage: string, filter?: string, offset?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getStructuredCoverageGranules(workspace, store, coverage, filter, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all the attributes associated to a particular coverage\'s granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation.
         * @summary Get the information schema attached to the granules
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStructuredCoverageIndex(workspace: string, store: string, coverage: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Schema>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getStructuredCoverageIndex(workspace, store, coverage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStructuredCoverageGranule(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postStructuredCoverageGranule(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStructuredCoverageGranules(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postStructuredCoverageGranules(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid, the index cannot be created or modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStructuredCoverageIndex(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postStructuredCoverageIndex(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putStructuredCoverageGranule(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putStructuredCoverageGranule(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putStructuredCoverageGranules(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putStructuredCoverageGranules(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid, the index cannot be created or modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putStructuredCoverageIndex(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putStructuredCoverageIndex(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Invalid, the index cannot be created or modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoverageStores(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteCoverageStores(options).then((request) => request(axios, basePath));
        },
        /**
         * Allows removing the specified granule
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} granuleId The granule ID
         * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot; and \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \&quot;metadata\&quot; delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
         * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStructuredCoverageGranule(workspace: string, store: string, coverage: string, granuleId: string, purge?: string, updateBBox?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteStructuredCoverageGranule(workspace, store, coverage, granuleId, purge, updateBBox, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows removing one or more granules from the index
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} [filter] A CQL filter to reduce the returned granules
         * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot; and \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \&quot;metadata\&quot; delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
         * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStructuredCoverageGranules(workspace: string, store: string, coverage: string, filter?: string, purge?: string, updateBBox?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteStructuredCoverageGranules(workspace, store, coverage, filter, purge, updateBBox, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all the attributes associated to a particular coverage\'s granule. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
         * @summary Get the attributes of a particular granule
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} granuleId The granule ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStructuredCoverageGranule(workspace: string, store: string, coverage: string, granuleId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getStructuredCoverageGranule(workspace, store, coverage, granuleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all the attributes associated to a particular coverage\'s granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
         * @summary Get the attributes associated to the granules
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {string} [filter] A CQL filter to reduce the returned granules
         * @param {number} [offset] Used for paging, the start of the current page
         * @param {number} [limit] Used for paging, the number of items to be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStructuredCoverageGranules(workspace: string, store: string, coverage: string, filter?: string, offset?: number, limit?: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getStructuredCoverageGranules(workspace, store, coverage, filter, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all the attributes associated to a particular coverage\'s granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation.
         * @summary Get the information schema attached to the granules
         * @param {string} workspace The name of the worskpace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} coverage The name of the coverage to be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStructuredCoverageIndex(workspace: string, store: string, coverage: string, options?: any): AxiosPromise<Schema> {
            return DefaultApiFp(configuration).getStructuredCoverageIndex(workspace, store, coverage, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStructuredCoverageGranule(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postStructuredCoverageGranule(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStructuredCoverageGranules(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postStructuredCoverageGranules(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid, the index cannot be created or modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStructuredCoverageIndex(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postStructuredCoverageIndex(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStructuredCoverageGranule(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putStructuredCoverageGranule(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStructuredCoverageGranules(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putStructuredCoverageGranules(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid, the index cannot be created or modified
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStructuredCoverageIndex(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putStructuredCoverageIndex(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Invalid, the index cannot be created or modified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteCoverageStores(options?: any): AxiosPromise<void>;

    /**
     * Allows removing the specified granule
     * @param {string} workspace The name of the worskpace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} coverage The name of the coverage to be retrieved
     * @param {string} granuleId The granule ID
     * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot; and \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \&quot;metadata\&quot; delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
     * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteStructuredCoverageGranule(workspace: string, store: string, coverage: string, granuleId: string, purge?: string, updateBBox?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Allows removing one or more granules from the index
     * @param {string} workspace The name of the worskpace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} coverage The name of the coverage to be retrieved
     * @param {string} [filter] A CQL filter to reduce the returned granules
     * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot; and \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \&quot;metadata\&quot; delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
     * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteStructuredCoverageGranules(workspace: string, store: string, coverage: string, filter?: string, purge?: string, updateBBox?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Displays a list of all the attributes associated to a particular coverage\'s granule. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
     * @summary Get the attributes of a particular granule
     * @param {string} workspace The name of the worskpace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} coverage The name of the coverage to be retrieved
     * @param {string} granuleId The granule ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getStructuredCoverageGranule(workspace: string, store: string, coverage: string, granuleId: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a list of all the attributes associated to a particular coverage\'s granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
     * @summary Get the attributes associated to the granules
     * @param {string} workspace The name of the worskpace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} coverage The name of the coverage to be retrieved
     * @param {string} [filter] A CQL filter to reduce the returned granules
     * @param {number} [offset] Used for paging, the start of the current page
     * @param {number} [limit] Used for paging, the number of items to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getStructuredCoverageGranules(workspace: string, store: string, coverage: string, filter?: string, offset?: number, limit?: number, options?: any): AxiosPromise<void>;

    /**
     * Displays a list of all the attributes associated to a particular coverage\'s granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation.
     * @summary Get the information schema attached to the granules
     * @param {string} workspace The name of the worskpace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} coverage The name of the coverage to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getStructuredCoverageIndex(workspace: string, store: string, coverage: string, options?: any): AxiosPromise<Schema>;

    /**
     * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postStructuredCoverageGranule(options?: any): AxiosPromise<void>;

    /**
     * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postStructuredCoverageGranules(options?: any): AxiosPromise<void>;

    /**
     * Invalid, the index cannot be created or modified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postStructuredCoverageIndex(options?: any): AxiosPromise<void>;

    /**
     * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putStructuredCoverageGranule(options?: any): AxiosPromise<void>;

    /**
     * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putStructuredCoverageGranules(options?: any): AxiosPromise<void>;

    /**
     * Invalid, the index cannot be created or modified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putStructuredCoverageIndex(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Invalid, the index cannot be created or modified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCoverageStores(options?: any) {
        return DefaultApiFp(this.configuration).deleteCoverageStores(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows removing the specified granule
     * @param {string} workspace The name of the worskpace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} coverage The name of the coverage to be retrieved
     * @param {string} granuleId The granule ID
     * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot; and \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \&quot;metadata\&quot; delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
     * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStructuredCoverageGranule(workspace: string, store: string, coverage: string, granuleId: string, purge?: string, updateBBox?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteStructuredCoverageGranule(workspace, store, coverage, granuleId, purge, updateBBox, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows removing one or more granules from the index
     * @param {string} workspace The name of the worskpace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} coverage The name of the coverage to be retrieved
     * @param {string} [filter] A CQL filter to reduce the returned granules
     * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot; and \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved, only the registration in the mosaic is removed When set to \&quot;metadata\&quot; delete only auxiliary files and metadata (e.g. NetCDF sidecar indexes). It’s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
     * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStructuredCoverageGranules(workspace: string, store: string, coverage: string, filter?: string, purge?: string, updateBBox?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteStructuredCoverageGranules(workspace, store, coverage, filter, purge, updateBBox, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all the attributes associated to a particular coverage\'s granule. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
     * @summary Get the attributes of a particular granule
     * @param {string} workspace The name of the worskpace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} coverage The name of the coverage to be retrieved
     * @param {string} granuleId The granule ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStructuredCoverageGranule(workspace: string, store: string, coverage: string, granuleId: string, options?: any) {
        return DefaultApiFp(this.configuration).getStructuredCoverageGranule(workspace, store, coverage, granuleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all the attributes associated to a particular coverage\'s granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation. The XML output is actually WFS 1.0 GML, while the JSON output is GeoJSON
     * @summary Get the attributes associated to the granules
     * @param {string} workspace The name of the worskpace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} coverage The name of the coverage to be retrieved
     * @param {string} [filter] A CQL filter to reduce the returned granules
     * @param {number} [offset] Used for paging, the start of the current page
     * @param {number} [limit] Used for paging, the number of items to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStructuredCoverageGranules(workspace: string, store: string, coverage: string, filter?: string, offset?: number, limit?: number, options?: any) {
        return DefaultApiFp(this.configuration).getStructuredCoverageGranules(workspace, store, coverage, filter, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all the attributes associated to a particular coverage\'s granules. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/index.xml\" for XML). Defaults to XML representation.
     * @summary Get the information schema attached to the granules
     * @param {string} workspace The name of the worskpace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} coverage The name of the coverage to be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStructuredCoverageIndex(workspace: string, store: string, coverage: string, options?: any) {
        return DefaultApiFp(this.configuration).getStructuredCoverageIndex(workspace, store, coverage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postStructuredCoverageGranule(options?: any) {
        return DefaultApiFp(this.configuration).postStructuredCoverageGranule(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postStructuredCoverageGranules(options?: any) {
        return DefaultApiFp(this.configuration).postStructuredCoverageGranules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid, the index cannot be created or modified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postStructuredCoverageIndex(options?: any) {
        return DefaultApiFp(this.configuration).postStructuredCoverageIndex(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putStructuredCoverageGranule(options?: any) {
        return DefaultApiFp(this.configuration).putStructuredCoverageGranule(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid, the granules cannot harvested here, use a POST request on /workspaces/{workspace}/coveragestores/{store}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putStructuredCoverageGranules(options?: any) {
        return DefaultApiFp(this.configuration).putStructuredCoverageGranules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid, the index cannot be created or modified
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putStructuredCoverageIndex(options?: any) {
        return DefaultApiFp(this.configuration).putStructuredCoverageIndex(options).then((request) => request(this.axios, this.basePath));
    }

}


