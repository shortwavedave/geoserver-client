// tslint:disable
/**
 * OWS Services
 * An OWS service refers to any of the OGC services that GeoServer supports, such as WFS, WMS, and WCS. These endpoints controls the settings of these services.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface WCSInfo
 */
export interface WCSInfo {
    /**
     * Status of the service
     * @type {boolean}
     * @memberof WCSInfo
     */
    enabled?: boolean;
    /**
     * Name of the service. This value is unique among all instances of ServiceInfo and can be used as an identifier.
     * @type {string}
     * @memberof WCSInfo
     */
    name?: string;
    /**
     * Title of the service
     * @type {string}
     * @memberof WCSInfo
     */
    title?: string;
    /**
     * Maintainer of the service
     * @type {string}
     * @memberof WCSInfo
     */
    maintainer?: string;
    /**
     * Description of the service
     * @type {string}
     * @memberof WCSInfo
     */
    abstrct?: string;
    /**
     * Access constraints
     * @type {string}
     * @memberof WCSInfo
     */
    accessConstraints?: string;
    /**
     * Any fees associated with the service
     * @type {string}
     * @memberof WCSInfo
     */
    fees?: string;
    /**
     * 
     * @type {WMSInfoVersions}
     * @memberof WCSInfo
     */
    versions?: WMSInfoVersions;
    /**
     * Keywords associated with the service.
     * @type {Array<string>}
     * @memberof WCSInfo
     */
    keywords?: Array<string>;
    /**
     * 
     * @type {Array<WMSInfoMetadataLink>}
     * @memberof WCSInfo
     */
    metadataLink?: Array<WMSInfoMetadataLink>;
    /**
     * Status of service CITE compliance
     * @type {boolean}
     * @memberof WCSInfo
     */
    citeCompliant?: boolean;
    /**
     * URL resource
     * @type {string}
     * @memberof WCSInfo
     */
    onlineResource?: string;
    /**
     * Base URL for the schemas describing the service
     * @type {string}
     * @memberof WCSInfo
     */
    schemaBaseURL?: string;
    /**
     * Flag indicating if the service should be verbose
     * @type {boolean}
     * @memberof WCSInfo
     */
    verbose?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WCSInfo
     */
    gmlPrefixing?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WCSInfo
     */
    latLon?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WCSInfo
     */
    maxInputMemory?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WCSInfo
     */
    maxOutputMemory?: boolean;
}
/**
 * 
 * @export
 * @interface WFSInfo
 */
export interface WFSInfo {
    /**
     * Status of the service
     * @type {boolean}
     * @memberof WFSInfo
     */
    enabled?: boolean;
    /**
     * Name of the service. This value is unique among all instances of ServiceInfo and can be used as an identifier.
     * @type {string}
     * @memberof WFSInfo
     */
    name?: string;
    /**
     * Title of the service
     * @type {string}
     * @memberof WFSInfo
     */
    title?: string;
    /**
     * Maintainer of the service
     * @type {string}
     * @memberof WFSInfo
     */
    maintainer?: string;
    /**
     * Description of the service
     * @type {string}
     * @memberof WFSInfo
     */
    abstrct?: string;
    /**
     * Access constraints
     * @type {string}
     * @memberof WFSInfo
     */
    accessConstraints?: string;
    /**
     * Any fees associated with the service
     * @type {string}
     * @memberof WFSInfo
     */
    fees?: string;
    /**
     * 
     * @type {WMSInfoVersions}
     * @memberof WFSInfo
     */
    versions?: WMSInfoVersions;
    /**
     * Keywords associated with the service.
     * @type {Array<string>}
     * @memberof WFSInfo
     */
    keywords?: Array<string>;
    /**
     * 
     * @type {Array<WFSInfoMetadataLink>}
     * @memberof WFSInfo
     */
    metadataLink?: Array<WFSInfoMetadataLink>;
    /**
     * Status of service CITE compliance
     * @type {boolean}
     * @memberof WFSInfo
     */
    citeCompliant?: boolean;
    /**
     * URL resource
     * @type {string}
     * @memberof WFSInfo
     */
    onlineResource?: string;
    /**
     * Base URL for the schemas describing the service
     * @type {string}
     * @memberof WFSInfo
     */
    schemaBaseURL?: string;
    /**
     * Flag indicating if the service should be verbose
     * @type {boolean}
     * @memberof WFSInfo
     */
    verbose?: boolean;
    /**
     * 
     * @type {WFSInfoGml}
     * @memberof WFSInfo
     */
    gml?: WFSInfoGml;
    /**
     * Level of service provided by the WFS
     * @type {string}
     * @memberof WFSInfo
     */
    serviceLevel?: WFSInfoServiceLevelEnum;
    /**
     * Global cap on the number of features to allow when processing a request
     * @type {number}
     * @memberof WFSInfo
     */
    maxFeatures?: number;
    /**
     * Flag which determines if gml:bounds elements should be encoded at the feature level in GML output
     * @type {boolean}
     * @memberof WFSInfo
     */
    featureBounding?: boolean;
    /**
     * Flag that determines the encoding of the WFS schemaLocation. True if the WFS schemaLocation should refer to the canonical location, false if the WFS schemaLocation should refer to a copy served by GeoServer.
     * @type {boolean}
     * @memberof WFSInfo
     */
    canonicalSchemaLocation?: boolean;
    /**
     * Flag that determines encoding of featureMember or featureMembers. True if the featureMember should be encoded False if the featureMembers should be encoded.
     * @type {boolean}
     * @memberof WFSInfo
     */
    encodeFeatureMember?: boolean;
    /**
     * Flag that determines if WFS hit requests (counts) will ignore the maximum features limit for this server
     * @type {boolean}
     * @memberof WFSInfo
     */
    hitsIgnoreMaxFeatures?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum WFSInfoServiceLevelEnum {
    BASIC = 'BASIC',
    TRANSACTIONAL = 'TRANSACTIONAL',
    COMPLETE = 'COMPLETE'
}

/**
 * A map of WFS version to GML encoding configuration
 * @export
 * @interface WFSInfoGml
 */
export interface WFSInfoGml {
    /**
     * 
     * @type {Array<WFSInfoGmlEntry>}
     * @memberof WFSInfoGml
     */
    entry?: Array<WFSInfoGmlEntry>;
}
/**
 * 
 * @export
 * @interface WFSInfoGmlEntry
 */
export interface WFSInfoGmlEntry {
    /**
     * 
     * @type {string}
     * @memberof WFSInfoGmlEntry
     */
    version?: WFSInfoGmlEntryVersionEnum;
    /**
     * 
     * @type {WFSInfoGmlGml}
     * @memberof WFSInfoGmlEntry
     */
    gml?: WFSInfoGmlGml;
}

/**
    * @export
    * @enum {string}
    */
export enum WFSInfoGmlEntryVersionEnum {
    _100 = '1.0.0',
    _110 = '1.1.0',
    _200 = '2.0.0'
}

/**
 * Enumeration for srsName style
 * @export
 * @interface WFSInfoGmlGml
 */
export interface WFSInfoGmlGml {
    /**
     * 
     * @type {Array<string>}
     * @memberof WFSInfoGmlGml
     */
    srsNameStyle?: Array<WFSInfoGmlGmlSrsNameStyleEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum WFSInfoGmlGmlSrsNameStyleEnum {
    NORMAL = 'NORMAL',
    XML = 'XML',
    URN = 'URN',
    URN2 = 'URN2',
    URL = 'URL'
}

/**
 * 
 * @export
 * @interface WFSInfoMetadataLink
 */
export interface WFSInfoMetadataLink {
    /**
     * Metadata key
     * @type {string}
     * @memberof WFSInfoMetadataLink
     */
    key?: WFSInfoMetadataLinkKeyEnum;
    /**
     * Metadata value
     * @type {string}
     * @memberof WFSInfoMetadataLink
     */
    text?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WFSInfoMetadataLinkKeyEnum {
    SvgAntiAlias = 'svgAntiAlias',
    SvgRenderer = 'svgRenderer'
}

/**
 * 
 * @export
 * @interface WMSInfo
 */
export interface WMSInfo {
    /**
     * Status of the service
     * @type {boolean}
     * @memberof WMSInfo
     */
    enabled?: boolean;
    /**
     * Name of the service. This value is unique among all instances of ServiceInfo and can be used as an identifier.
     * @type {string}
     * @memberof WMSInfo
     */
    name?: string;
    /**
     * Title of the service
     * @type {string}
     * @memberof WMSInfo
     */
    title?: string;
    /**
     * Workspace the service is specific or local to. Will not exist if the service is global.
     * @type {string}
     * @memberof WMSInfo
     */
    workspace?: string;
    /**
     * maintainer of the service
     * @type {string}
     * @memberof WMSInfo
     */
    maintainer?: string;
    /**
     * description of the service
     * @type {string}
     * @memberof WMSInfo
     */
    abstrct?: string;
    /**
     * 
     * @type {string}
     * @memberof WMSInfo
     */
    accessConstraints?: string;
    /**
     * 
     * @type {string}
     * @memberof WMSInfo
     */
    fees?: string;
    /**
     * 
     * @type {WMSInfoVersions}
     * @memberof WMSInfo
     */
    versions?: WMSInfoVersions;
    /**
     * Keywords associated with the service.
     * @type {Array<string>}
     * @memberof WMSInfo
     */
    keywords?: Array<string>;
    /**
     * Status of service CITE compliance.
     * @type {boolean}
     * @memberof WMSInfo
     */
    citeCompliant?: boolean;
    /**
     * 
     * @type {string}
     * @memberof WMSInfo
     */
    onlineResource?: string;
    /**
     * The base url for the schemas describing the service.
     * @type {string}
     * @memberof WMSInfo
     */
    schemaBaseURL?: string;
    /**
     * Flag indicating if the service should be verbose or not.
     * @type {boolean}
     * @memberof WMSInfo
     */
    verbose?: boolean;
    /**
     * 
     * @type {Array<WMSInfoMetadataLink>}
     * @memberof WMSInfo
     */
    metadataLink?: Array<WMSInfoMetadataLink>;
    /**
     * 
     * @type {WMSInfoWatermark}
     * @memberof WMSInfo
     */
    watermark?: WMSInfoWatermark;
    /**
     * 
     * @type {string}
     * @memberof WMSInfo
     */
    interpolation?: WMSInfoInterpolationEnum;
    /**
     * Flag indicating if getFeatureInfo MIME type checking is enabled
     * @type {boolean}
     * @memberof WMSInfo
     */
    getFeatureInfoMimeTypeCheckingEnabled?: boolean;
    /**
     * Flag indicating if getMap MIME type checking is enabled.
     * @type {boolean}
     * @memberof WMSInfo
     */
    getMapMimeTypeCheckingEnabled?: boolean;
    /**
     * status of dynamic styling (SLD and SLD_BODY params) allowance
     * @type {boolean}
     * @memberof WMSInfo
     */
    dynamicStylingDisabled?: boolean;
    /**
     * Maximum search radius for GetFeatureInfo
     * @type {number}
     * @memberof WMSInfo
     */
    maxBuffer?: number;
    /**
     * Max amount of memory, in kilobytes, that each WMS request can allocate (each output format will make a best effort attempt to respect it, but there are no guarantees). 0 indicates no limit.
     * @type {number}
     * @memberof WMSInfo
     */
    maxRequestMemory?: number;
    /**
     * Max time, in seconds, a WMS request is allowed to spend rendering the map. Various output formats will do a best effort to respect it (raster formats, for example, will account just rendering time, but not image encoding time).
     * @type {number}
     * @memberof WMSInfo
     */
    maxRenderingTime?: number;
    /**
     * Max number of rendering errors that will be tolerated before stating the rendering operation failed by throwing a service exception back to the client
     * @type {number}
     * @memberof WMSInfo
     */
    maxRenderingErrors?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum WMSInfoInterpolationEnum {
    Nearest = 'Nearest',
    Bilinear = 'Bilinear',
    Bicubic = 'Bicubic'
}

/**
 * 
 * @export
 * @interface WMSInfoMetadataLink
 */
export interface WMSInfoMetadataLink {
    /**
     * Metadata key
     * @type {string}
     * @memberof WMSInfoMetadataLink
     */
    key?: string;
    /**
     * Metadata value
     * @type {string}
     * @memberof WMSInfoMetadataLink
     */
    text?: string;
}
/**
 * The versions of the service that are available.
 * @export
 * @interface WMSInfoVersions
 */
export interface WMSInfoVersions {
    /**
     * 
     * @type {Array<string>}
     * @memberof WMSInfoVersions
     */
    org_geotools_util_Version?: Array<string>;
}
/**
 * Watermarking configuration
 * @export
 * @interface WMSInfoWatermark
 */
export interface WMSInfoWatermark {
    /**
     * Flag indicating if watermarking is enabled
     * @type {boolean}
     * @memberof WMSInfoWatermark
     */
    enabled?: boolean;
    /**
     * Position of the watermark
     * @type {string}
     * @memberof WMSInfoWatermark
     */
    position?: WMSInfoWatermarkPositionEnum;
    /**
     * The transparency of the watermark logo, ranging from 0 to 255
     * @type {number}
     * @memberof WMSInfoWatermark
     */
    transparency?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum WMSInfoWatermarkPositionEnum {
    TOPLEFT = 'TOP_LEFT',
    TOPCENTER = 'TOP_CENTER',
    TOPRIGHT = 'TOP_RIGHT',
    MIDLEFT = 'MID_LEFT',
    MIDCENTER = 'MID_CENTER',
    MIDRIGHT = 'MID_RIGHT',
    BOTLEFT = 'BOT_LEFT',
    BOTCENTER = 'BOT_CENTER',
    BOTRIGHT = 'BOT_RIGHT'
}

/**
 * 
 * @export
 * @interface WMTSInfo
 */
export interface WMTSInfo {
    /**
     * Status of the service
     * @type {boolean}
     * @memberof WMTSInfo
     */
    enabled?: boolean;
    /**
     * Name of the service. This value is unique among all instances of ServiceInfo and can be used as an identifier.
     * @type {string}
     * @memberof WMTSInfo
     */
    name?: string;
    /**
     * Title of the service
     * @type {string}
     * @memberof WMTSInfo
     */
    title?: string;
    /**
     * Maintainer of the service
     * @type {string}
     * @memberof WMTSInfo
     */
    maintainer?: string;
    /**
     * Description of the service
     * @type {string}
     * @memberof WMTSInfo
     */
    abstrct?: string;
    /**
     * Access constraints
     * @type {string}
     * @memberof WMTSInfo
     */
    accessConstraints?: string;
    /**
     * Any fees associated with the service
     * @type {string}
     * @memberof WMTSInfo
     */
    fees?: string;
    /**
     * 
     * @type {WMSInfoVersions}
     * @memberof WMTSInfo
     */
    versions?: WMSInfoVersions;
    /**
     * Keywords associated with the service.
     * @type {Array<string>}
     * @memberof WMTSInfo
     */
    keywords?: Array<string>;
    /**
     * 
     * @type {Array<WMSInfoMetadataLink>}
     * @memberof WMTSInfo
     */
    metadataLink?: Array<WMSInfoMetadataLink>;
    /**
     * Status of service CITE compliance
     * @type {boolean}
     * @memberof WMTSInfo
     */
    citeCompliant?: boolean;
    /**
     * URL resource
     * @type {string}
     * @memberof WMTSInfo
     */
    onlineResource?: string;
    /**
     * Base URL for the schemas describing the service
     * @type {string}
     * @memberof WMTSInfo
     */
    schemaBaseURL?: string;
    /**
     * Flag indicating if the service should be verbose
     * @type {boolean}
     * @memberof WMTSInfo
     */
    verbose?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWCSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wcs/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a workspace-specific WCS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWCSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWCSWorkspaceSettings.');
            }
            const localVarPath = `/services/wcs/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWFSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wfs/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a workspace-specific WFS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWFSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWFSWorkspaceSettings.');
            }
            const localVarPath = `/services/wfs/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wms/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a workspace-specific WMS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWMSWorkspaceSettings.');
            }
            const localVarPath = `/services/wms/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wmts/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a workspace-specific WMTS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWMTSWorkspaceSettings.');
            }
            const localVarPath = `/services/wmts/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves Web Coverage Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWCSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wcs/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves Web Coverage Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWCSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWCSWorkspaceSettings.');
            }
            const localVarPath = `/services/wcs/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves Web Feature Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWFSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wfs/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves Web Feature Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWFSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWFSWorkspaceSettings.');
            }
            const localVarPath = `/services/wfs/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves Web Map Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wms/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves Web Map Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWMSWorkspaceSettings.');
            }
            const localVarPath = `/services/wms/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves Web Map Tile Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wmts/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves Web Map Tile Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWMTSWorkspaceSettings.');
            }
            const localVarPath = `/services/wmts/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWCSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wcs/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWCSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWCSWorkspaceSettings.');
            }
            const localVarPath = `/services/wcs/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWFSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wfs/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWFSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWFSWorkspaceSettings.');
            }
            const localVarPath = `/services/wfs/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wms/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWMSWorkspaceSettings.');
            }
            const localVarPath = `/services/wms/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wmts/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWMTSWorkspaceSettings.');
            }
            const localVarPath = `/services/wmts/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits a global WCS setting.
         * @param {WCSInfo} wCSSettingsBody Body of the WCS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWCSSettings: async (wCSSettingsBody: WCSInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wCSSettingsBody' is not null or undefined
            if (wCSSettingsBody === null || wCSSettingsBody === undefined) {
                throw new RequiredError('wCSSettingsBody','Required parameter wCSSettingsBody was null or undefined when calling putWCSSettings.');
            }
            const localVarPath = `/services/wcs/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wCSSettingsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wCSSettingsBody !== undefined ? wCSSettingsBody : {}) : (wCSSettingsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits a workspace-specific WCS setting.
         * @param {string} workspace The workspace name
         * @param {WCSInfo} wCSSettingsBody Body of the WCS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWCSWorkspaceSettings: async (workspace: string, wCSSettingsBody: WCSInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWCSWorkspaceSettings.');
            }
            // verify required parameter 'wCSSettingsBody' is not null or undefined
            if (wCSSettingsBody === null || wCSSettingsBody === undefined) {
                throw new RequiredError('wCSSettingsBody','Required parameter wCSSettingsBody was null or undefined when calling putWCSWorkspaceSettings.');
            }
            const localVarPath = `/services/wcs/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wCSSettingsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wCSSettingsBody !== undefined ? wCSSettingsBody : {}) : (wCSSettingsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits a global WFS setting.
         * @param {WFSInfo} wFSSettingsBody Body of the WFS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWFSSettings: async (wFSSettingsBody: WFSInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wFSSettingsBody' is not null or undefined
            if (wFSSettingsBody === null || wFSSettingsBody === undefined) {
                throw new RequiredError('wFSSettingsBody','Required parameter wFSSettingsBody was null or undefined when calling putWFSSettings.');
            }
            const localVarPath = `/services/wfs/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wFSSettingsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wFSSettingsBody !== undefined ? wFSSettingsBody : {}) : (wFSSettingsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits a workspace-specific WFS setting.
         * @param {string} workspace The workspace name
         * @param {WFSInfo} wFSSettingsBody Body of the WFS settings layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWFSWorkspaceSettings: async (workspace: string, wFSSettingsBody: WFSInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWFSWorkspaceSettings.');
            }
            // verify required parameter 'wFSSettingsBody' is not null or undefined
            if (wFSSettingsBody === null || wFSSettingsBody === undefined) {
                throw new RequiredError('wFSSettingsBody','Required parameter wFSSettingsBody was null or undefined when calling putWFSWorkspaceSettings.');
            }
            const localVarPath = `/services/wfs/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wFSSettingsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wFSSettingsBody !== undefined ? wFSSettingsBody : {}) : (wFSSettingsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits a global WMS setting.
         * @param {WMSInfo} wMSSettingsBody Body of the WMS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSSettings: async (wMSSettingsBody: WMSInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wMSSettingsBody' is not null or undefined
            if (wMSSettingsBody === null || wMSSettingsBody === undefined) {
                throw new RequiredError('wMSSettingsBody','Required parameter wMSSettingsBody was null or undefined when calling putWMSSettings.');
            }
            const localVarPath = `/services/wms/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMSSettingsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMSSettingsBody !== undefined ? wMSSettingsBody : {}) : (wMSSettingsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits a workspace-specific WMS setting.
         * @param {string} workspace The workspace name
         * @param {WMSInfo} wMSSettingsBody Body of the WMS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSWorkspaceSettings: async (workspace: string, wMSSettingsBody: WMSInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWMSWorkspaceSettings.');
            }
            // verify required parameter 'wMSSettingsBody' is not null or undefined
            if (wMSSettingsBody === null || wMSSettingsBody === undefined) {
                throw new RequiredError('wMSSettingsBody','Required parameter wMSSettingsBody was null or undefined when calling putWMSWorkspaceSettings.');
            }
            const localVarPath = `/services/wms/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMSSettingsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMSSettingsBody !== undefined ? wMSSettingsBody : {}) : (wMSSettingsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits a global WMTS setting.
         * @param {WMTSInfo} wMTSSettingsBody Body of the WMTS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSSettings: async (wMTSSettingsBody: WMTSInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wMTSSettingsBody' is not null or undefined
            if (wMTSSettingsBody === null || wMTSSettingsBody === undefined) {
                throw new RequiredError('wMTSSettingsBody','Required parameter wMTSSettingsBody was null or undefined when calling putWMTSSettings.');
            }
            const localVarPath = `/services/wmts/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMTSSettingsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMTSSettingsBody !== undefined ? wMTSSettingsBody : {}) : (wMTSSettingsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits a workspace-specific WMTS setting.
         * @param {string} workspace The workspace name
         * @param {WMTSInfo} wMTSSettingsBody Body of the WMTS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSWorkspaceSettings: async (workspace: string, wMTSSettingsBody: WMTSInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWMTSWorkspaceSettings.');
            }
            // verify required parameter 'wMTSSettingsBody' is not null or undefined
            if (wMTSSettingsBody === null || wMTSSettingsBody === undefined) {
                throw new RequiredError('wMTSSettingsBody','Required parameter wMTSSettingsBody was null or undefined when calling putWMTSWorkspaceSettings.');
            }
            const localVarPath = `/services/wmts/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMTSSettingsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMTSSettingsBody !== undefined ? wMTSSettingsBody : {}) : (wMTSSettingsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWCSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWCSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a workspace-specific WCS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWCSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWCSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWFSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWFSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a workspace-specific WFS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWFSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWFSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a workspace-specific WMS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMTSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMTSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a workspace-specific WMTS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMTSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMTSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves Web Coverage Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWCSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WCSInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWCSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves Web Coverage Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWCSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WCSInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWCSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves Web Feature Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWFSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WFSInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWFSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves Web Feature Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWFSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WFSInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWFSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves Web Map Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WMSInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves Web Map Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WMSInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves Web Map Tile Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMTSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WMTSInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMTSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves Web Map Tile Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMTSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WMTSInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMTSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWCSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWCSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWCSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWCSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWFSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWFSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWFSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWFSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMTSSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMTSSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMTSWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMTSWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits a global WCS setting.
         * @param {WCSInfo} wCSSettingsBody Body of the WCS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWCSSettings(wCSSettingsBody: WCSInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWCSSettings(wCSSettingsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits a workspace-specific WCS setting.
         * @param {string} workspace The workspace name
         * @param {WCSInfo} wCSSettingsBody Body of the WCS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWCSWorkspaceSettings(workspace: string, wCSSettingsBody: WCSInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWCSWorkspaceSettings(workspace, wCSSettingsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits a global WFS setting.
         * @param {WFSInfo} wFSSettingsBody Body of the WFS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWFSSettings(wFSSettingsBody: WFSInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWFSSettings(wFSSettingsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits a workspace-specific WFS setting.
         * @param {string} workspace The workspace name
         * @param {WFSInfo} wFSSettingsBody Body of the WFS settings layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWFSWorkspaceSettings(workspace: string, wFSSettingsBody: WFSInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWFSWorkspaceSettings(workspace, wFSSettingsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits a global WMS setting.
         * @param {WMSInfo} wMSSettingsBody Body of the WMS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMSSettings(wMSSettingsBody: WMSInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMSSettings(wMSSettingsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits a workspace-specific WMS setting.
         * @param {string} workspace The workspace name
         * @param {WMSInfo} wMSSettingsBody Body of the WMS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMSWorkspaceSettings(workspace: string, wMSSettingsBody: WMSInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMSWorkspaceSettings(workspace, wMSSettingsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits a global WMTS setting.
         * @param {WMTSInfo} wMTSSettingsBody Body of the WMTS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMTSSettings(wMTSSettingsBody: WMTSInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMTSSettings(wMTSSettingsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits a workspace-specific WMTS setting.
         * @param {string} workspace The workspace name
         * @param {WMTSInfo} wMTSSettingsBody Body of the WMTS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMTSWorkspaceSettings(workspace: string, wMTSSettingsBody: WMTSInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMTSWorkspaceSettings(workspace, wMTSSettingsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWCSSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWCSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a workspace-specific WCS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWCSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWCSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWFSSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWFSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a workspace-specific WFS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWFSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWFSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a workspace-specific WMS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMTSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a workspace-specific WMTS setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMTSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves Web Coverage Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWCSSettings(options?: any): AxiosPromise<WCSInfo> {
            return DefaultApiFp(configuration).getWCSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves Web Coverage Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWCSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<WCSInfo> {
            return DefaultApiFp(configuration).getWCSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves Web Feature Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWFSSettings(options?: any): AxiosPromise<WFSInfo> {
            return DefaultApiFp(configuration).getWFSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves Web Feature Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWFSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<WFSInfo> {
            return DefaultApiFp(configuration).getWFSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves Web Map Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSSettings(options?: any): AxiosPromise<WMSInfo> {
            return DefaultApiFp(configuration).getWMSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves Web Map Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<WMSInfo> {
            return DefaultApiFp(configuration).getWMSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves Web Map Tile Service settings globally for the server.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSSettings(options?: any): AxiosPromise<WMTSInfo> {
            return DefaultApiFp(configuration).getWMTSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves Web Map Tile Service settings for a given workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<WMTSInfo> {
            return DefaultApiFp(configuration).getWMTSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWCSSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWCSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWCSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWCSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWFSSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWFSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWFSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWFSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMTSSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a service setting.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMTSWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits a global WCS setting.
         * @param {WCSInfo} wCSSettingsBody Body of the WCS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWCSSettings(wCSSettingsBody: WCSInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWCSSettings(wCSSettingsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits a workspace-specific WCS setting.
         * @param {string} workspace The workspace name
         * @param {WCSInfo} wCSSettingsBody Body of the WCS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWCSWorkspaceSettings(workspace: string, wCSSettingsBody: WCSInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWCSWorkspaceSettings(workspace, wCSSettingsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits a global WFS setting.
         * @param {WFSInfo} wFSSettingsBody Body of the WFS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWFSSettings(wFSSettingsBody: WFSInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWFSSettings(wFSSettingsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits a workspace-specific WFS setting.
         * @param {string} workspace The workspace name
         * @param {WFSInfo} wFSSettingsBody Body of the WFS settings layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWFSWorkspaceSettings(workspace: string, wFSSettingsBody: WFSInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWFSWorkspaceSettings(workspace, wFSSettingsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits a global WMS setting.
         * @param {WMSInfo} wMSSettingsBody Body of the WMS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSSettings(wMSSettingsBody: WMSInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMSSettings(wMSSettingsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits a workspace-specific WMS setting.
         * @param {string} workspace The workspace name
         * @param {WMSInfo} wMSSettingsBody Body of the WMS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMSWorkspaceSettings(workspace: string, wMSSettingsBody: WMSInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMSWorkspaceSettings(workspace, wMSSettingsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits a global WMTS setting.
         * @param {WMTSInfo} wMTSSettingsBody Body of the WMTS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSSettings(wMTSSettingsBody: WMTSInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMTSSettings(wMTSSettingsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits a workspace-specific WMTS setting.
         * @param {string} workspace The workspace name
         * @param {WMTSInfo} wMTSSettingsBody Body of the WMTS settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSWorkspaceSettings(workspace: string, wMTSSettingsBody: WMTSInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMTSWorkspaceSettings(workspace, wMTSSettingsBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Invalid. Use PUT to edit settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWCSSettings(options?: any): AxiosPromise<void>;

    /**
     * Deletes a workspace-specific WCS setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWCSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWFSSettings(options?: any): AxiosPromise<void>;

    /**
     * Deletes a workspace-specific WFS setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWFSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMSSettings(options?: any): AxiosPromise<void>;

    /**
     * Deletes a workspace-specific WMS setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMTSSettings(options?: any): AxiosPromise<void>;

    /**
     * Deletes a workspace-specific WMTS setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMTSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Retrieves Web Coverage Service settings globally for the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWCSSettings(options?: any): AxiosPromise<WCSInfo>;

    /**
     * Retrieves Web Coverage Service settings for a given workspace.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWCSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<WCSInfo>;

    /**
     * Retrieves Web Feature Service settings globally for the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWFSSettings(options?: any): AxiosPromise<WFSInfo>;

    /**
     * Retrieves Web Feature Service settings for a given workspace.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWFSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<WFSInfo>;

    /**
     * Retrieves Web Map Service settings globally for the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMSSettings(options?: any): AxiosPromise<WMSInfo>;

    /**
     * Retrieves Web Map Service settings for a given workspace.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<WMSInfo>;

    /**
     * Retrieves Web Map Tile Service settings globally for the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMTSSettings(options?: any): AxiosPromise<WMTSInfo>;

    /**
     * Retrieves Web Map Tile Service settings for a given workspace.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMTSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<WMTSInfo>;

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWCSSettings(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWCSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWFSSettings(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWFSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMSSettings(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMTSSettings(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMTSWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Edits a global WCS setting.
     * @param {WCSInfo} wCSSettingsBody Body of the WCS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWCSSettings(wCSSettingsBody: WCSInfo, options?: any): AxiosPromise<void>;

    /**
     * Edits a workspace-specific WCS setting.
     * @param {string} workspace The workspace name
     * @param {WCSInfo} wCSSettingsBody Body of the WCS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWCSWorkspaceSettings(workspace: string, wCSSettingsBody: WCSInfo, options?: any): AxiosPromise<void>;

    /**
     * Edits a global WFS setting.
     * @param {WFSInfo} wFSSettingsBody Body of the WFS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWFSSettings(wFSSettingsBody: WFSInfo, options?: any): AxiosPromise<void>;

    /**
     * Edits a workspace-specific WFS setting.
     * @param {string} workspace The workspace name
     * @param {WFSInfo} wFSSettingsBody Body of the WFS settings layer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWFSWorkspaceSettings(workspace: string, wFSSettingsBody: WFSInfo, options?: any): AxiosPromise<void>;

    /**
     * Edits a global WMS setting.
     * @param {WMSInfo} wMSSettingsBody Body of the WMS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMSSettings(wMSSettingsBody: WMSInfo, options?: any): AxiosPromise<void>;

    /**
     * Edits a workspace-specific WMS setting.
     * @param {string} workspace The workspace name
     * @param {WMSInfo} wMSSettingsBody Body of the WMS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMSWorkspaceSettings(workspace: string, wMSSettingsBody: WMSInfo, options?: any): AxiosPromise<void>;

    /**
     * Edits a global WMTS setting.
     * @param {WMTSInfo} wMTSSettingsBody Body of the WMTS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMTSSettings(wMTSSettingsBody: WMTSInfo, options?: any): AxiosPromise<void>;

    /**
     * Edits a workspace-specific WMTS setting.
     * @param {string} workspace The workspace name
     * @param {WMTSInfo} wMTSSettingsBody Body of the WMTS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMTSWorkspaceSettings(workspace: string, wMTSSettingsBody: WMTSInfo, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Invalid. Use PUT to edit settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWCSSettings(options?: any) {
        return DefaultApiFp(this.configuration).deleteWCSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a workspace-specific WCS setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWCSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteWCSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWFSSettings(options?: any) {
        return DefaultApiFp(this.configuration).deleteWFSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a workspace-specific WFS setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWFSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteWFSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMSSettings(options?: any) {
        return DefaultApiFp(this.configuration).deleteWMSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a workspace-specific WMS setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteWMSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMTSSettings(options?: any) {
        return DefaultApiFp(this.configuration).deleteWMTSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a workspace-specific WMTS setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMTSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteWMTSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves Web Coverage Service settings globally for the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWCSSettings(options?: any) {
        return DefaultApiFp(this.configuration).getWCSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves Web Coverage Service settings for a given workspace.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWCSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).getWCSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves Web Feature Service settings globally for the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWFSSettings(options?: any) {
        return DefaultApiFp(this.configuration).getWFSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves Web Feature Service settings for a given workspace.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWFSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).getWFSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves Web Map Service settings globally for the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMSSettings(options?: any) {
        return DefaultApiFp(this.configuration).getWMSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves Web Map Service settings for a given workspace.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).getWMSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves Web Map Tile Service settings globally for the server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMTSSettings(options?: any) {
        return DefaultApiFp(this.configuration).getWMTSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves Web Map Tile Service settings for a given workspace.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMTSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).getWMTSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWCSSettings(options?: any) {
        return DefaultApiFp(this.configuration).postWCSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWCSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).postWCSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWFSSettings(options?: any) {
        return DefaultApiFp(this.configuration).postWFSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWFSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).postWFSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMSSettings(options?: any) {
        return DefaultApiFp(this.configuration).postWMSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).postWMSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMTSSettings(options?: any) {
        return DefaultApiFp(this.configuration).postWMTSSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a service setting.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMTSWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).postWMTSWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits a global WCS setting.
     * @param {WCSInfo} wCSSettingsBody Body of the WCS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWCSSettings(wCSSettingsBody: WCSInfo, options?: any) {
        return DefaultApiFp(this.configuration).putWCSSettings(wCSSettingsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits a workspace-specific WCS setting.
     * @param {string} workspace The workspace name
     * @param {WCSInfo} wCSSettingsBody Body of the WCS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWCSWorkspaceSettings(workspace: string, wCSSettingsBody: WCSInfo, options?: any) {
        return DefaultApiFp(this.configuration).putWCSWorkspaceSettings(workspace, wCSSettingsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits a global WFS setting.
     * @param {WFSInfo} wFSSettingsBody Body of the WFS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWFSSettings(wFSSettingsBody: WFSInfo, options?: any) {
        return DefaultApiFp(this.configuration).putWFSSettings(wFSSettingsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits a workspace-specific WFS setting.
     * @param {string} workspace The workspace name
     * @param {WFSInfo} wFSSettingsBody Body of the WFS settings layer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWFSWorkspaceSettings(workspace: string, wFSSettingsBody: WFSInfo, options?: any) {
        return DefaultApiFp(this.configuration).putWFSWorkspaceSettings(workspace, wFSSettingsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits a global WMS setting.
     * @param {WMSInfo} wMSSettingsBody Body of the WMS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMSSettings(wMSSettingsBody: WMSInfo, options?: any) {
        return DefaultApiFp(this.configuration).putWMSSettings(wMSSettingsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits a workspace-specific WMS setting.
     * @param {string} workspace The workspace name
     * @param {WMSInfo} wMSSettingsBody Body of the WMS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMSWorkspaceSettings(workspace: string, wMSSettingsBody: WMSInfo, options?: any) {
        return DefaultApiFp(this.configuration).putWMSWorkspaceSettings(workspace, wMSSettingsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits a global WMTS setting.
     * @param {WMTSInfo} wMTSSettingsBody Body of the WMTS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMTSSettings(wMTSSettingsBody: WMTSInfo, options?: any) {
        return DefaultApiFp(this.configuration).putWMTSSettings(wMTSSettingsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits a workspace-specific WMTS setting.
     * @param {string} workspace The workspace name
     * @param {WMTSInfo} wMTSSettingsBody Body of the WMTS settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMTSWorkspaceSettings(workspace: string, wMTSSettingsBody: WMTSInfo, options?: any) {
        return DefaultApiFp(this.configuration).putWMTSWorkspaceSettings(workspace, wMTSSettingsBody, options).then((request) => request(this.axios, this.basePath));
    }

}


