// tslint:disable
/**
 * GeoServer Settings
 * The Settings area shows global configuration for the server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * Server admin city
     * @type {string}
     * @memberof Contact
     */
    addressCity?: string;
    /**
     * Server admin country
     * @type {string}
     * @memberof Contact
     */
    addressCountry?: string;
    /**
     * Type of address
     * @type {string}
     * @memberof Contact
     */
    addressType?: string;
    /**
     * Server admin email
     * @type {string}
     * @memberof Contact
     */
    contactEmail?: string;
    /**
     * Server admin organization
     * @type {string}
     * @memberof Contact
     */
    contactOrganization?: string;
    /**
     * Server admin point of contact
     * @type {string}
     * @memberof Contact
     */
    contactPerson?: string;
    /**
     * Server admin point of contact job title
     * @type {string}
     * @memberof Contact
     */
    contactPosition?: string;
}
/**
 * 
 * @export
 * @interface CoverageAccess
 */
export interface CoverageAccess {
    /**
     * Maximum number of threads that the Java ThreadPoolExecutor will create
     * @type {number}
     * @memberof CoverageAccess
     */
    maxPoolSize?: number;
    /**
     * Number of threads that the Java ThreadPoolExecutor will create
     * @type {number}
     * @memberof CoverageAccess
     */
    corePoolSize?: number;
    /**
     * Timeout for threads to be terminated if they are idle and more than the core pool number exist.
     * @type {number}
     * @memberof CoverageAccess
     */
    keepAlilveTime?: number;
    /**
     * Type of Blocking Queue to managed submitted tasks. Can be either UNBOUNDED or DIRECT.
     * @type {string}
     * @memberof CoverageAccess
     */
    queueType?: string;
    /**
     * Threshold size to choose between file-based cache and memory-based cach
     * @type {number}
     * @memberof CoverageAccess
     */
    imageIOCacheThreshold?: number;
}
/**
 * 
 * @export
 * @interface Global
 */
export interface Global {
    /**
     * 
     * @type {Settings}
     * @memberof Global
     */
    settings?: Settings;
    /**
     * 
     * @type {JAI}
     * @memberof Global
     */
    jai?: JAI;
    /**
     * 
     * @type {CoverageAccess}
     * @memberof Global
     */
    coverageAccess?: CoverageAccess;
    /**
     * Number of times the server configuration has been modified
     * @type {number}
     * @memberof Global
     */
    updateSequence?: number;
    /**
     * Maximum number of datastore connections and schemas that can be kept in memory
     * @type {number}
     * @memberof Global
     */
    featureTypeCacheSize?: number;
    /**
     * Allow access to both global services and virtual services
     * @type {boolean}
     * @memberof Global
     */
    globalServices?: boolean;
    /**
     * With more verbose logging levels, sets the size of the buffer GeoServer will use to log the body of POST requests
     * @type {number}
     * @memberof Global
     */
    xmlPostRequestLogBufferSize?: number;
}
/**
 * 
 * @export
 * @interface JAI
 */
export interface JAI {
    /**
     * No longer used
     * @type {boolean}
     * @memberof JAI
     */
    allowInterpolation?: boolean;
    /**
     * Tile recycling
     * @type {boolean}
     * @memberof JAI
     */
    recycling?: boolean;
    /**
     * Tile thread priority
     * @type {number}
     * @memberof JAI
     */
    tilePriority?: number;
    /**
     * Tile threads
     * @type {number}
     * @memberof JAI
     */
    tileThreads?: number;
    /**
     * Memory capacity
     * @type {number}
     * @memberof JAI
     */
    memoryCapacity?: number;
    /**
     * Memory threshold
     * @type {number}
     * @memberof JAI
     */
    memoryThreshold?: number;
    /**
     * Enables Image IO cache
     * @type {boolean}
     * @memberof JAI
     */
    imageIOCache?: boolean;
    /**
     * Enable JAI PNG native acceleration
     * @type {boolean}
     * @memberof JAI
     */
    pngAcceleration?: boolean;
    /**
     * Enable JAI JPEG native acceleration
     * @type {boolean}
     * @memberof JAI
     */
    jpegAcceleration?: boolean;
    /**
     * Enable JAI mosaic native acceleration
     * @type {boolean}
     * @memberof JAI
     */
    allowNativeMosaic?: boolean;
    /**
     * Enable JAI native warp acceleration
     * @type {boolean}
     * @memberof JAI
     */
    allowNativeWarp?: boolean;
}
/**
 * 
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * For internal use only. Do not modify.
     * @type {string}
     * @memberof Settings
     */
    id?: string;
    /**
     * 
     * @type {Contact}
     * @memberof Settings
     */
    contact?: Contact;
    /**
     * Character set to use for encoding (such as UTF-8)
     * @type {string}
     * @memberof Settings
     */
    charset?: string;
    /**
     * Maximum nuber of decimal places to use (GML and GeoJSON output)
     * @type {number}
     * @memberof Settings
     */
    numDecimals?: number;
    /**
     * Server admin URL
     * @type {string}
     * @memberof Settings
     */
    onlineResource?: string;
    /**
     * Return XML with newlines and indents
     * @type {boolean}
     * @memberof Settings
     */
    verbose?: boolean;
    /**
     * Return service exceptions with full Java stack traces
     * @type {boolean}
     * @memberof Settings
     */
    verboseExceptions?: boolean;
    /**
     * Show namespace prefix when using virtual service
     * @type {boolean}
     * @memberof Settings
     */
    localWorkspaceIncludesPrefix?: boolean;
}
/**
 * 
 * @export
 * @interface WorkspaceContact
 */
export interface WorkspaceContact {
    /**
     * Contact ID
     * @type {string}
     * @memberof WorkspaceContact
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface WorkspaceSettings
 */
export interface WorkspaceSettings {
    /**
     * 
     * @type {WorkspaceContact}
     * @memberof WorkspaceSettings
     */
    contact?: WorkspaceContact;
    /**
     * Character set to use for encoding (such as UTF-8)
     * @type {string}
     * @memberof WorkspaceSettings
     */
    charset?: string;
    /**
     * Maximum nuber of decimal places to use (GML and GeoJSON output)
     * @type {number}
     * @memberof WorkspaceSettings
     */
    numDecimals?: number;
    /**
     * Server admin URL
     * @type {string}
     * @memberof WorkspaceSettings
     */
    onlineResource?: string;
    /**
     * Return XML with newlines and indents
     * @type {boolean}
     * @memberof WorkspaceSettings
     */
    verbose?: boolean;
    /**
     * Return service exceptions with full Java stack traces
     * @type {boolean}
     * @memberof WorkspaceSettings
     */
    verboseExceptions?: boolean;
    /**
     * Show namespace prefix when using virtual service
     * @type {boolean}
     * @memberof WorkspaceSettings
     */
    localWorkspaceIncludesPrefix?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Invalid. Use PUT to update contact settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings/contact`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to update settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the settings for this workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWorkspaceSettings.');
            }
            const localVarPath = `/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all global contact settings on the server. This is a subset of what is available at the /settings endpoint. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings/contact.xml\" for XML).
         * @summary Get a list of all global contact settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings/contact`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all global settings on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).
         * @summary Get a list of all global settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all workspace-specific settings. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).
         * @summary Get a list of all workspace-specific settings
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceSettings: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWorkspaceSettings.');
            }
            const localVarPath = `/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to update contact settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContactSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings/contact`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to update settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create new workspace-specific settings on the server.
         * @summary Create workspace-specific settings
         * @param {string} workspace The workspace name
         * @param {WorkspaceSettings} settingsBody The settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaceSettings: async (workspace: string, settingsBody: WorkspaceSettings, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWorkspaceSettings.');
            }
            // verify required parameter 'settingsBody' is not null or undefined
            if (settingsBody === null || settingsBody === undefined) {
                throw new RequiredError('settingsBody','Required parameter settingsBody was null or undefined when calling postWorkspaceSettings.');
            }
            const localVarPath = `/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof settingsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settingsBody !== undefined ? settingsBody : {}) : (settingsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates global contact settings on the server.
         * @summary Update contact settings
         * @param {Contact} settingscontactBody The contact settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContactSettings: async (settingscontactBody: Contact, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingscontactBody' is not null or undefined
            if (settingscontactBody === null || settingscontactBody === undefined) {
                throw new RequiredError('settingscontactBody','Required parameter settingscontactBody was null or undefined when calling putContactSettings.');
            }
            const localVarPath = `/settings/contact`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof settingscontactBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settingscontactBody !== undefined ? settingscontactBody : {}) : (settingscontactBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates global settings on the server.
         * @summary Update settings
         * @param {Global} settingsBody The settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSettings: async (settingsBody: Global, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'settingsBody' is not null or undefined
            if (settingsBody === null || settingsBody === undefined) {
                throw new RequiredError('settingsBody','Required parameter settingsBody was null or undefined when calling putSettings.');
            }
            const localVarPath = `/settings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof settingsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settingsBody !== undefined ? settingsBody : {}) : (settingsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates workspace-specific settings on the server.
         * @summary Update workspace-specific settings
         * @param {string} workspace The workspace name
         * @param {WorkspaceSettings} settingsBody The settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceSettings: async (workspace: string, settingsBody: WorkspaceSettings, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWorkspaceSettings.');
            }
            // verify required parameter 'settingsBody' is not null or undefined
            if (settingsBody === null || settingsBody === undefined) {
                throw new RequiredError('settingsBody','Required parameter settingsBody was null or undefined when calling putWorkspaceSettings.');
            }
            const localVarPath = `/workspaces/{workspace}/settings`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof settingsBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(settingsBody !== undefined ? settingsBody : {}) : (settingsBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Invalid. Use PUT to update contact settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContactSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteContactSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to update settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete the settings for this workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all global contact settings on the server. This is a subset of what is available at the /settings endpoint. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings/contact.xml\" for XML).
         * @summary Get a list of all global contact settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContactSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Contact>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getContactSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all global settings on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).
         * @summary Get a list of all global settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Global>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all workspace-specific settings. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).
         * @summary Get a list of all workspace-specific settings
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaceSettings(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceSettings>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWorkspaceSettings(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to update contact settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContactSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postContactSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to update settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create new workspace-specific settings on the server.
         * @summary Create workspace-specific settings
         * @param {string} workspace The workspace name
         * @param {WorkspaceSettings} settingsBody The settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWorkspaceSettings(workspace: string, settingsBody: WorkspaceSettings, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWorkspaceSettings(workspace, settingsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates global contact settings on the server.
         * @summary Update contact settings
         * @param {Contact} settingscontactBody The contact settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putContactSettings(settingscontactBody: Contact, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putContactSettings(settingscontactBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates global settings on the server.
         * @summary Update settings
         * @param {Global} settingsBody The settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSettings(settingsBody: Global, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putSettings(settingsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates workspace-specific settings on the server.
         * @summary Update workspace-specific settings
         * @param {string} workspace The workspace name
         * @param {WorkspaceSettings} settingsBody The settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWorkspaceSettings(workspace: string, settingsBody: WorkspaceSettings, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWorkspaceSettings(workspace, settingsBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Invalid. Use PUT to update contact settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteContactSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to update settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the settings for this workspace.
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all global contact settings on the server. This is a subset of what is available at the /settings endpoint. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings/contact.xml\" for XML).
         * @summary Get a list of all global contact settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContactSettings(options?: any): AxiosPromise<Contact> {
            return DefaultApiFp(configuration).getContactSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all global settings on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).
         * @summary Get a list of all global settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(options?: any): AxiosPromise<Global> {
            return DefaultApiFp(configuration).getSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all workspace-specific settings. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).
         * @summary Get a list of all workspace-specific settings
         * @param {string} workspace The workspace name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceSettings(workspace: string, options?: any): AxiosPromise<WorkspaceSettings> {
            return DefaultApiFp(configuration).getWorkspaceSettings(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to update contact settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContactSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postContactSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to update settings.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSettings(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Create new workspace-specific settings on the server.
         * @summary Create workspace-specific settings
         * @param {string} workspace The workspace name
         * @param {WorkspaceSettings} settingsBody The settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaceSettings(workspace: string, settingsBody: WorkspaceSettings, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWorkspaceSettings(workspace, settingsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates global contact settings on the server.
         * @summary Update contact settings
         * @param {Contact} settingscontactBody The contact settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContactSettings(settingscontactBody: Contact, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putContactSettings(settingscontactBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates global settings on the server.
         * @summary Update settings
         * @param {Global} settingsBody The settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSettings(settingsBody: Global, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putSettings(settingsBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates workspace-specific settings on the server.
         * @summary Update workspace-specific settings
         * @param {string} workspace The workspace name
         * @param {WorkspaceSettings} settingsBody The settings information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceSettings(workspace: string, settingsBody: WorkspaceSettings, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWorkspaceSettings(workspace, settingsBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Invalid. Use PUT to update contact settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteContactSettings(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to update settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteSettings(options?: any): AxiosPromise<void>;

    /**
     * Delete the settings for this workspace.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWorkspaceSettings(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a list of all global contact settings on the server. This is a subset of what is available at the /settings endpoint. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings/contact.xml\" for XML).
     * @summary Get a list of all global contact settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getContactSettings(options?: any): AxiosPromise<Contact>;

    /**
     * Displays a list of all global settings on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).
     * @summary Get a list of all global settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getSettings(options?: any): AxiosPromise<Global>;

    /**
     * Displays a list of all workspace-specific settings. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).
     * @summary Get a list of all workspace-specific settings
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWorkspaceSettings(workspace: string, options?: any): AxiosPromise<WorkspaceSettings>;

    /**
     * Invalid. Use PUT to update contact settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postContactSettings(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to update settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postSettings(options?: any): AxiosPromise<void>;

    /**
     * Create new workspace-specific settings on the server.
     * @summary Create workspace-specific settings
     * @param {string} workspace The workspace name
     * @param {WorkspaceSettings} settingsBody The settings information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWorkspaceSettings(workspace: string, settingsBody: WorkspaceSettings, options?: any): AxiosPromise<void>;

    /**
     * Updates global contact settings on the server.
     * @summary Update contact settings
     * @param {Contact} settingscontactBody The contact settings information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putContactSettings(settingscontactBody: Contact, options?: any): AxiosPromise<void>;

    /**
     * Updates global settings on the server.
     * @summary Update settings
     * @param {Global} settingsBody The settings information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putSettings(settingsBody: Global, options?: any): AxiosPromise<void>;

    /**
     * Updates workspace-specific settings on the server.
     * @summary Update workspace-specific settings
     * @param {string} workspace The workspace name
     * @param {WorkspaceSettings} settingsBody The settings information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWorkspaceSettings(workspace: string, settingsBody: WorkspaceSettings, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Invalid. Use PUT to update contact settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteContactSettings(options?: any) {
        return DefaultApiFp(this.configuration).deleteContactSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to update settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSettings(options?: any) {
        return DefaultApiFp(this.configuration).deleteSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the settings for this workspace.
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all global contact settings on the server. This is a subset of what is available at the /settings endpoint. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings/contact.xml\" for XML).
     * @summary Get a list of all global contact settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getContactSettings(options?: any) {
        return DefaultApiFp(this.configuration).getContactSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all global settings on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).
     * @summary Get a list of all global settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSettings(options?: any) {
        return DefaultApiFp(this.configuration).getSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all workspace-specific settings. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/settings.xml\" for XML).
     * @summary Get a list of all workspace-specific settings
     * @param {string} workspace The workspace name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWorkspaceSettings(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).getWorkspaceSettings(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to update contact settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postContactSettings(options?: any) {
        return DefaultApiFp(this.configuration).postContactSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to update settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postSettings(options?: any) {
        return DefaultApiFp(this.configuration).postSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create new workspace-specific settings on the server.
     * @summary Create workspace-specific settings
     * @param {string} workspace The workspace name
     * @param {WorkspaceSettings} settingsBody The settings information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWorkspaceSettings(workspace: string, settingsBody: WorkspaceSettings, options?: any) {
        return DefaultApiFp(this.configuration).postWorkspaceSettings(workspace, settingsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates global contact settings on the server.
     * @summary Update contact settings
     * @param {Contact} settingscontactBody The contact settings information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putContactSettings(settingscontactBody: Contact, options?: any) {
        return DefaultApiFp(this.configuration).putContactSettings(settingscontactBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates global settings on the server.
     * @summary Update settings
     * @param {Global} settingsBody The settings information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putSettings(settingsBody: Global, options?: any) {
        return DefaultApiFp(this.configuration).putSettings(settingsBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates workspace-specific settings on the server.
     * @summary Update workspace-specific settings
     * @param {string} workspace The workspace name
     * @param {WorkspaceSettings} settingsBody The settings information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWorkspaceSettings(workspace: string, settingsBody: WorkspaceSettings, options?: any) {
        return DefaultApiFp(this.configuration).putWorkspaceSettings(workspace, settingsBody, options).then((request) => request(this.axios, this.basePath));
    }

}


