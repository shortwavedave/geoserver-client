// tslint:disable
/**
 * GeoServer Styles
 * A style describes how a resource is symbolized or rendered by the Web Map Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Style
 */
export interface Style {
    /**
     * Name of style
     * @type {string}
     * @memberof Style
     */
    name?: string;
    /**
     * Format of style
     * @type {string}
     * @memberof Style
     */
    format?: string;
    /**
     * 
     * @type {StyleLanguageVersion}
     * @memberof Style
     */
    languageVersion?: StyleLanguageVersion;
    /**
     * File name of the style
     * @type {string}
     * @memberof Style
     */
    filename?: string;
}
/**
 * 
 * @export
 * @interface StyleInfoPost
 */
export interface StyleInfoPost {
    /**
     * Name of style
     * @type {string}
     * @memberof StyleInfoPost
     */
    name?: string;
    /**
     * Name of filename containing SLD code
     * @type {string}
     * @memberof StyleInfoPost
     */
    filename?: string;
}
/**
 * 
 * @export
 * @interface StyleLanguageVersion
 */
export interface StyleLanguageVersion {
    /**
     * Version of style format
     * @type {string}
     * @memberof StyleLanguageVersion
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface StyleLayer
 */
export interface StyleLayer {
    /**
     * Name of style
     * @type {string}
     * @memberof StyleLayer
     */
    name?: string;
    /**
     * 
     * @type {StyleLayerLayer}
     * @memberof StyleLayer
     */
    layer?: StyleLayerLayer;
    /**
     * Format of style
     * @type {string}
     * @memberof StyleLayer
     */
    format?: string;
    /**
     * 
     * @type {StyleLanguageVersion}
     * @memberof StyleLayer
     */
    languageVersion?: StyleLanguageVersion;
    /**
     * File name of the style
     * @type {string}
     * @memberof StyleLayer
     */
    filename?: string;
}
/**
 * 
 * @export
 * @interface StyleLayerLayer
 */
export interface StyleLayerLayer {
    /**
     * Name of layer containing the style
     * @type {string}
     * @memberof StyleLayerLayer
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface StyleListItem
 */
export interface StyleListItem {
    /**
     * Name of style
     * @type {string}
     * @memberof StyleListItem
     */
    name?: string;
    /**
     * URL to style definition
     * @type {string}
     * @memberof StyleListItem
     */
    href?: string;
}
/**
 * 
 * @export
 * @interface StyleWorkspace
 */
export interface StyleWorkspace {
    /**
     * Name of style
     * @type {string}
     * @memberof StyleWorkspace
     */
    name?: string;
    /**
     * 
     * @type {StyleWorkspaceWorkspace}
     * @memberof StyleWorkspace
     */
    workspace?: StyleWorkspaceWorkspace;
    /**
     * Format of style
     * @type {string}
     * @memberof StyleWorkspace
     */
    format?: string;
    /**
     * 
     * @type {StyleLanguageVersion}
     * @memberof StyleWorkspace
     */
    languageVersion?: StyleLanguageVersion;
    /**
     * File name of the style
     * @type {string}
     * @memberof StyleWorkspace
     */
    filename?: string;
}
/**
 * 
 * @export
 * @interface StyleWorkspaceWorkspace
 */
export interface StyleWorkspaceWorkspace {
    /**
     * Name of workspace containing the style
     * @type {string}
     * @memberof StyleWorkspaceWorkspace
     */
    name?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Invalid.
         * @param {string} layer Name of the layer to manage styles for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLayerStyles: async (layer: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layer' is not null or undefined
            if (layer === null || layer === undefined) {
                throw new RequiredError('layer','Required parameter layer was null or undefined when calling deleteLayerStyles.');
            }
            const localVarPath = `/rest/layers/{layer}/styles`
                .replace(`{${"layer"}}`, encodeURIComponent(String(layer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a style.
         * @summary Delete style
         * @param {string} style Name of the style to delete.
         * @param {boolean} [purge] Specifies whether the underlying file containing the style should be deleted on disk.
         * @param {boolean} [recurse] Removes references to the specified style in existing layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStyle: async (style: string, purge?: boolean, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'style' is not null or undefined
            if (style === null || style === undefined) {
                throw new RequiredError('style','Required parameter style was null or undefined when calling deleteStyle.');
            }
            const localVarPath = `/styles/{style}`
                .replace(`{${"style"}}`, encodeURIComponent(String(style)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (purge !== undefined) {
                localVarQueryParameter['purge'] = purge;
            }

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use /styles/{style} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStyles: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/styles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a style in a given workspace.
         * @summary Delete style in a given workspace
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to delete.
         * @param {boolean} [purge] Specifies whether the underlying file containing the style should be deleted on disk.
         * @param {boolean} [recurse] Removes references to the specified style in existing layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceStyle: async (workspace: string, style: string, purge?: boolean, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWorkspaceStyle.');
            }
            // verify required parameter 'style' is not null or undefined
            if (style === null || style === undefined) {
                throw new RequiredError('style','Required parameter style was null or undefined when calling deleteWorkspaceStyle.');
            }
            const localVarPath = `/rest/workspaces/{workspace}/styles/{style}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"style"}}`, encodeURIComponent(String(style)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (purge !== undefined) {
                localVarQueryParameter['purge'] = purge;
            }

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use /workspaces/{workspace}/styles/{style} instead.
         * @param {string} workspace Name of workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceStyles: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWorkspaceStyles.');
            }
            const localVarPath = `/workspaces/{workspace}/styles`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all alternate styles for a given layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}/styles.xml\" for XML).
         * @summary Get a list of layer alternate styles
         * @param {string} layer Name of the layer to manage styles for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayerStyles: async (layer: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layer' is not null or undefined
            if (layer === null || layer === undefined) {
                throw new RequiredError('layer','Required parameter layer was null or undefined when calling getLayerStyles.');
            }
            const localVarPath = `/rest/layers/{layer}/styles`
                .replace(`{${"layer"}}`, encodeURIComponent(String(layer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles 
         * @summary Retrieve a style
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyle: async (style: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'style' is not null or undefined
            if (style === null || style === undefined) {
                throw new RequiredError('style','Required parameter style was null or undefined when calling getStyle.');
            }
            const localVarPath = `/styles/{style}`
                .replace(`{${"style"}}`, encodeURIComponent(String(style)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).
         * @summary Get a list of styles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyles: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/styles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles 
         * @summary Retrieve a style from a given workspace
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceStyle: async (workspace: string, style: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWorkspaceStyle.');
            }
            // verify required parameter 'style' is not null or undefined
            if (style === null || style === undefined) {
                throw new RequiredError('style','Required parameter style was null or undefined when calling getWorkspaceStyle.');
            }
            const localVarPath = `/rest/workspaces/{workspace}/styles/{style}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"style"}}`, encodeURIComponent(String(style)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all styles in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/styles.xml\" for XML).
         * @summary Get a list of styles in a given workspace
         * @param {string} workspace Name of workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceStyles: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWorkspaceStyles.');
            }
            const localVarPath = `/workspaces/{workspace}/styles`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new style entry to the layer. The style named in styleBody must already exist, and will not be altered by this request.
         * @summary Add a new style
         * @param {string} layer Name of the layer to manage styles for
         * @param {StyleInfoPost} styleBody Style body information naming an existing style to add to the layer
         * @param {boolean} [_default] Whether to make this the default style for the layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayerStyles: async (layer: string, styleBody: StyleInfoPost, _default?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layer' is not null or undefined
            if (layer === null || layer === undefined) {
                throw new RequiredError('layer','Required parameter layer was null or undefined when calling postLayerStyles.');
            }
            // verify required parameter 'styleBody' is not null or undefined
            if (styleBody === null || styleBody === undefined) {
                throw new RequiredError('styleBody','Required parameter styleBody was null or undefined when calling postLayerStyles.');
            }
            const localVarPath = `/rest/layers/{layer}/styles`
                .replace(`{${"layer"}}`, encodeURIComponent(String(layer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (_default !== undefined) {
                localVarQueryParameter['default'] = _default;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof styleBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(styleBody !== undefined ? styleBody : {}) : (styleBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a style, or POST with /styles to add a new style.
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStyle: async (style: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'style' is not null or undefined
            if (style === null || style === undefined) {
                throw new RequiredError('style','Required parameter style was null or undefined when calling postStyle.');
            }
            const localVarPath = `/styles/{style}`
                .replace(`{${"style"}}`, encodeURIComponent(String(style)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types. 
         * @summary Add a new style
         * @param {StyleInfoPost} styleBody  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;filename\&quot;: \&quot;roads.sld\&quot;       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:         &#x60;&#x60;&#x60;     &lt;ZIP file containing SLD and icons&gt;     &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {string} [name] The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
         * @param {string} [contentType] Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStyles: async (styleBody: StyleInfoPost, name?: string, contentType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'styleBody' is not null or undefined
            if (styleBody === null || styleBody === undefined) {
                throw new RequiredError('styleBody','Required parameter styleBody was null or undefined when calling postStyles.');
            }
            const localVarPath = `/styles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof styleBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(styleBody !== undefined ? styleBody : {}) : (styleBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a style, or POST with /workspaces/{workspace}/styles to add a new style.
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaceStyle: async (workspace: string, style: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWorkspaceStyle.');
            }
            // verify required parameter 'style' is not null or undefined
            if (style === null || style === undefined) {
                throw new RequiredError('style','Required parameter style was null or undefined when calling postWorkspaceStyle.');
            }
            const localVarPath = `/rest/workspaces/{workspace}/styles/{style}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"style"}}`, encodeURIComponent(String(style)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types. 
         * @summary Add a new style to a given workspace
         * @param {string} workspace Name of workspace
         * @param {StyleInfoPost} styleBody  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;filename\&quot;: \&quot;roads.sld\&quot;       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:         &#x60;&#x60;&#x60;     &lt;ZIP file containing SLD and icons&gt;     &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {string} [name] The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
         * @param {string} [contentType] Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaceStyles: async (workspace: string, styleBody: StyleInfoPost, name?: string, contentType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWorkspaceStyles.');
            }
            // verify required parameter 'styleBody' is not null or undefined
            if (styleBody === null || styleBody === undefined) {
                throw new RequiredError('styleBody','Required parameter styleBody was null or undefined when calling postWorkspaceStyles.');
            }
            const localVarPath = `/workspaces/{workspace}/styles`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof styleBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(styleBody !== undefined ? styleBody : {}) : (styleBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST to modify the styles for a layer.
         * @param {string} layer Name of the layer to manage styles for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLayerStyles: async (layer: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layer' is not null or undefined
            if (layer === null || layer === undefined) {
                throw new RequiredError('layer','Required parameter layer was null or undefined when calling putLayerStyles.');
            }
            const localVarPath = `/rest/layers/{layer}/styles`
                .replace(`{${"layer"}}`, encodeURIComponent(String(layer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies a single style.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files 
         * @summary Modify a single style
         * @param {string} style Name of the style to edit.
         * @param {StyleInfoPost} styleBody  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;languageVersion&gt;         &lt;version&gt;1.0.0&lt;/version&gt;       &lt;/languageVersion&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;       &lt;legend&gt;         &lt;width&gt;32&lt;/width&gt;         &lt;height&gt;32&lt;/height&gt;         &lt;format&gt;image/png; charset&#x3D;UTF-8&lt;/format&gt;         &lt;onlineResource&gt;legend.png&lt;/onlineResource&gt;       &lt;/legend&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;languageVersion\&quot;: {           \&quot;version\&quot;: \&quot;1.0.0\&quot;         },         \&quot;filename\&quot;: \&quot;roads.sld\&quot;,         \&quot;legend\&quot;: {           \&quot;format\&quot;: \&quot;image/png; charset&#x3D;UTF-8\&quot;,           \&quot;height\&quot;: 32,           \&quot;width\&quot;: 32,           \&quot;onlineResource\&quot;: \&quot;grass_fill.png\&quot;         }       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:           &#x60;&#x60;&#x60;       &lt;ZIP file containing SLD and icons&gt;       &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {boolean} [raw] When set to \&quot;true\&quot;, will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default). Only used when uploading a style file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStyle: async (style: string, styleBody: StyleInfoPost, raw?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'style' is not null or undefined
            if (style === null || style === undefined) {
                throw new RequiredError('style','Required parameter style was null or undefined when calling putStyle.');
            }
            // verify required parameter 'styleBody' is not null or undefined
            if (styleBody === null || styleBody === undefined) {
                throw new RequiredError('styleBody','Required parameter styleBody was null or undefined when calling putStyle.');
            }
            const localVarPath = `/styles/{style}`
                .replace(`{${"style"}}`, encodeURIComponent(String(style)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof styleBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(styleBody !== undefined ? styleBody : {}) : (styleBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new style, or use PUT with /styles/{style} to edit/upload an existing style.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStyles: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/styles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies a single style in a given workspace.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/workspaces/{workspace}/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files 
         * @summary Modify a single style in a given workspace
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to retrieve.
         * @param {StyleInfoPost} styleBody  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;languageVersion&gt;         &lt;version&gt;1.0.0&lt;/version&gt;       &lt;/languageVersion&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;       &lt;legend&gt;         &lt;width&gt;32&lt;/width&gt;         &lt;height&gt;32&lt;/height&gt;         &lt;format&gt;image/png; charset&#x3D;UTF-8&lt;/format&gt;         &lt;onlineResource&gt;legend.png&lt;/onlineResource&gt;       &lt;/legend&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;languageVersion\&quot;: {           \&quot;version\&quot;: \&quot;1.0.0\&quot;         },         \&quot;filename\&quot;: \&quot;roads.sld\&quot;,         \&quot;legend\&quot;: {           \&quot;format\&quot;: \&quot;image/png; charset&#x3D;UTF-8\&quot;,           \&quot;height\&quot;: 32,           \&quot;width\&quot;: 32,           \&quot;onlineResource\&quot;: \&quot;grass_fill.png\&quot;         }       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:           &#x60;&#x60;&#x60;       &lt;ZIP file containing SLD and icons&gt;       &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {boolean} [raw] When set to \&quot;true\&quot;, will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default). Only used when uploading a style file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceStyle: async (workspace: string, style: string, styleBody: StyleInfoPost, raw?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWorkspaceStyle.');
            }
            // verify required parameter 'style' is not null or undefined
            if (style === null || style === undefined) {
                throw new RequiredError('style','Required parameter style was null or undefined when calling putWorkspaceStyle.');
            }
            // verify required parameter 'styleBody' is not null or undefined
            if (styleBody === null || styleBody === undefined) {
                throw new RequiredError('styleBody','Required parameter styleBody was null or undefined when calling putWorkspaceStyle.');
            }
            const localVarPath = `/rest/workspaces/{workspace}/styles/{style}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"style"}}`, encodeURIComponent(String(style)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof styleBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(styleBody !== undefined ? styleBody : {}) : (styleBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new style, or use PUT with /workspaces/{workspace}/styles/{style} to edit/upload an existing style.
         * @param {string} workspace Name of workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceStyles: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWorkspaceStyles.');
            }
            const localVarPath = `/workspaces/{workspace}/styles`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Invalid.
         * @param {string} layer Name of the layer to manage styles for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLayerStyles(layer: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteLayerStyles(layer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a style.
         * @summary Delete style
         * @param {string} style Name of the style to delete.
         * @param {boolean} [purge] Specifies whether the underlying file containing the style should be deleted on disk.
         * @param {boolean} [recurse] Removes references to the specified style in existing layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStyle(style: string, purge?: boolean, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteStyle(style, purge, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use /styles/{style} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStyles(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteStyles(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a style in a given workspace.
         * @summary Delete style in a given workspace
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to delete.
         * @param {boolean} [purge] Specifies whether the underlying file containing the style should be deleted on disk.
         * @param {boolean} [recurse] Removes references to the specified style in existing layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkspaceStyle(workspace: string, style: string, purge?: boolean, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWorkspaceStyle(workspace, style, purge, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use /workspaces/{workspace}/styles/{style} instead.
         * @param {string} workspace Name of workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkspaceStyles(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWorkspaceStyles(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all alternate styles for a given layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}/styles.xml\" for XML).
         * @summary Get a list of layer alternate styles
         * @param {string} layer Name of the layer to manage styles for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayerStyles(layer: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StyleListItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getLayerStyles(layer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles 
         * @summary Retrieve a style
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyle(style: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Style>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getStyle(style, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).
         * @summary Get a list of styles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyles(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StyleListItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getStyles(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles 
         * @summary Retrieve a style from a given workspace
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaceStyle(workspace: string, style: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StyleWorkspace>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWorkspaceStyle(workspace, style, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all styles in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/styles.xml\" for XML).
         * @summary Get a list of styles in a given workspace
         * @param {string} workspace Name of workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaceStyles(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StyleListItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWorkspaceStyles(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new style entry to the layer. The style named in styleBody must already exist, and will not be altered by this request.
         * @summary Add a new style
         * @param {string} layer Name of the layer to manage styles for
         * @param {StyleInfoPost} styleBody Style body information naming an existing style to add to the layer
         * @param {boolean} [_default] Whether to make this the default style for the layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayerStyles(layer: string, styleBody: StyleInfoPost, _default?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postLayerStyles(layer, styleBody, _default, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a style, or POST with /styles to add a new style.
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStyle(style: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postStyle(style, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types. 
         * @summary Add a new style
         * @param {StyleInfoPost} styleBody  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;filename\&quot;: \&quot;roads.sld\&quot;       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:         &#x60;&#x60;&#x60;     &lt;ZIP file containing SLD and icons&gt;     &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {string} [name] The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
         * @param {string} [contentType] Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStyles(styleBody: StyleInfoPost, name?: string, contentType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postStyles(styleBody, name, contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a style, or POST with /workspaces/{workspace}/styles to add a new style.
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWorkspaceStyle(workspace: string, style: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWorkspaceStyle(workspace, style, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types. 
         * @summary Add a new style to a given workspace
         * @param {string} workspace Name of workspace
         * @param {StyleInfoPost} styleBody  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;filename\&quot;: \&quot;roads.sld\&quot;       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:         &#x60;&#x60;&#x60;     &lt;ZIP file containing SLD and icons&gt;     &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {string} [name] The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
         * @param {string} [contentType] Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWorkspaceStyles(workspace: string, styleBody: StyleInfoPost, name?: string, contentType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWorkspaceStyles(workspace, styleBody, name, contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST to modify the styles for a layer.
         * @param {string} layer Name of the layer to manage styles for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putLayerStyles(layer: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putLayerStyles(layer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies a single style.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files 
         * @summary Modify a single style
         * @param {string} style Name of the style to edit.
         * @param {StyleInfoPost} styleBody  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;languageVersion&gt;         &lt;version&gt;1.0.0&lt;/version&gt;       &lt;/languageVersion&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;       &lt;legend&gt;         &lt;width&gt;32&lt;/width&gt;         &lt;height&gt;32&lt;/height&gt;         &lt;format&gt;image/png; charset&#x3D;UTF-8&lt;/format&gt;         &lt;onlineResource&gt;legend.png&lt;/onlineResource&gt;       &lt;/legend&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;languageVersion\&quot;: {           \&quot;version\&quot;: \&quot;1.0.0\&quot;         },         \&quot;filename\&quot;: \&quot;roads.sld\&quot;,         \&quot;legend\&quot;: {           \&quot;format\&quot;: \&quot;image/png; charset&#x3D;UTF-8\&quot;,           \&quot;height\&quot;: 32,           \&quot;width\&quot;: 32,           \&quot;onlineResource\&quot;: \&quot;grass_fill.png\&quot;         }       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:           &#x60;&#x60;&#x60;       &lt;ZIP file containing SLD and icons&gt;       &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {boolean} [raw] When set to \&quot;true\&quot;, will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default). Only used when uploading a style file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putStyle(style: string, styleBody: StyleInfoPost, raw?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putStyle(style, styleBody, raw, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new style, or use PUT with /styles/{style} to edit/upload an existing style.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putStyles(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putStyles(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies a single style in a given workspace.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/workspaces/{workspace}/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files 
         * @summary Modify a single style in a given workspace
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to retrieve.
         * @param {StyleInfoPost} styleBody  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;languageVersion&gt;         &lt;version&gt;1.0.0&lt;/version&gt;       &lt;/languageVersion&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;       &lt;legend&gt;         &lt;width&gt;32&lt;/width&gt;         &lt;height&gt;32&lt;/height&gt;         &lt;format&gt;image/png; charset&#x3D;UTF-8&lt;/format&gt;         &lt;onlineResource&gt;legend.png&lt;/onlineResource&gt;       &lt;/legend&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;languageVersion\&quot;: {           \&quot;version\&quot;: \&quot;1.0.0\&quot;         },         \&quot;filename\&quot;: \&quot;roads.sld\&quot;,         \&quot;legend\&quot;: {           \&quot;format\&quot;: \&quot;image/png; charset&#x3D;UTF-8\&quot;,           \&quot;height\&quot;: 32,           \&quot;width\&quot;: 32,           \&quot;onlineResource\&quot;: \&quot;grass_fill.png\&quot;         }       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:           &#x60;&#x60;&#x60;       &lt;ZIP file containing SLD and icons&gt;       &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {boolean} [raw] When set to \&quot;true\&quot;, will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default). Only used when uploading a style file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWorkspaceStyle(workspace: string, style: string, styleBody: StyleInfoPost, raw?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWorkspaceStyle(workspace, style, styleBody, raw, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new style, or use PUT with /workspaces/{workspace}/styles/{style} to edit/upload an existing style.
         * @param {string} workspace Name of workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWorkspaceStyles(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWorkspaceStyles(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Invalid.
         * @param {string} layer Name of the layer to manage styles for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLayerStyles(layer: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteLayerStyles(layer, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a style.
         * @summary Delete style
         * @param {string} style Name of the style to delete.
         * @param {boolean} [purge] Specifies whether the underlying file containing the style should be deleted on disk.
         * @param {boolean} [recurse] Removes references to the specified style in existing layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStyle(style: string, purge?: boolean, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteStyle(style, purge, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use /styles/{style} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStyles(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteStyles(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a style in a given workspace.
         * @summary Delete style in a given workspace
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to delete.
         * @param {boolean} [purge] Specifies whether the underlying file containing the style should be deleted on disk.
         * @param {boolean} [recurse] Removes references to the specified style in existing layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceStyle(workspace: string, style: string, purge?: boolean, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWorkspaceStyle(workspace, style, purge, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use /workspaces/{workspace}/styles/{style} instead.
         * @param {string} workspace Name of workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceStyles(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWorkspaceStyles(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all alternate styles for a given layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}/styles.xml\" for XML).
         * @summary Get a list of layer alternate styles
         * @param {string} layer Name of the layer to manage styles for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayerStyles(layer: string, options?: any): AxiosPromise<Array<StyleListItem>> {
            return DefaultApiFp(configuration).getLayerStyles(layer, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles 
         * @summary Retrieve a style
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyle(style: string, options?: any): AxiosPromise<Style> {
            return DefaultApiFp(configuration).getStyle(style, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).
         * @summary Get a list of styles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyles(options?: any): AxiosPromise<Array<StyleListItem>> {
            return DefaultApiFp(configuration).getStyles(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles 
         * @summary Retrieve a style from a given workspace
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceStyle(workspace: string, style: string, options?: any): AxiosPromise<StyleWorkspace> {
            return DefaultApiFp(configuration).getWorkspaceStyle(workspace, style, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all styles in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/styles.xml\" for XML).
         * @summary Get a list of styles in a given workspace
         * @param {string} workspace Name of workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceStyles(workspace: string, options?: any): AxiosPromise<Array<StyleListItem>> {
            return DefaultApiFp(configuration).getWorkspaceStyles(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new style entry to the layer. The style named in styleBody must already exist, and will not be altered by this request.
         * @summary Add a new style
         * @param {string} layer Name of the layer to manage styles for
         * @param {StyleInfoPost} styleBody Style body information naming an existing style to add to the layer
         * @param {boolean} [_default] Whether to make this the default style for the layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayerStyles(layer: string, styleBody: StyleInfoPost, _default?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postLayerStyles(layer, styleBody, _default, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a style, or POST with /styles to add a new style.
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStyle(style: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postStyle(style, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types. 
         * @summary Add a new style
         * @param {StyleInfoPost} styleBody  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;filename\&quot;: \&quot;roads.sld\&quot;       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:         &#x60;&#x60;&#x60;     &lt;ZIP file containing SLD and icons&gt;     &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {string} [name] The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
         * @param {string} [contentType] Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStyles(styleBody: StyleInfoPost, name?: string, contentType?: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postStyles(styleBody, name, contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a style, or POST with /workspaces/{workspace}/styles to add a new style.
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaceStyle(workspace: string, style: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWorkspaceStyle(workspace, style, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types. 
         * @summary Add a new style to a given workspace
         * @param {string} workspace Name of workspace
         * @param {StyleInfoPost} styleBody  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;filename\&quot;: \&quot;roads.sld\&quot;       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:         &#x60;&#x60;&#x60;     &lt;ZIP file containing SLD and icons&gt;     &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {string} [name] The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
         * @param {string} [contentType] Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaceStyles(workspace: string, styleBody: StyleInfoPost, name?: string, contentType?: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWorkspaceStyles(workspace, styleBody, name, contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST to modify the styles for a layer.
         * @param {string} layer Name of the layer to manage styles for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLayerStyles(layer: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putLayerStyles(layer, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies a single style.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files 
         * @summary Modify a single style
         * @param {string} style Name of the style to edit.
         * @param {StyleInfoPost} styleBody  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;languageVersion&gt;         &lt;version&gt;1.0.0&lt;/version&gt;       &lt;/languageVersion&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;       &lt;legend&gt;         &lt;width&gt;32&lt;/width&gt;         &lt;height&gt;32&lt;/height&gt;         &lt;format&gt;image/png; charset&#x3D;UTF-8&lt;/format&gt;         &lt;onlineResource&gt;legend.png&lt;/onlineResource&gt;       &lt;/legend&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;languageVersion\&quot;: {           \&quot;version\&quot;: \&quot;1.0.0\&quot;         },         \&quot;filename\&quot;: \&quot;roads.sld\&quot;,         \&quot;legend\&quot;: {           \&quot;format\&quot;: \&quot;image/png; charset&#x3D;UTF-8\&quot;,           \&quot;height\&quot;: 32,           \&quot;width\&quot;: 32,           \&quot;onlineResource\&quot;: \&quot;grass_fill.png\&quot;         }       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:           &#x60;&#x60;&#x60;       &lt;ZIP file containing SLD and icons&gt;       &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {boolean} [raw] When set to \&quot;true\&quot;, will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default). Only used when uploading a style file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStyle(style: string, styleBody: StyleInfoPost, raw?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putStyle(style, styleBody, raw, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new style, or use PUT with /styles/{style} to edit/upload an existing style.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStyles(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putStyles(options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies a single style in a given workspace.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/workspaces/{workspace}/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files 
         * @summary Modify a single style in a given workspace
         * @param {string} workspace Name of the workspace for style definitions
         * @param {string} style Name of the style to retrieve.
         * @param {StyleInfoPost} styleBody  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;languageVersion&gt;         &lt;version&gt;1.0.0&lt;/version&gt;       &lt;/languageVersion&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;       &lt;legend&gt;         &lt;width&gt;32&lt;/width&gt;         &lt;height&gt;32&lt;/height&gt;         &lt;format&gt;image/png; charset&#x3D;UTF-8&lt;/format&gt;         &lt;onlineResource&gt;legend.png&lt;/onlineResource&gt;       &lt;/legend&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;languageVersion\&quot;: {           \&quot;version\&quot;: \&quot;1.0.0\&quot;         },         \&quot;filename\&quot;: \&quot;roads.sld\&quot;,         \&quot;legend\&quot;: {           \&quot;format\&quot;: \&quot;image/png; charset&#x3D;UTF-8\&quot;,           \&quot;height\&quot;: 32,           \&quot;width\&quot;: 32,           \&quot;onlineResource\&quot;: \&quot;grass_fill.png\&quot;         }       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:           &#x60;&#x60;&#x60;       &lt;ZIP file containing SLD and icons&gt;       &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
         * @param {boolean} [raw] When set to \&quot;true\&quot;, will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default). Only used when uploading a style file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceStyle(workspace: string, style: string, styleBody: StyleInfoPost, raw?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWorkspaceStyle(workspace, style, styleBody, raw, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new style, or use PUT with /workspaces/{workspace}/styles/{style} to edit/upload an existing style.
         * @param {string} workspace Name of workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceStyles(workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWorkspaceStyles(workspace, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Invalid.
     * @param {string} layer Name of the layer to manage styles for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteLayerStyles(layer: string, options?: any): AxiosPromise<void>;

    /**
     * Deletes a style.
     * @summary Delete style
     * @param {string} style Name of the style to delete.
     * @param {boolean} [purge] Specifies whether the underlying file containing the style should be deleted on disk.
     * @param {boolean} [recurse] Removes references to the specified style in existing layers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteStyle(style: string, purge?: boolean, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use /styles/{style} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteStyles(options?: any): AxiosPromise<void>;

    /**
     * Deletes a style in a given workspace.
     * @summary Delete style in a given workspace
     * @param {string} workspace Name of the workspace for style definitions
     * @param {string} style Name of the style to delete.
     * @param {boolean} [purge] Specifies whether the underlying file containing the style should be deleted on disk.
     * @param {boolean} [recurse] Removes references to the specified style in existing layers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWorkspaceStyle(workspace: string, style: string, purge?: boolean, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use /workspaces/{workspace}/styles/{style} instead.
     * @param {string} workspace Name of workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWorkspaceStyles(workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Displays a list of all alternate styles for a given layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}/styles.xml\" for XML).
     * @summary Get a list of layer alternate styles
     * @param {string} layer Name of the layer to manage styles for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getLayerStyles(layer: string, options?: any): AxiosPromise<Array<StyleListItem>>;

    /**
     * Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles 
     * @summary Retrieve a style
     * @param {string} style Name of the style to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getStyle(style: string, options?: any): AxiosPromise<Style>;

    /**
     * Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).
     * @summary Get a list of styles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getStyles(options?: any): AxiosPromise<Array<StyleListItem>>;

    /**
     * Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles 
     * @summary Retrieve a style from a given workspace
     * @param {string} workspace Name of the workspace for style definitions
     * @param {string} style Name of the style to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWorkspaceStyle(workspace: string, style: string, options?: any): AxiosPromise<StyleWorkspace>;

    /**
     * Displays a list of all styles in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/styles.xml\" for XML).
     * @summary Get a list of styles in a given workspace
     * @param {string} workspace Name of workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWorkspaceStyles(workspace: string, options?: any): AxiosPromise<Array<StyleListItem>>;

    /**
     * Adds a new style entry to the layer. The style named in styleBody must already exist, and will not be altered by this request.
     * @summary Add a new style
     * @param {string} layer Name of the layer to manage styles for
     * @param {StyleInfoPost} styleBody Style body information naming an existing style to add to the layer
     * @param {boolean} [_default] Whether to make this the default style for the layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postLayerStyles(layer: string, styleBody: StyleInfoPost, _default?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a style, or POST with /styles to add a new style.
     * @param {string} style Name of the style to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postStyle(style: string, options?: any): AxiosPromise<void>;

    /**
     * Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types. 
     * @summary Add a new style
     * @param {StyleInfoPost} styleBody  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;filename\&quot;: \&quot;roads.sld\&quot;       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:         &#x60;&#x60;&#x60;     &lt;ZIP file containing SLD and icons&gt;     &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
     * @param {string} [name] The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
     * @param {string} [contentType] Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postStyles(styleBody: StyleInfoPost, name?: string, contentType?: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a style, or POST with /workspaces/{workspace}/styles to add a new style.
     * @param {string} workspace Name of the workspace for style definitions
     * @param {string} style Name of the style to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWorkspaceStyle(workspace: string, style: string, options?: any): AxiosPromise<void>;

    /**
     * Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types. 
     * @summary Add a new style to a given workspace
     * @param {string} workspace Name of workspace
     * @param {StyleInfoPost} styleBody  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;filename\&quot;: \&quot;roads.sld\&quot;       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:         &#x60;&#x60;&#x60;     &lt;ZIP file containing SLD and icons&gt;     &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
     * @param {string} [name] The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
     * @param {string} [contentType] Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWorkspaceStyles(workspace: string, styleBody: StyleInfoPost, name?: string, contentType?: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST to modify the styles for a layer.
     * @param {string} layer Name of the layer to manage styles for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putLayerStyles(layer: string, options?: any): AxiosPromise<void>;

    /**
     * Modifies a single style.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files 
     * @summary Modify a single style
     * @param {string} style Name of the style to edit.
     * @param {StyleInfoPost} styleBody  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;languageVersion&gt;         &lt;version&gt;1.0.0&lt;/version&gt;       &lt;/languageVersion&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;       &lt;legend&gt;         &lt;width&gt;32&lt;/width&gt;         &lt;height&gt;32&lt;/height&gt;         &lt;format&gt;image/png; charset&#x3D;UTF-8&lt;/format&gt;         &lt;onlineResource&gt;legend.png&lt;/onlineResource&gt;       &lt;/legend&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;languageVersion\&quot;: {           \&quot;version\&quot;: \&quot;1.0.0\&quot;         },         \&quot;filename\&quot;: \&quot;roads.sld\&quot;,         \&quot;legend\&quot;: {           \&quot;format\&quot;: \&quot;image/png; charset&#x3D;UTF-8\&quot;,           \&quot;height\&quot;: 32,           \&quot;width\&quot;: 32,           \&quot;onlineResource\&quot;: \&quot;grass_fill.png\&quot;         }       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:           &#x60;&#x60;&#x60;       &lt;ZIP file containing SLD and icons&gt;       &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
     * @param {boolean} [raw] When set to \&quot;true\&quot;, will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default). Only used when uploading a style file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putStyle(style: string, styleBody: StyleInfoPost, raw?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new style, or use PUT with /styles/{style} to edit/upload an existing style.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putStyles(options?: any): AxiosPromise<void>;

    /**
     * Modifies a single style in a given workspace.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/workspaces/{workspace}/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files 
     * @summary Modify a single style in a given workspace
     * @param {string} workspace Name of the workspace for style definitions
     * @param {string} style Name of the style to retrieve.
     * @param {StyleInfoPost} styleBody  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;languageVersion&gt;         &lt;version&gt;1.0.0&lt;/version&gt;       &lt;/languageVersion&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;       &lt;legend&gt;         &lt;width&gt;32&lt;/width&gt;         &lt;height&gt;32&lt;/height&gt;         &lt;format&gt;image/png; charset&#x3D;UTF-8&lt;/format&gt;         &lt;onlineResource&gt;legend.png&lt;/onlineResource&gt;       &lt;/legend&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;languageVersion\&quot;: {           \&quot;version\&quot;: \&quot;1.0.0\&quot;         },         \&quot;filename\&quot;: \&quot;roads.sld\&quot;,         \&quot;legend\&quot;: {           \&quot;format\&quot;: \&quot;image/png; charset&#x3D;UTF-8\&quot;,           \&quot;height\&quot;: 32,           \&quot;width\&quot;: 32,           \&quot;onlineResource\&quot;: \&quot;grass_fill.png\&quot;         }       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:           &#x60;&#x60;&#x60;       &lt;ZIP file containing SLD and icons&gt;       &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
     * @param {boolean} [raw] When set to \&quot;true\&quot;, will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default). Only used when uploading a style file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWorkspaceStyle(workspace: string, style: string, styleBody: StyleInfoPost, raw?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new style, or use PUT with /workspaces/{workspace}/styles/{style} to edit/upload an existing style.
     * @param {string} workspace Name of workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWorkspaceStyles(workspace: string, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Invalid.
     * @param {string} layer Name of the layer to manage styles for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteLayerStyles(layer: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteLayerStyles(layer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a style.
     * @summary Delete style
     * @param {string} style Name of the style to delete.
     * @param {boolean} [purge] Specifies whether the underlying file containing the style should be deleted on disk.
     * @param {boolean} [recurse] Removes references to the specified style in existing layers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStyle(style: string, purge?: boolean, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteStyle(style, purge, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use /styles/{style} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteStyles(options?: any) {
        return DefaultApiFp(this.configuration).deleteStyles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a style in a given workspace.
     * @summary Delete style in a given workspace
     * @param {string} workspace Name of the workspace for style definitions
     * @param {string} style Name of the style to delete.
     * @param {boolean} [purge] Specifies whether the underlying file containing the style should be deleted on disk.
     * @param {boolean} [recurse] Removes references to the specified style in existing layers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWorkspaceStyle(workspace: string, style: string, purge?: boolean, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteWorkspaceStyle(workspace, style, purge, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use /workspaces/{workspace}/styles/{style} instead.
     * @param {string} workspace Name of workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWorkspaceStyles(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteWorkspaceStyles(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all alternate styles for a given layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}/styles.xml\" for XML).
     * @summary Get a list of layer alternate styles
     * @param {string} layer Name of the layer to manage styles for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLayerStyles(layer: string, options?: any) {
        return DefaultApiFp(this.configuration).getLayerStyles(layer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles 
     * @summary Retrieve a style
     * @param {string} style Name of the style to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStyle(style: string, options?: any) {
        return DefaultApiFp(this.configuration).getStyle(style, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).
     * @summary Get a list of styles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStyles(options?: any) {
        return DefaultApiFp(this.configuration).getStyles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single style. Used to both request the style info and the style definition body, depending on the media type requested. The media type can be specified either by using the \"Accept:\" header or by appending an extension to the endpoint. For example, a style info can be requested in XML format using \"/styles/{style}.xml\" or \"Accept: application/xml\". (Also available: \"{style}.json\", \"Accept: application/json\" \"{style}.html\", and \"Accept: text/html\").  The style definition body can be requested by either appending the file extension of the style file (e.g., \"{style}.sld\" or \"{style}.css\") or by specifying the correct media type for the style definition in the \"Accept\" header. Below are common style formats and the corresponding media types that can be used in the Accept header to request the style definition body.  - application/vnd.ogc.sld+xml for SLD 1.0.0 SLDs - application/vnd.ogc.se+xml for SLD 1.1.0 SLDs - application/vnd.geoserver.geocss+css for css styles - application/vnd.geoserver.ysld+yaml for ysld styles - application/vnd.geoserver.mbstyle+json for mb styles 
     * @summary Retrieve a style from a given workspace
     * @param {string} workspace Name of the workspace for style definitions
     * @param {string} style Name of the style to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWorkspaceStyle(workspace: string, style: string, options?: any) {
        return DefaultApiFp(this.configuration).getWorkspaceStyle(workspace, style, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all styles in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/styles.xml\" for XML).
     * @summary Get a list of styles in a given workspace
     * @param {string} workspace Name of workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWorkspaceStyles(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).getWorkspaceStyles(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new style entry to the layer. The style named in styleBody must already exist, and will not be altered by this request.
     * @summary Add a new style
     * @param {string} layer Name of the layer to manage styles for
     * @param {StyleInfoPost} styleBody Style body information naming an existing style to add to the layer
     * @param {boolean} [_default] Whether to make this the default style for the layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLayerStyles(layer: string, styleBody: StyleInfoPost, _default?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).postLayerStyles(layer, styleBody, _default, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a style, or POST with /styles to add a new style.
     * @param {string} style Name of the style to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postStyle(style: string, options?: any) {
        return DefaultApiFp(this.configuration).postStyle(style, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /styles/{style}. POST with a ZIP file does not support any other style types. 
     * @summary Add a new style
     * @param {StyleInfoPost} styleBody  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;filename\&quot;: \&quot;roads.sld\&quot;       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:         &#x60;&#x60;&#x60;     &lt;ZIP file containing SLD and icons&gt;     &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
     * @param {string} [name] The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
     * @param {string} [contentType] Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postStyles(styleBody: StyleInfoPost, name?: string, contentType?: string, options?: any) {
        return DefaultApiFp(this.configuration).postStyles(styleBody, name, contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a style, or POST with /workspaces/{workspace}/styles to add a new style.
     * @param {string} workspace Name of the workspace for style definitions
     * @param {string} style Name of the style to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWorkspaceStyle(workspace: string, style: string, options?: any) {
        return DefaultApiFp(this.configuration).postWorkspaceStyle(workspace, style, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new style entry to the server.  Using POST with the `application/xml` or `application/json` content only adds the style info to the catalog and does not upload style content. PUT to `/workspaces/{workspace}/styles/{style}` to upload the style in this case.  Use POST with a style file (`application/vnd.ogc.sld+xml` or `application/vnd.ogc.sld+xml` for SLD; additional style types are added by extensions) to generate a style info and upload the style all at once. Then separately PUT the style info at `/workspaces/{workspace}/styles/{style}` to make any desired changes to the generated catalog entry. You can also use POST with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files, and then separately PUT the style info at /workspaces/{workspace}/styles/{style}. POST with a ZIP file does not support any other style types. 
     * @summary Add a new style to a given workspace
     * @param {string} workspace Name of workspace
     * @param {StyleInfoPost} styleBody  The style body of a request JSON or XML style uploads follow the schema. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;filename\&quot;: \&quot;roads.sld\&quot;       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:         &#x60;&#x60;&#x60;     &lt;ZIP file containing SLD and icons&gt;     &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
     * @param {string} [name] The name of the style. Used only when POSTing a style file or ZIP bundle, to determine the name of the style in the catalog. Generated from the filename if not provided.
     * @param {string} [contentType] Content-Type of the style file. Used to determine style encoding when POSTing a style file (e.g. SLD or SE).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWorkspaceStyles(workspace: string, styleBody: StyleInfoPost, name?: string, contentType?: string, options?: any) {
        return DefaultApiFp(this.configuration).postWorkspaceStyles(workspace, styleBody, name, contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST to modify the styles for a layer.
     * @param {string} layer Name of the layer to manage styles for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putLayerStyles(layer: string, options?: any) {
        return DefaultApiFp(this.configuration).putLayerStyles(layer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies a single style.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files 
     * @summary Modify a single style
     * @param {string} style Name of the style to edit.
     * @param {StyleInfoPost} styleBody  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;languageVersion&gt;         &lt;version&gt;1.0.0&lt;/version&gt;       &lt;/languageVersion&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;       &lt;legend&gt;         &lt;width&gt;32&lt;/width&gt;         &lt;height&gt;32&lt;/height&gt;         &lt;format&gt;image/png; charset&#x3D;UTF-8&lt;/format&gt;         &lt;onlineResource&gt;legend.png&lt;/onlineResource&gt;       &lt;/legend&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;languageVersion\&quot;: {           \&quot;version\&quot;: \&quot;1.0.0\&quot;         },         \&quot;filename\&quot;: \&quot;roads.sld\&quot;,         \&quot;legend\&quot;: {           \&quot;format\&quot;: \&quot;image/png; charset&#x3D;UTF-8\&quot;,           \&quot;height\&quot;: 32,           \&quot;width\&quot;: 32,           \&quot;onlineResource\&quot;: \&quot;grass_fill.png\&quot;         }       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:           &#x60;&#x60;&#x60;       &lt;ZIP file containing SLD and icons&gt;       &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
     * @param {boolean} [raw] When set to \&quot;true\&quot;, will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default). Only used when uploading a style file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putStyle(style: string, styleBody: StyleInfoPost, raw?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).putStyle(style, styleBody, raw, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new style, or use PUT with /styles/{style} to edit/upload an existing style.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putStyles(options?: any) {
        return DefaultApiFp(this.configuration).putStyles(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies a single style in a given workspace.  Use the \"Accept:\" header to specify format or append an extension to the endpoint (example `/workspaces/{workspace}/styles/{style}.xml` for XML).  Using PUT with the `application/xml` or `application/json` content modifies the style info in the catalog and does not alter the style content. Using PUT with any other format will modify the content of the style. You can also use PUT with a ZIP file to upload a SLD 1.0 (`application/vnd.ogc.sld+xml`) file and any associated icon files 
     * @summary Modify a single style in a given workspace
     * @param {string} workspace Name of the workspace for style definitions
     * @param {string} style Name of the style to retrieve.
     * @param {StyleInfoPost} styleBody  The style body of a request. For a PUT, only values which should be changed need to be included. JSON or XML style uploads follow the schema, and alter the style configuration. For example:    - application/xml:           &#x60;&#x60;&#x60;     &lt;style&gt;       &lt;name&gt;roads_style&lt;/name&gt;       &lt;languageVersion&gt;         &lt;version&gt;1.0.0&lt;/version&gt;       &lt;/languageVersion&gt;       &lt;filename&gt;roads.sld&lt;/filename&gt;       &lt;legend&gt;         &lt;width&gt;32&lt;/width&gt;         &lt;height&gt;32&lt;/height&gt;         &lt;format&gt;image/png; charset&#x3D;UTF-8&lt;/format&gt;         &lt;onlineResource&gt;legend.png&lt;/onlineResource&gt;       &lt;/legend&gt;     &lt;/style&gt;     &#x60;&#x60;&#x60;    - application/json:         &#x60;&#x60;&#x60;     {       \&quot;style\&quot;: {          \&quot;name\&quot;: \&quot;roads_style\&quot;,          \&quot;languageVersion\&quot;: {           \&quot;version\&quot;: \&quot;1.0.0\&quot;         },         \&quot;filename\&quot;: \&quot;roads.sld\&quot;,         \&quot;legend\&quot;: {           \&quot;format\&quot;: \&quot;image/png; charset&#x3D;UTF-8\&quot;,           \&quot;height\&quot;: 32,           \&quot;width\&quot;: 32,           \&quot;onlineResource\&quot;: \&quot;grass_fill.png\&quot;         }       }     }     &#x60;&#x60;&#x60;  Otherwise, the style body is an actual style:    - application/zip:           &#x60;&#x60;&#x60;       &lt;ZIP file containing SLD and icons&gt;       &#x60;&#x60;&#x60;          - application/vnd.ogc.sld+xml:      &#x60;&#x60;&#x60;     &lt;?xml version&#x3D;\&quot;1.0\&quot; encoding&#x3D;\&quot;UTF-8\&quot;?&gt;     &lt;StyledLayerDescriptor version&#x3D;\&quot;1.0.0\&quot;       xsi:schemaLocation&#x3D;\&quot;http://www.opengis.net/sld StyledLayerDescriptor.xsd\&quot;       xmlns&#x3D;\&quot;http://www.opengis.net/sld\&quot;       xmlns:ogc&#x3D;\&quot;http://www.opengis.net/ogc\&quot;       xmlns:xlink&#x3D;\&quot;http://www.w3.org/1999/xlink\&quot;       xmlns:xsi&#x3D;\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;       &lt;!-- a Named Layer is the basic building block of an SLD document --&gt;       &lt;NamedLayer&gt;         &lt;Name&gt;default_line&lt;/Name&gt;         &lt;UserStyle&gt;         &lt;!-- Styles can have names, titles and abstracts --&gt;           &lt;Title&gt;Default Line&lt;/Title&gt;           &lt;Abstract&gt;A sample style that draws a line&lt;/Abstract&gt;           &lt;!-- FeatureTypeStyles describe how to render different features --&gt;           &lt;!-- A FeatureTypeStyle for rendering lines --&gt;           &lt;FeatureTypeStyle&gt;             &lt;Rule&gt;               &lt;Name&gt;rule1&lt;/Name&gt;               &lt;Title&gt;Blue Line&lt;/Title&gt;               &lt;Abstract&gt;A solid blue line with a 1 pixel width&lt;/Abstract&gt;               &lt;LineSymbolizer&gt;                 &lt;Stroke&gt;                   &lt;CssParameter name&#x3D;\&quot;stroke\&quot;&gt;#0000FF&lt;/CssParameter&gt;                 &lt;/Stroke&gt;               &lt;/LineSymbolizer&gt;             &lt;/Rule&gt;           &lt;/FeatureTypeStyle&gt;         &lt;/UserStyle&gt;       &lt;/NamedLayer&gt;     &lt;/StyledLayerDescriptor&gt;     &#x60;&#x60;&#x60; 
     * @param {boolean} [raw] When set to \&quot;true\&quot;, will forgo parsing and encoding of the uploaded style content, and instead the style will be streamed directly to the GeoServer configuration. Use this setting if the content and formatting of the style is to be preserved exactly. May result in an invalid and unusable style if the payload is malformed. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default). Only used when uploading a style file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWorkspaceStyle(workspace: string, style: string, styleBody: StyleInfoPost, raw?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).putWorkspaceStyle(workspace, style, styleBody, raw, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new style, or use PUT with /workspaces/{workspace}/styles/{style} to edit/upload an existing style.
     * @param {string} workspace Name of workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWorkspaceStyles(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).putWorkspaceStyles(workspace, options).then((request) => request(this.axios, this.basePath));
    }

}


