// tslint:disable
/**
 * GeoServer Importer Extension - Data
 * The Importer extension gives a GeoServer administrator an alternate, more-streamlined method for uploading and configuring new layers. The data endpoint controls uploading layer data to specific import jobs. The importer extension is an optional install and may not be available on all deployments of GeoServer
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * An import data object representing a database
 * @export
 * @interface Database
 */
export interface Database {
    /**
     * \"database\"
     * @type {string}
     * @memberof Database
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Database
     */
    format?: string;
    /**
     * URL to the database endpoint
     * @type {string}
     * @memberof Database
     */
    href?: string;
    /**
     * Database connection parameters. Actual paramaters vary depending on the type of database.
     * @type {object}
     * @memberof Database
     */
    properties?: object;
    /**
     * 
     * @type {Array<Table>}
     * @memberof Database
     */
    tables?: Array<Table>;
}
/**
 * An import data object representing a directory of spatial files or an image mosaic
 * @export
 * @interface Directory
 */
export interface Directory {
    /**
     * \"directory\" or \"mosaic\"
     * @type {string}
     * @memberof Directory
     */
    type?: string;
    /**
     * Absolute system path to the directory
     * @type {string}
     * @memberof Directory
     */
    location?: string;
    /**
     * URL to the directory endpoint
     * @type {string}
     * @memberof Directory
     */
    href?: string;
    /**
     * Charset encoding of the data
     * @type {string}
     * @memberof Directory
     */
    charset?: string;
    /**
     * List of file descriptors
     * @type {Array<FileContents>}
     * @memberof Directory
     */
    files?: Array<FileContents>;
}
/**
 * Description of a spatial file or granule
 * @export
 * @interface FileContents
 */
export interface FileContents {
    /**
     * Name of the file
     * @type {string}
     * @memberof FileContents
     */
    file?: string;
    /**
     * URL to the file endpoint
     * @type {string}
     * @memberof FileContents
     */
    href?: string;
    /**
     * Name of the .prj file, if applicable
     * @type {string}
     * @memberof FileContents
     */
    prj?: string;
    /**
     * List of other files that comprise this spatial file.
     * @type {Array<string>}
     * @memberof FileContents
     */
    other?: Array<string>;
}
/**
 * An import data object representing a spatial file or granule
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * \"file\"
     * @type {string}
     * @memberof ModelFile
     */
    type?: string;
    /**
     * Format of the file
     * @type {string}
     * @memberof ModelFile
     */
    format?: string;
    /**
     * URL to the file endpoint
     * @type {string}
     * @memberof ModelFile
     */
    href?: string;
    /**
     * Absolute system path to the file
     * @type {string}
     * @memberof ModelFile
     */
    location?: string;
    /**
     * The charset encoding of the data
     * @type {string}
     * @memberof ModelFile
     */
    charset?: string;
    /**
     * Name of the file
     * @type {string}
     * @memberof ModelFile
     */
    file?: string;
    /**
     * Name of the .prj file, if applicable
     * @type {string}
     * @memberof ModelFile
     */
    prj?: string;
    /**
     * List of other files that comprise this spatial file.
     * @type {Array<string>}
     * @memberof ModelFile
     */
    other?: Array<string>;
    /**
     * A message about the import data.
     * @type {string}
     * @memberof ModelFile
     */
    message?: string;
}
/**
 * An import data object representing a a database table
 * @export
 * @interface Table
 */
export interface Table {
    /**
     * \"table\"
     * @type {string}
     * @memberof Table
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Table
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Table
     */
    format?: string;
    /**
     * URL to the table endpoint
     * @type {string}
     * @memberof Table
     */
    href?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Remove a specific file with id {filename} from the import with id {importId}. Only applies to file/directory imports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImportDataFile: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/imports/{importId}/data/files/{filename}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a specific file with id {filename} from the task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskDataFile: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/imports/{importId}/tasks/{taskId}/data/files/{filename}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get import data
         * @summary Retrieve the database connection parameters for an import with id {importId}. Only applies to database imports.
         * @param {string} importId The ID of the import
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getData: async (importId: string, expand?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling getData.');
            }
            const localVarPath = `/imports/{importId}/data`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve information about the file with id {fileId} from the data of an import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} filename The filename
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFile: async (importId: string, filename: string, expand?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling getDataFile.');
            }
            // verify required parameter 'filename' is not null or undefined
            if (filename === null || filename === undefined) {
                throw new RequiredError('filename','Required parameter filename was null or undefined when calling getDataFile.');
            }
            const localVarPath = `/imports/{importId}/data/files/{filename}`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the list of files for an import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFiles: async (importId: string, expand?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling getDataFiles.');
            }
            const localVarPath = `/imports/{importId}/data/files`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the table description for a task with id {taskId} within import with id {importId}. Only applies to database imports.
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskData: async (importId: string, taskId: string, expand?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling getTaskData.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling getTaskData.');
            }
            const localVarPath = `/imports/{importId}/tasks/{taskId}/data`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve information about the file with id {fileId} from the data of a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} filename The filename
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskDataFile: async (importId: string, taskId: string, filename: string, expand?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling getTaskDataFile.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling getTaskDataFile.');
            }
            // verify required parameter 'filename' is not null or undefined
            if (filename === null || filename === undefined) {
                throw new RequiredError('filename','Required parameter filename was null or undefined when calling getTaskDataFile.');
            }
            const localVarPath = `/imports/{importId}/tasks/{taskId}/data/files/{filename}`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve the list of files for a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskDataFiles: async (importId: string, taskId: string, expand?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'importId' is not null or undefined
            if (importId === null || importId === undefined) {
                throw new RequiredError('importId','Required parameter importId was null or undefined when calling getTaskDataFiles.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling getTaskDataFiles.');
            }
            const localVarPath = `/imports/{importId}/tasks/{taskId}/data/files`
                .replace(`{${"importId"}}`, encodeURIComponent(String(importId)))
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Remove a specific file with id {filename} from the import with id {importId}. Only applies to file/directory imports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImportDataFile(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteImportDataFile(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Remove a specific file with id {filename} from the task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTaskDataFile(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteTaskDataFile(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get import data
         * @summary Retrieve the database connection parameters for an import with id {importId}. Only applies to database imports.
         * @param {string} importId The ID of the import
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getData(importId: string, expand?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Database>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getData(importId, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve information about the file with id {fileId} from the data of an import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} filename The filename
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataFile(importId: string, filename: string, expand?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDataFile(importId, filename, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve the list of files for an import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataFiles(importId: string, expand?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Directory>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDataFiles(importId, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve the table description for a task with id {taskId} within import with id {importId}. Only applies to database imports.
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskData(importId: string, taskId: string, expand?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Table>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTaskData(importId, taskId, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve information about the file with id {fileId} from the data of a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} filename The filename
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskDataFile(importId: string, taskId: string, filename: string, expand?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTaskDataFile(importId, taskId, filename, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieve the list of files for a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskDataFiles(importId: string, taskId: string, expand?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Directory>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTaskDataFiles(importId, taskId, expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Remove a specific file with id {filename} from the import with id {importId}. Only applies to file/directory imports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImportDataFile(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteImportDataFile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a specific file with id {filename} from the task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTaskDataFile(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteTaskDataFile(options).then((request) => request(axios, basePath));
        },
        /**
         * Get import data
         * @summary Retrieve the database connection parameters for an import with id {importId}. Only applies to database imports.
         * @param {string} importId The ID of the import
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getData(importId: string, expand?: string, options?: any): AxiosPromise<Database> {
            return DefaultApiFp(configuration).getData(importId, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve information about the file with id {fileId} from the data of an import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} filename The filename
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFile(importId: string, filename: string, expand?: string, options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).getDataFile(importId, filename, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the list of files for an import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataFiles(importId: string, expand?: string, options?: any): AxiosPromise<Directory> {
            return DefaultApiFp(configuration).getDataFiles(importId, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the table description for a task with id {taskId} within import with id {importId}. Only applies to database imports.
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskData(importId: string, taskId: string, expand?: string, options?: any): AxiosPromise<Table> {
            return DefaultApiFp(configuration).getTaskData(importId, taskId, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve information about the file with id {fileId} from the data of a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} filename The filename
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskDataFile(importId: string, taskId: string, filename: string, expand?: string, options?: any): AxiosPromise<any> {
            return DefaultApiFp(configuration).getTaskDataFile(importId, taskId, filename, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve the list of files for a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
         * @param {string} importId The ID of the import
         * @param {string} taskId The ID of the task
         * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskDataFiles(importId: string, taskId: string, expand?: string, options?: any): AxiosPromise<Directory> {
            return DefaultApiFp(configuration).getTaskDataFiles(importId, taskId, expand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Remove a specific file with id {filename} from the import with id {importId}. Only applies to file/directory imports.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteImportDataFile(options?: any): AxiosPromise<void>;

    /**
     * 
     * @summary Remove a specific file with id {filename} from the task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteTaskDataFile(options?: any): AxiosPromise<void>;

    /**
     * Get import data
     * @summary Retrieve the database connection parameters for an import with id {importId}. Only applies to database imports.
     * @param {string} importId The ID of the import
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getData(importId: string, expand?: string, options?: any): AxiosPromise<Database>;

    /**
     * 
     * @summary Retrieve information about the file with id {fileId} from the data of an import with id {importId}. Only applies to file/directory imports.
     * @param {string} importId The ID of the import
     * @param {string} filename The filename
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDataFile(importId: string, filename: string, expand?: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Retrieve the list of files for an import with id {importId}. Only applies to file/directory imports.
     * @param {string} importId The ID of the import
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getDataFiles(importId: string, expand?: string, options?: any): AxiosPromise<Directory>;

    /**
     * 
     * @summary Retrieve the table description for a task with id {taskId} within import with id {importId}. Only applies to database imports.
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTaskData(importId: string, taskId: string, expand?: string, options?: any): AxiosPromise<Table>;

    /**
     * 
     * @summary Retrieve information about the file with id {fileId} from the data of a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} filename The filename
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTaskDataFile(importId: string, taskId: string, filename: string, expand?: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @summary Retrieve the list of files for a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTaskDataFiles(importId: string, taskId: string, expand?: string, options?: any): AxiosPromise<Directory>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Remove a specific file with id {filename} from the import with id {importId}. Only applies to file/directory imports.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteImportDataFile(options?: any) {
        return DefaultApiFp(this.configuration).deleteImportDataFile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a specific file with id {filename} from the task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTaskDataFile(options?: any) {
        return DefaultApiFp(this.configuration).deleteTaskDataFile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get import data
     * @summary Retrieve the database connection parameters for an import with id {importId}. Only applies to database imports.
     * @param {string} importId The ID of the import
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getData(importId: string, expand?: string, options?: any) {
        return DefaultApiFp(this.configuration).getData(importId, expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve information about the file with id {fileId} from the data of an import with id {importId}. Only applies to file/directory imports.
     * @param {string} importId The ID of the import
     * @param {string} filename The filename
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDataFile(importId: string, filename: string, expand?: string, options?: any) {
        return DefaultApiFp(this.configuration).getDataFile(importId, filename, expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the list of files for an import with id {importId}. Only applies to file/directory imports.
     * @param {string} importId The ID of the import
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDataFiles(importId: string, expand?: string, options?: any) {
        return DefaultApiFp(this.configuration).getDataFiles(importId, expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the table description for a task with id {taskId} within import with id {importId}. Only applies to database imports.
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTaskData(importId: string, taskId: string, expand?: string, options?: any) {
        return DefaultApiFp(this.configuration).getTaskData(importId, taskId, expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve information about the file with id {fileId} from the data of a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} filename The filename
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTaskDataFile(importId: string, taskId: string, filename: string, expand?: string, options?: any) {
        return DefaultApiFp(this.configuration).getTaskDataFile(importId, taskId, filename, expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve the list of files for a task with id {taskId} within import with id {importId}. Only applies to file/directory imports.
     * @param {string} importId The ID of the import
     * @param {string} taskId The ID of the task
     * @param {string} [expand] What level to expand the response object to. Can be \&quot;self\&quot; (expand only the response object and its immediate children), \&quot;all\&quot; (expand all children), \&quot;none\&quot; (don\&#39;t include any children), or a nonnegative integer, indicating the depth of children to expand to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTaskDataFiles(importId: string, taskId: string, expand?: string, options?: any) {
        return DefaultApiFp(this.configuration).getTaskDataFiles(importId, taskId, expand, options).then((request) => request(this.axios, this.basePath));
    }

}


