// tslint:disable
/**
 * GeoServer Metadata Community Module
 * Customized Metadata Bulk Operations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove ALL custom metadata from ALL layers. All template links are removed. Used for testing and debugging.
         * @summary Delete all custom metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calls routine operations that may fix corrupted custom metadata in all layers. Used for testing and debugging.
         * @summary Fix all custom metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataFixGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/fix`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Will perform a bulk import and/or template linking for every layer specified in CSV file. CSV file must be of form \"prefix:layername; [geonetwork-id] [; template-1 [;template-2 ... ] ]\" Existing template links will be removed first.
         * @summary Bulk import from geonetwork and/or template linking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataImportPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/import`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * With respect to your custom-to-native mapping file (see general documentation), this operation will perform an opposite synchronization from native fields to custom fields.
         * @summary Perform native-to-custom mapping for all layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataNativeToCustomGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/nativeToCustom`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * With respect to your custom-to-native mapping file (see metadata module documentation), this operation will perform an opposite synchronization from native fields to custom fields. Your body must be a list layers, where each row is of the form \"prefix:layername\".
         * @summary Perform native-to-custom mapping for selected layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataNativeToCustomPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/nativeToCustom`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Remove ALL custom metadata from ALL layers. All template links are removed. Used for testing and debugging.
         * @summary Delete all custom metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).metadataDelete(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Calls routine operations that may fix corrupted custom metadata in all layers. Used for testing and debugging.
         * @summary Fix all custom metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataFixGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).metadataFixGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Will perform a bulk import and/or template linking for every layer specified in CSV file. CSV file must be of form \"prefix:layername; [geonetwork-id] [; template-1 [;template-2 ... ] ]\" Existing template links will be removed first.
         * @summary Bulk import from geonetwork and/or template linking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataImportPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).metadataImportPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * With respect to your custom-to-native mapping file (see general documentation), this operation will perform an opposite synchronization from native fields to custom fields.
         * @summary Perform native-to-custom mapping for all layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataNativeToCustomGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).metadataNativeToCustomGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * With respect to your custom-to-native mapping file (see metadata module documentation), this operation will perform an opposite synchronization from native fields to custom fields. Your body must be a list layers, where each row is of the form \"prefix:layername\".
         * @summary Perform native-to-custom mapping for selected layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataNativeToCustomPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).metadataNativeToCustomPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Remove ALL custom metadata from ALL layers. All template links are removed. Used for testing and debugging.
         * @summary Delete all custom metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataDelete(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).metadataDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Calls routine operations that may fix corrupted custom metadata in all layers. Used for testing and debugging.
         * @summary Fix all custom metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataFixGet(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).metadataFixGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Will perform a bulk import and/or template linking for every layer specified in CSV file. CSV file must be of form \"prefix:layername; [geonetwork-id] [; template-1 [;template-2 ... ] ]\" Existing template links will be removed first.
         * @summary Bulk import from geonetwork and/or template linking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataImportPost(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).metadataImportPost(options).then((request) => request(axios, basePath));
        },
        /**
         * With respect to your custom-to-native mapping file (see general documentation), this operation will perform an opposite synchronization from native fields to custom fields.
         * @summary Perform native-to-custom mapping for all layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataNativeToCustomGet(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).metadataNativeToCustomGet(options).then((request) => request(axios, basePath));
        },
        /**
         * With respect to your custom-to-native mapping file (see metadata module documentation), this operation will perform an opposite synchronization from native fields to custom fields. Your body must be a list layers, where each row is of the form \"prefix:layername\".
         * @summary Perform native-to-custom mapping for selected layers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataNativeToCustomPost(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).metadataNativeToCustomPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Remove ALL custom metadata from ALL layers. All template links are removed. Used for testing and debugging.
     * @summary Delete all custom metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metadataDelete(options?: any): AxiosPromise<void>;

    /**
     * Calls routine operations that may fix corrupted custom metadata in all layers. Used for testing and debugging.
     * @summary Fix all custom metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metadataFixGet(options?: any): AxiosPromise<void>;

    /**
     * Will perform a bulk import and/or template linking for every layer specified in CSV file. CSV file must be of form \"prefix:layername; [geonetwork-id] [; template-1 [;template-2 ... ] ]\" Existing template links will be removed first.
     * @summary Bulk import from geonetwork and/or template linking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metadataImportPost(options?: any): AxiosPromise<void>;

    /**
     * With respect to your custom-to-native mapping file (see general documentation), this operation will perform an opposite synchronization from native fields to custom fields.
     * @summary Perform native-to-custom mapping for all layers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metadataNativeToCustomGet(options?: any): AxiosPromise<void>;

    /**
     * With respect to your custom-to-native mapping file (see metadata module documentation), this operation will perform an opposite synchronization from native fields to custom fields. Your body must be a list layers, where each row is of the form \"prefix:layername\".
     * @summary Perform native-to-custom mapping for selected layers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metadataNativeToCustomPost(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Remove ALL custom metadata from ALL layers. All template links are removed. Used for testing and debugging.
     * @summary Delete all custom metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataDelete(options?: any) {
        return DefaultApiFp(this.configuration).metadataDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calls routine operations that may fix corrupted custom metadata in all layers. Used for testing and debugging.
     * @summary Fix all custom metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataFixGet(options?: any) {
        return DefaultApiFp(this.configuration).metadataFixGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Will perform a bulk import and/or template linking for every layer specified in CSV file. CSV file must be of form \"prefix:layername; [geonetwork-id] [; template-1 [;template-2 ... ] ]\" Existing template links will be removed first.
     * @summary Bulk import from geonetwork and/or template linking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataImportPost(options?: any) {
        return DefaultApiFp(this.configuration).metadataImportPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * With respect to your custom-to-native mapping file (see general documentation), this operation will perform an opposite synchronization from native fields to custom fields.
     * @summary Perform native-to-custom mapping for all layers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataNativeToCustomGet(options?: any) {
        return DefaultApiFp(this.configuration).metadataNativeToCustomGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * With respect to your custom-to-native mapping file (see metadata module documentation), this operation will perform an opposite synchronization from native fields to custom fields. Your body must be a list layers, where each row is of the form \"prefix:layername\".
     * @summary Perform native-to-custom mapping for selected layers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataNativeToCustomPost(options?: any) {
        return DefaultApiFp(this.configuration).metadataNativeToCustomPost(options).then((request) => request(this.axios, this.basePath));
    }

}


