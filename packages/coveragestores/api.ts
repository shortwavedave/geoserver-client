// tslint:disable
/**
 * GeoServer CoverageStores
 * A coverage store describes how access a raster data source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CoverageStoreInfo
 */
export interface CoverageStoreInfo {
    /**
     * Name of the coverage store
     * @type {string}
     * @memberof CoverageStoreInfo
     */
    name: string;
    /**
     * Description of the coverage store
     * @type {string}
     * @memberof CoverageStoreInfo
     */
    description?: string;
    /**
     * Type of coverage store
     * @type {string}
     * @memberof CoverageStoreInfo
     */
    type: string;
    /**
     * Whether the store is enabled, or not
     * @type {boolean}
     * @memberof CoverageStoreInfo
     */
    enabled?: boolean;
    /**
     * 
     * @type {CoverageStoreInfoWorkspace}
     * @memberof CoverageStoreInfo
     */
    workspace?: CoverageStoreInfoWorkspace;
    /**
     * Whether the store is the default store of the workspace
     * @type {boolean}
     * @memberof CoverageStoreInfo
     */
    __default__?: boolean;
    /**
     * Location of the raster data source (often, but not necessarily, a file). Can be relative to the data directory.
     * @type {string}
     * @memberof CoverageStoreInfo
     */
    url?: string;
    /**
     * 
     * @type {CoverageStoreInfoCoverages}
     * @memberof CoverageStoreInfo
     */
    coverages?: CoverageStoreInfoCoverages;
}
/**
 * 
 * @export
 * @interface CoverageStoreInfoCoverages
 */
export interface CoverageStoreInfoCoverages {
    /**
     * A link to the list of coverages contained in this store
     * @type {string}
     * @memberof CoverageStoreInfoCoverages
     */
    link?: string;
}
/**
 * The workspace containing the store
 * @export
 * @interface CoverageStoreInfoWorkspace
 */
export interface CoverageStoreInfoWorkspace {
    /**
     * Name of the workspace
     * @type {string}
     * @memberof CoverageStoreInfoWorkspace
     */
    name: string;
    /**
     * A link to the workspace representation
     * @type {string}
     * @memberof CoverageStoreInfoWorkspace
     */
    link?: string;
}
/**
 * 
 * @export
 * @interface CoverageStoreListItem
 */
export interface CoverageStoreListItem {
    /**
     * Name of coverage store
     * @type {string}
     * @memberof CoverageStoreListItem
     */
    name?: string;
    /**
     * URL to coverage store definition
     * @type {string}
     * @memberof CoverageStoreListItem
     */
    href?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a coverage store
         * @summary Delete coverage store
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot;, \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved. When set to \&quot;metadata\&quot; delete only auxiliary files and metadata. Itâ€™s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
         * @param {boolean} [recurse] The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoverageStore: async (workspace: string, store: string, purge?: string, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteCoverageStore.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling deleteCoverageStore.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (purge !== undefined) {
                localVarQueryParameter['purge'] = purge;
            }

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid, only used for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoverageStoreUpload: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/{method}.{format}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use /coverage/{style} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoverageStores: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a representation of the coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/{store}.xml\" for XML). Defaults to HTML representation.
         * @summary Get a coverage store named {store} in the {workspace} workspace
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {boolean} [quietOnNotFound] When set to true, avoids logging an Exception when the coverage store is not present. Note that 404 status code will be returned anyway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoverageStore: async (workspace: string, store: string, quietOnNotFound?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getCoverageStore.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling getCoverageStore.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quietOnNotFound !== undefined) {
                localVarQueryParameter['quietOnNotFound'] = quietOnNotFound;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid, only used for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoverageStoreUpload: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/{method}.{format}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/coveragestores.xml\" for XML). Defaults to HTML representation.
         * @summary Get a list of all coverage stores in {workspace}
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoverageStores: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getCoverageStores.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST on /workspaces/{workspace}/coveragestores for adding a new coverage store, or PUT on /workspaces/{workspace}/coveragestores/{store} to edit/upload an existing coverage store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCoverageStore: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Used to harvest new granules in a writable structured grid coverage reader (e.g., image mosaic). Attempting to harvest a file into any other reader will result in a HTTP 405, method not allowed. Multiple granules can be uploaded by wrapping them in a ZIP file.
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
         * @param {string} format The type of target coverage store (e.g., \&quot;imagemosaic\&quot;)
         * @param {string} [filename] The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method&#x3D;\&quot;file\&quot;.
         * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCoverageStoreUpload: async (workspace: string, store: string, method: string, format: string, filename?: string, updateBBox?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postCoverageStoreUpload.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling postCoverageStoreUpload.');
            }
            // verify required parameter 'method' is not null or undefined
            if (method === null || method === undefined) {
                throw new RequiredError('method','Required parameter method was null or undefined when calling postCoverageStoreUpload.');
            }
            // verify required parameter 'format' is not null or undefined
            if (format === null || format === undefined) {
                throw new RequiredError('format','Required parameter format was null or undefined when calling postCoverageStoreUpload.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/{method}.{format}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"method"}}`, encodeURIComponent(String(method)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }

            if (updateBBox !== undefined) {
                localVarQueryParameter['updateBBox'] = updateBBox;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new coverage store entry to the server.
         * @summary Add a new coverage store
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {CoverageStoreInfo} coverageStoreBody The coverage store body information to upload.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;coverageStore&gt;     &lt;name&gt;nyc&lt;/name&gt;     &lt;url&gt;file:/path/to/file.tiff&lt;/url&gt;   &lt;/coverageStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;coverageStore\&quot;: {       \&quot;name\&quot;: \&quot;nyc\&quot;,       \&quot;url\&quot;: \&quot;file:/path/to/file.tiff\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCoverageStores: async (workspace: string, coverageStoreBody: CoverageStoreInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postCoverageStores.');
            }
            // verify required parameter 'coverageStoreBody' is not null or undefined
            if (coverageStoreBody === null || coverageStoreBody === undefined) {
                throw new RequiredError('coverageStoreBody','Required parameter coverageStoreBody was null or undefined when calling postCoverageStores.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof coverageStoreBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(coverageStoreBody !== undefined ? coverageStoreBody : {}) : (coverageStoreBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies a single coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).
         * @summary Modify a single coverage store.
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {CoverageStoreInfo} coverageStoreBody The coverage store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;coverageStore&gt;     &lt;description&gt;A coverage store&lt;/description&gt;     &lt;enabled&gt;true&lt;/enabled&gt;     &lt;__default&gt;true&lt;/__default&gt;     &lt;url&gt;file:/path/to/file.tiff&lt;/url&gt;   &lt;/coverageStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;coverageStore\&quot;: {       \&quot;description\&quot;: \&quot;A coverage store\&quot;,       \&quot;enabled\&quot;: \&quot;true\&quot;,       \&quot;_default\&quot;: \&quot;true\&quot;,       \&quot;url\&quot;: \&quot;file:/path/to/file.tiff\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCoverageStore: async (workspace: string, store: string, coverageStoreBody: CoverageStoreInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putCoverageStore.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling putCoverageStore.');
            }
            // verify required parameter 'coverageStoreBody' is not null or undefined
            if (coverageStoreBody === null || coverageStoreBody === undefined) {
                throw new RequiredError('coverageStoreBody','Required parameter coverageStoreBody was null or undefined when calling putCoverageStore.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof coverageStoreBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(coverageStoreBody !== undefined ? coverageStoreBody : {}) : (coverageStoreBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates or modified a single coverage store by uploading its raster data files. Multi-file stores like mosaic can be created by uploading a zip file and setting the content type to \"application/zip\"
         * @summary Creates or overwrites the files for a coverage store
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
         * @param {string} format The type of target coverage store (e.g., \&quot;imagemosaic\&quot;)
         * @param {string} [configure] The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \&quot;none\&quot; to avoid configuring coverages.
         * @param {string} [uSEJAIIMAGEREAD] Whether to use deferred loading while configuring the coverage/layer.
         * @param {string} [coverageName] Name of the newly created coverage/layer.
         * @param {string} [filename] The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method&#x3D;\&quot;file\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCoverageStoreUpload: async (workspace: string, store: string, method: string, format: string, configure?: string, uSEJAIIMAGEREAD?: string, coverageName?: string, filename?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putCoverageStoreUpload.');
            }
            // verify required parameter 'store' is not null or undefined
            if (store === null || store === undefined) {
                throw new RequiredError('store','Required parameter store was null or undefined when calling putCoverageStoreUpload.');
            }
            // verify required parameter 'method' is not null or undefined
            if (method === null || method === undefined) {
                throw new RequiredError('method','Required parameter method was null or undefined when calling putCoverageStoreUpload.');
            }
            // verify required parameter 'format' is not null or undefined
            if (format === null || format === undefined) {
                throw new RequiredError('format','Required parameter format was null or undefined when calling putCoverageStoreUpload.');
            }
            const localVarPath = `/workspaces/{workspace}/coveragestores/{store}/{method}.{format}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"store"}}`, encodeURIComponent(String(store)))
                .replace(`{${"method"}}`, encodeURIComponent(String(method)))
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (configure !== undefined) {
                localVarQueryParameter['configure'] = configure;
            }

            if (uSEJAIIMAGEREAD !== undefined) {
                localVarQueryParameter['USE_JAI_IMAGEREAD'] = uSEJAIIMAGEREAD;
            }

            if (coverageName !== undefined) {
                localVarQueryParameter['coverageName'] = coverageName;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new coverage store, or PUT on /coveragestores/{store} to edit/upload an existing coverage store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCoverageStores: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/coveragestores`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a coverage store
         * @summary Delete coverage store
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot;, \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved. When set to \&quot;metadata\&quot; delete only auxiliary files and metadata. Itâ€™s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
         * @param {boolean} [recurse] The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCoverageStore(workspace: string, store: string, purge?: string, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteCoverageStore(workspace, store, purge, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid, only used for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCoverageStoreUpload(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteCoverageStoreUpload(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use /coverage/{style} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCoverageStores(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteCoverageStores(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a representation of the coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/{store}.xml\" for XML). Defaults to HTML representation.
         * @summary Get a coverage store named {store} in the {workspace} workspace
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {boolean} [quietOnNotFound] When set to true, avoids logging an Exception when the coverage store is not present. Note that 404 status code will be returned anyway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoverageStore(workspace: string, store: string, quietOnNotFound?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoverageStoreInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCoverageStore(workspace, store, quietOnNotFound, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid, only used for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoverageStoreUpload(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCoverageStoreUpload(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/coveragestores.xml\" for XML). Defaults to HTML representation.
         * @summary Get a list of all coverage stores in {workspace}
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoverageStores(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CoverageStoreListItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCoverageStores(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST on /workspaces/{workspace}/coveragestores for adding a new coverage store, or PUT on /workspaces/{workspace}/coveragestores/{store} to edit/upload an existing coverage store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCoverageStore(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postCoverageStore(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Used to harvest new granules in a writable structured grid coverage reader (e.g., image mosaic). Attempting to harvest a file into any other reader will result in a HTTP 405, method not allowed. Multiple granules can be uploaded by wrapping them in a ZIP file.
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
         * @param {string} format The type of target coverage store (e.g., \&quot;imagemosaic\&quot;)
         * @param {string} [filename] The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method&#x3D;\&quot;file\&quot;.
         * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCoverageStoreUpload(workspace: string, store: string, method: string, format: string, filename?: string, updateBBox?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postCoverageStoreUpload(workspace, store, method, format, filename, updateBBox, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new coverage store entry to the server.
         * @summary Add a new coverage store
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {CoverageStoreInfo} coverageStoreBody The coverage store body information to upload.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;coverageStore&gt;     &lt;name&gt;nyc&lt;/name&gt;     &lt;url&gt;file:/path/to/file.tiff&lt;/url&gt;   &lt;/coverageStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;coverageStore\&quot;: {       \&quot;name\&quot;: \&quot;nyc\&quot;,       \&quot;url\&quot;: \&quot;file:/path/to/file.tiff\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCoverageStores(workspace: string, coverageStoreBody: CoverageStoreInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postCoverageStores(workspace, coverageStoreBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies a single coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).
         * @summary Modify a single coverage store.
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {CoverageStoreInfo} coverageStoreBody The coverage store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;coverageStore&gt;     &lt;description&gt;A coverage store&lt;/description&gt;     &lt;enabled&gt;true&lt;/enabled&gt;     &lt;__default&gt;true&lt;/__default&gt;     &lt;url&gt;file:/path/to/file.tiff&lt;/url&gt;   &lt;/coverageStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;coverageStore\&quot;: {       \&quot;description\&quot;: \&quot;A coverage store\&quot;,       \&quot;enabled\&quot;: \&quot;true\&quot;,       \&quot;_default\&quot;: \&quot;true\&quot;,       \&quot;url\&quot;: \&quot;file:/path/to/file.tiff\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCoverageStore(workspace: string, store: string, coverageStoreBody: CoverageStoreInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putCoverageStore(workspace, store, coverageStoreBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates or modified a single coverage store by uploading its raster data files. Multi-file stores like mosaic can be created by uploading a zip file and setting the content type to \"application/zip\"
         * @summary Creates or overwrites the files for a coverage store
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
         * @param {string} format The type of target coverage store (e.g., \&quot;imagemosaic\&quot;)
         * @param {string} [configure] The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \&quot;none\&quot; to avoid configuring coverages.
         * @param {string} [uSEJAIIMAGEREAD] Whether to use deferred loading while configuring the coverage/layer.
         * @param {string} [coverageName] Name of the newly created coverage/layer.
         * @param {string} [filename] The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method&#x3D;\&quot;file\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCoverageStoreUpload(workspace: string, store: string, method: string, format: string, configure?: string, uSEJAIIMAGEREAD?: string, coverageName?: string, filename?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putCoverageStoreUpload(workspace, store, method, format, configure, uSEJAIIMAGEREAD, coverageName, filename, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new coverage store, or PUT on /coveragestores/{store} to edit/upload an existing coverage store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCoverageStores(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putCoverageStores(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a coverage store
         * @summary Delete coverage store
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot;, \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved. When set to \&quot;metadata\&quot; delete only auxiliary files and metadata. Itâ€™s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
         * @param {boolean} [recurse] The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoverageStore(workspace: string, store: string, purge?: string, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteCoverageStore(workspace, store, purge, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid, only used for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoverageStoreUpload(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteCoverageStoreUpload(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use /coverage/{style} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoverageStores(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteCoverageStores(options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a representation of the coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/{store}.xml\" for XML). Defaults to HTML representation.
         * @summary Get a coverage store named {store} in the {workspace} workspace
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {boolean} [quietOnNotFound] When set to true, avoids logging an Exception when the coverage store is not present. Note that 404 status code will be returned anyway.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoverageStore(workspace: string, store: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<CoverageStoreInfo> {
            return DefaultApiFp(configuration).getCoverageStore(workspace, store, quietOnNotFound, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid, only used for uploads
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoverageStoreUpload(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).getCoverageStoreUpload(options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/coveragestores.xml\" for XML). Defaults to HTML representation.
         * @summary Get a list of all coverage stores in {workspace}
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoverageStores(workspace: string, options?: any): AxiosPromise<Array<CoverageStoreListItem>> {
            return DefaultApiFp(configuration).getCoverageStores(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST on /workspaces/{workspace}/coveragestores for adding a new coverage store, or PUT on /workspaces/{workspace}/coveragestores/{store} to edit/upload an existing coverage store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCoverageStore(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postCoverageStore(options).then((request) => request(axios, basePath));
        },
        /**
         * Used to harvest new granules in a writable structured grid coverage reader (e.g., image mosaic). Attempting to harvest a file into any other reader will result in a HTTP 405, method not allowed. Multiple granules can be uploaded by wrapping them in a ZIP file.
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
         * @param {string} format The type of target coverage store (e.g., \&quot;imagemosaic\&quot;)
         * @param {string} [filename] The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method&#x3D;\&quot;file\&quot;.
         * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCoverageStoreUpload(workspace: string, store: string, method: string, format: string, filename?: string, updateBBox?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postCoverageStoreUpload(workspace, store, method, format, filename, updateBBox, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new coverage store entry to the server.
         * @summary Add a new coverage store
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {CoverageStoreInfo} coverageStoreBody The coverage store body information to upload.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;coverageStore&gt;     &lt;name&gt;nyc&lt;/name&gt;     &lt;url&gt;file:/path/to/file.tiff&lt;/url&gt;   &lt;/coverageStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;coverageStore\&quot;: {       \&quot;name\&quot;: \&quot;nyc\&quot;,       \&quot;url\&quot;: \&quot;file:/path/to/file.tiff\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCoverageStores(workspace: string, coverageStoreBody: CoverageStoreInfo, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).postCoverageStores(workspace, coverageStoreBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies a single coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).
         * @summary Modify a single coverage store.
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {CoverageStoreInfo} coverageStoreBody The coverage store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;coverageStore&gt;     &lt;description&gt;A coverage store&lt;/description&gt;     &lt;enabled&gt;true&lt;/enabled&gt;     &lt;__default&gt;true&lt;/__default&gt;     &lt;url&gt;file:/path/to/file.tiff&lt;/url&gt;   &lt;/coverageStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;coverageStore\&quot;: {       \&quot;description\&quot;: \&quot;A coverage store\&quot;,       \&quot;enabled\&quot;: \&quot;true\&quot;,       \&quot;_default\&quot;: \&quot;true\&quot;,       \&quot;url\&quot;: \&quot;file:/path/to/file.tiff\&quot;     }   }   &#x60;&#x60;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCoverageStore(workspace: string, store: string, coverageStoreBody: CoverageStoreInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putCoverageStore(workspace, store, coverageStoreBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates or modified a single coverage store by uploading its raster data files. Multi-file stores like mosaic can be created by uploading a zip file and setting the content type to \"application/zip\"
         * @summary Creates or overwrites the files for a coverage store
         * @param {string} workspace The name of the workspace containing the coverage stores.
         * @param {string} store The name of the store to be retrieved
         * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
         * @param {string} format The type of target coverage store (e.g., \&quot;imagemosaic\&quot;)
         * @param {string} [configure] The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \&quot;none\&quot; to avoid configuring coverages.
         * @param {string} [uSEJAIIMAGEREAD] Whether to use deferred loading while configuring the coverage/layer.
         * @param {string} [coverageName] Name of the newly created coverage/layer.
         * @param {string} [filename] The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method&#x3D;\&quot;file\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCoverageStoreUpload(workspace: string, store: string, method: string, format: string, configure?: string, uSEJAIIMAGEREAD?: string, coverageName?: string, filename?: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putCoverageStoreUpload(workspace, store, method, format, configure, uSEJAIIMAGEREAD, coverageName, filename, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new coverage store, or PUT on /coveragestores/{store} to edit/upload an existing coverage store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCoverageStores(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putCoverageStores(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Deletes a coverage store
     * @summary Delete coverage store
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot;, \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved. When set to \&quot;metadata\&quot; delete only auxiliary files and metadata. Itâ€™s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
     * @param {boolean} [recurse] The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \&quot;false\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteCoverageStore(workspace: string, store: string, purge?: string, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid, only used for uploads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteCoverageStoreUpload(options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use /coverage/{style} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteCoverageStores(options?: any): AxiosPromise<void>;

    /**
     * Displays a representation of the coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/{store}.xml\" for XML). Defaults to HTML representation.
     * @summary Get a coverage store named {store} in the {workspace} workspace
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {boolean} [quietOnNotFound] When set to true, avoids logging an Exception when the coverage store is not present. Note that 404 status code will be returned anyway.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCoverageStore(workspace: string, store: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<CoverageStoreInfo>;

    /**
     * Invalid, only used for uploads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCoverageStoreUpload(options?: any): AxiosPromise<void>;

    /**
     * Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/coveragestores.xml\" for XML). Defaults to HTML representation.
     * @summary Get a list of all coverage stores in {workspace}
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getCoverageStores(workspace: string, options?: any): AxiosPromise<Array<CoverageStoreListItem>>;

    /**
     * Invalid. Use POST on /workspaces/{workspace}/coveragestores for adding a new coverage store, or PUT on /workspaces/{workspace}/coveragestores/{store} to edit/upload an existing coverage store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postCoverageStore(options?: any): AxiosPromise<void>;

    /**
     * Used to harvest new granules in a writable structured grid coverage reader (e.g., image mosaic). Attempting to harvest a file into any other reader will result in a HTTP 405, method not allowed. Multiple granules can be uploaded by wrapping them in a ZIP file.
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
     * @param {string} format The type of target coverage store (e.g., \&quot;imagemosaic\&quot;)
     * @param {string} [filename] The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method&#x3D;\&quot;file\&quot;.
     * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postCoverageStoreUpload(workspace: string, store: string, method: string, format: string, filename?: string, updateBBox?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Adds a new coverage store entry to the server.
     * @summary Add a new coverage store
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {CoverageStoreInfo} coverageStoreBody The coverage store body information to upload.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;coverageStore&gt;     &lt;name&gt;nyc&lt;/name&gt;     &lt;url&gt;file:/path/to/file.tiff&lt;/url&gt;   &lt;/coverageStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;coverageStore\&quot;: {       \&quot;name\&quot;: \&quot;nyc\&quot;,       \&quot;url\&quot;: \&quot;file:/path/to/file.tiff\&quot;     }   }   &#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postCoverageStores(workspace: string, coverageStoreBody: CoverageStoreInfo, options?: any): AxiosPromise<string>;

    /**
     * Modifies a single coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).
     * @summary Modify a single coverage store.
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {CoverageStoreInfo} coverageStoreBody The coverage store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;coverageStore&gt;     &lt;description&gt;A coverage store&lt;/description&gt;     &lt;enabled&gt;true&lt;/enabled&gt;     &lt;__default&gt;true&lt;/__default&gt;     &lt;url&gt;file:/path/to/file.tiff&lt;/url&gt;   &lt;/coverageStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;coverageStore\&quot;: {       \&quot;description\&quot;: \&quot;A coverage store\&quot;,       \&quot;enabled\&quot;: \&quot;true\&quot;,       \&quot;_default\&quot;: \&quot;true\&quot;,       \&quot;url\&quot;: \&quot;file:/path/to/file.tiff\&quot;     }   }   &#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putCoverageStore(workspace: string, store: string, coverageStoreBody: CoverageStoreInfo, options?: any): AxiosPromise<void>;

    /**
     * Creates or modified a single coverage store by uploading its raster data files. Multi-file stores like mosaic can be created by uploading a zip file and setting the content type to \"application/zip\"
     * @summary Creates or overwrites the files for a coverage store
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
     * @param {string} format The type of target coverage store (e.g., \&quot;imagemosaic\&quot;)
     * @param {string} [configure] The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \&quot;none\&quot; to avoid configuring coverages.
     * @param {string} [uSEJAIIMAGEREAD] Whether to use deferred loading while configuring the coverage/layer.
     * @param {string} [coverageName] Name of the newly created coverage/layer.
     * @param {string} [filename] The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method&#x3D;\&quot;file\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putCoverageStoreUpload(workspace: string, store: string, method: string, format: string, configure?: string, uSEJAIIMAGEREAD?: string, coverageName?: string, filename?: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new coverage store, or PUT on /coveragestores/{store} to edit/upload an existing coverage store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putCoverageStores(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Deletes a coverage store
     * @summary Delete coverage store
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} [purge] The purge parameter specifies if and how the underlying raster data source is deleted. Allowable values for this parameter are \&quot;none\&quot;, \&quot;metadata\&quot;, \&quot;all\&quot;. When set to \&quot;none\&quot; data and auxiliary files are preserved. When set to \&quot;metadata\&quot; delete only auxiliary files and metadata. Itâ€™s recommended when data files (such as granules) should not be deleted from disk. Finally, when set to \&quot;all\&quot; both data and auxiliary files are removed.
     * @param {boolean} [recurse] The recurse controls recursive deletion. When set to true all resources contained in the store are also removed. The default value is \&quot;false\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCoverageStore(workspace: string, store: string, purge?: string, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteCoverageStore(workspace, store, purge, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid, only used for uploads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCoverageStoreUpload(options?: any) {
        return DefaultApiFp(this.configuration).deleteCoverageStoreUpload(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use /coverage/{style} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCoverageStores(options?: any) {
        return DefaultApiFp(this.configuration).deleteCoverageStores(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a representation of the coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/{store}.xml\" for XML). Defaults to HTML representation.
     * @summary Get a coverage store named {store} in the {workspace} workspace
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {boolean} [quietOnNotFound] When set to true, avoids logging an Exception when the coverage store is not present. Note that 404 status code will be returned anyway.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCoverageStore(workspace: string, store: string, quietOnNotFound?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getCoverageStore(workspace, store, quietOnNotFound, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid, only used for uploads
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCoverageStoreUpload(options?: any) {
        return DefaultApiFp(this.configuration).getCoverageStoreUpload(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all styles on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/coveragestores.xml\" for XML). Defaults to HTML representation.
     * @summary Get a list of all coverage stores in {workspace}
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCoverageStores(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).getCoverageStores(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST on /workspaces/{workspace}/coveragestores for adding a new coverage store, or PUT on /workspaces/{workspace}/coveragestores/{store} to edit/upload an existing coverage store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCoverageStore(options?: any) {
        return DefaultApiFp(this.configuration).postCoverageStore(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Used to harvest new granules in a writable structured grid coverage reader (e.g., image mosaic). Attempting to harvest a file into any other reader will result in a HTTP 405, method not allowed. Multiple granules can be uploaded by wrapping them in a ZIP file.
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
     * @param {string} format The type of target coverage store (e.g., \&quot;imagemosaic\&quot;)
     * @param {string} [filename] The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method&#x3D;\&quot;file\&quot;.
     * @param {boolean} [updateBBox] When set to \&quot;true\&quot;, triggers re-calculation of the layer native bbox. Defaults to \&quot;false\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCoverageStoreUpload(workspace: string, store: string, method: string, format: string, filename?: string, updateBBox?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).postCoverageStoreUpload(workspace, store, method, format, filename, updateBBox, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new coverage store entry to the server.
     * @summary Add a new coverage store
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {CoverageStoreInfo} coverageStoreBody The coverage store body information to upload.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;coverageStore&gt;     &lt;name&gt;nyc&lt;/name&gt;     &lt;url&gt;file:/path/to/file.tiff&lt;/url&gt;   &lt;/coverageStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;coverageStore\&quot;: {       \&quot;name\&quot;: \&quot;nyc\&quot;,       \&quot;url\&quot;: \&quot;file:/path/to/file.tiff\&quot;     }   }   &#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postCoverageStores(workspace: string, coverageStoreBody: CoverageStoreInfo, options?: any) {
        return DefaultApiFp(this.configuration).postCoverageStores(workspace, coverageStoreBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies a single coverage store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"{store}.xml\" for XML).
     * @summary Modify a single coverage store.
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {CoverageStoreInfo} coverageStoreBody The coverage store body information to upload. For a PUT, only values which should be changed need to be included.  Examples: - application/xml:    &#x60;&#x60;&#x60;   &lt;coverageStore&gt;     &lt;description&gt;A coverage store&lt;/description&gt;     &lt;enabled&gt;true&lt;/enabled&gt;     &lt;__default&gt;true&lt;/__default&gt;     &lt;url&gt;file:/path/to/file.tiff&lt;/url&gt;   &lt;/coverageStore&gt;   &#x60;&#x60;&#x60;  - application/json:    &#x60;&#x60;&#x60;   {     \&quot;coverageStore\&quot;: {       \&quot;description\&quot;: \&quot;A coverage store\&quot;,       \&quot;enabled\&quot;: \&quot;true\&quot;,       \&quot;_default\&quot;: \&quot;true\&quot;,       \&quot;url\&quot;: \&quot;file:/path/to/file.tiff\&quot;     }   }   &#x60;&#x60;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putCoverageStore(workspace: string, store: string, coverageStoreBody: CoverageStoreInfo, options?: any) {
        return DefaultApiFp(this.configuration).putCoverageStore(workspace, store, coverageStoreBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates or modified a single coverage store by uploading its raster data files. Multi-file stores like mosaic can be created by uploading a zip file and setting the content type to \"application/zip\"
     * @summary Creates or overwrites the files for a coverage store
     * @param {string} workspace The name of the workspace containing the coverage stores.
     * @param {string} store The name of the store to be retrieved
     * @param {string} method The upload method. Can be \&quot;url\&quot;, \&quot;file\&quot;, \&quot;external\&quot;. \&quot;file\&quot; uploads a file from a local source. The body of the request is the file itself. \&quot;url\&quot; uploads a file from a remote source. The body of the request is a URL pointing to the file to upload. This URL must be visible from the server. \&quot;external\&quot; uses an existing file on the server. The body of the request is the absolute path to the existing file.
     * @param {string} format The type of target coverage store (e.g., \&quot;imagemosaic\&quot;)
     * @param {string} [configure] The configure parameter controls if a coverage/layer are configured upon file upload, in addition to creating the store. It can have a value of \&quot;none\&quot; to avoid configuring coverages.
     * @param {string} [uSEJAIIMAGEREAD] Whether to use deferred loading while configuring the coverage/layer.
     * @param {string} [coverageName] Name of the newly created coverage/layer.
     * @param {string} [filename] The filename parameter specifies the target file name for a file that needs to be harvested as part of a mosaic. This is important to avoid clashes and to make sure the right dimension values are available in the name for multidimensional mosaics to work. Only used if method&#x3D;\&quot;file\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putCoverageStoreUpload(workspace: string, store: string, method: string, format: string, configure?: string, uSEJAIIMAGEREAD?: string, coverageName?: string, filename?: string, options?: any) {
        return DefaultApiFp(this.configuration).putCoverageStoreUpload(workspace, store, method, format, configure, uSEJAIIMAGEREAD, coverageName, filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new coverage store, or PUT on /coveragestores/{store} to edit/upload an existing coverage store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putCoverageStores(options?: any) {
        return DefaultApiFp(this.configuration).putCoverageStores(options).then((request) => request(this.axios, this.basePath));
    }

}


