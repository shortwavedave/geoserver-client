// tslint:disable
/**
 * GeoServer Resources
 * A resource is any item in the data directory that does not represent configuration. Typical resources include styles and icons.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Metadata about a directory of resources
 * @export
 * @interface ResourceDirectory
 */
export interface ResourceDirectory {
    /**
     * The name of the resource, including the extension if applicable.
     * @type {string}
     * @memberof ResourceDirectory
     */
    name?: string;
    /**
     * 
     * @type {ResourceMetadataParent}
     * @memberof ResourceDirectory
     */
    parent?: ResourceMetadataParent;
    /**
     * The last modified date of the resource
     * @type {string}
     * @memberof ResourceDirectory
     */
    lastModified?: string;
    /**
     * Type of resource.
     * @type {string}
     * @memberof ResourceDirectory
     */
    type?: ResourceDirectoryTypeEnum;
    /**
     * 
     * @type {ResourceDirectoryAllOfChildren}
     * @memberof ResourceDirectory
     */
    children?: ResourceDirectoryAllOfChildren;
}

/**
    * @export
    * @enum {string}
    */
export enum ResourceDirectoryTypeEnum {
    Resource = 'resource',
    Directory = 'directory'
}

/**
 * 
 * @export
 * @interface ResourceDirectoryAllOf
 */
export interface ResourceDirectoryAllOf {
    /**
     * 
     * @type {ResourceDirectoryAllOfChildren}
     * @memberof ResourceDirectoryAllOf
     */
    children?: ResourceDirectoryAllOfChildren;
}
/**
 * List of child resources in the directory
 * @export
 * @interface ResourceDirectoryAllOfChildren
 */
export interface ResourceDirectoryAllOfChildren {
    /**
     * 
     * @type {Array<ResourceDirectoryAllOfChildrenChild>}
     * @memberof ResourceDirectoryAllOfChildren
     */
    child?: Array<ResourceDirectoryAllOfChildrenChild>;
}
/**
 * A child resource
 * @export
 * @interface ResourceDirectoryAllOfChildrenChild
 */
export interface ResourceDirectoryAllOfChildrenChild {
    /**
     * The name of the resource, including the extension if applicable.
     * @type {string}
     * @memberof ResourceDirectoryAllOfChildrenChild
     */
    name?: string;
    /**
     * 
     * @type {ResourceDirectoryAllOfChildrenLink}
     * @memberof ResourceDirectoryAllOfChildrenChild
     */
    link?: ResourceDirectoryAllOfChildrenLink;
}
/**
 * A link to the child resource
 * @export
 * @interface ResourceDirectoryAllOfChildrenLink
 */
export interface ResourceDirectoryAllOfChildrenLink {
    /**
     * The link to the resource
     * @type {string}
     * @memberof ResourceDirectoryAllOfChildrenLink
     */
    href?: string;
    /**
     * Relationship between the current resource and the linked resource
     * @type {string}
     * @memberof ResourceDirectoryAllOfChildrenLink
     */
    rel?: ResourceDirectoryAllOfChildrenLinkRelEnum;
    /**
     * The mime type returned by the link
     * @type {string}
     * @memberof ResourceDirectoryAllOfChildrenLink
     */
    type?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ResourceDirectoryAllOfChildrenLinkRelEnum {
    Alternate = 'alternate'
}

/**
 * Metadata about a resource
 * @export
 * @interface ResourceMetadata
 */
export interface ResourceMetadata {
    /**
     * The name of the resource, including the extension if applicable.
     * @type {string}
     * @memberof ResourceMetadata
     */
    name?: string;
    /**
     * 
     * @type {ResourceMetadataParent}
     * @memberof ResourceMetadata
     */
    parent?: ResourceMetadataParent;
    /**
     * The last modified date of the resource
     * @type {string}
     * @memberof ResourceMetadata
     */
    lastModified?: string;
    /**
     * Type of resource.
     * @type {string}
     * @memberof ResourceMetadata
     */
    type?: ResourceMetadataTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ResourceMetadataTypeEnum {
    Resource = 'resource',
    Directory = 'directory'
}

/**
 * The parent resource of this one
 * @export
 * @interface ResourceMetadataParent
 */
export interface ResourceMetadataParent {
    /**
     * The full path to the parent resource
     * @type {string}
     * @memberof ResourceMetadataParent
     */
    path?: string;
    /**
     * 
     * @type {ResourceMetadataParentLink}
     * @memberof ResourceMetadataParent
     */
    link?: ResourceMetadataParentLink;
}
/**
 * A link to the parent resource
 * @export
 * @interface ResourceMetadataParentLink
 */
export interface ResourceMetadataParentLink {
    /**
     * The link to the resource
     * @type {string}
     * @memberof ResourceMetadataParentLink
     */
    href?: string;
    /**
     * Relationship between the current resource and the linked resource
     * @type {string}
     * @memberof ResourceMetadataParentLink
     */
    rel?: ResourceMetadataParentLinkRelEnum;
    /**
     * The mime type returned by the link
     * @type {string}
     * @memberof ResourceMetadataParentLink
     */
    type?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ResourceMetadataParentLinkRelEnum {
    Alternate = 'alternate'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a resource (recursively if directory)
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourceDelete: async (pathToResource: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pathToResource' is not null or undefined
            if (pathToResource === null || pathToResource === undefined) {
                throw new RequiredError('pathToResource','Required parameter pathToResource was null or undefined when calling resourceDelete.');
            }
            const localVarPath = `/resource/{pathToResource}`
                .replace(`{${"pathToResource"}}`, encodeURIComponent(String(pathToResource)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Download a resource, list contents of directory, or show formatted resource metadata.  Response content depends upon parameters.  With `operation=default`, if the request is made against a non-directory resource, the content of the resource is returned.  For example, `/resource/styles/default_point.sld?operation=default`  ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> <StyledLayerDescriptor version=\"1.0.0\"   xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"   xmlns=\"http://www.opengis.net/sld\"   xmlns:ogc=\"http://www.opengis.net/ogc\"   xmlns:xlink=\"http://www.w3.org/1999/xlink\"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">   <!-- a Named Layer is the basic building block of an SLD document -->   <NamedLayer>     <Name>default_point</Name>     <UserStyle>     <!-- Styles can have names, titles and abstracts -->       <Title>Default Point</Title>       <Abstract>A sample style that draws a point</Abstract>       <!-- FeatureTypeStyles describe how to render different features -->       <!-- A FeatureTypeStyle for rendering points -->       <FeatureTypeStyle>         <Rule>           <Name>rule1</Name>           <Title>Red Square</Title>           <Abstract>A 6 pixel square with a red fill and no stroke</Abstract>             <PointSymbolizer>               <Graphic>                 <Mark>                   <WellKnownName>square</WellKnownName>                   <Fill>                     <CssParameter name=\"fill\">#FF0000</CssParameter>                   </Fill>                 </Mark>               <Size>6</Size>             </Graphic>           </PointSymbolizer>         </Rule>       </FeatureTypeStyle>     </UserStyle>   </NamedLayer> </StyledLayerDescriptor> ```  If the request is made against a directory resource, a \"ResourceDirectory\" response is returned, containing information about the directory and its children. Examples:  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=xml`   ```   <ResourceDirectory>     <name>logs</name>     <parent>       <path>/</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-09-15 18:50:54.0 UTC</lastModified>     <children>       <child>         <name>DEFAULT_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.1</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.2</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOSERVER_DEVELOPER_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOTOOLS_DEVELOPER_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>PRODUCTION_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>QUIET_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>TEST_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>VERBOSE_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>     </children>   </ResourceDirectory>   ```  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=json`   ```   {\"ResourceDirectory\":{\"name\":\"logs\",\"parent\":{\"path\":\"/\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-09-15 18:50:54.0 UTC\",\"children\":{\"child\":[{\"name\":\"DEFAULT_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.1\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.2\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOSERVER_DEVELOPER_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOTOOLS_DEVELOPER_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"PRODUCTION_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"QUIET_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"TEST_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"VERBOSE_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}}]}}}   ```  With `operation=metadata`, a \"ResourceMetadata\" object is returned. If the resource is a directory, this metadata object will not list the children of the directory. Examples:  - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=xml`   ```   <ResourceMetadata>     <name>default_point.sld</name>     <parent>       <path>/styles</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/styles\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-01-18 19:02:38.0 UTC</lastModified>     <type>resource</type>   </ResourceMetadata>   ``` - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=json`   ```   {\"ResourceMetadata\":{\"name\":\"default_point.sld\",\"parent\":{\"path\":\"/styles\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/styles\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-01-18 19:02:38.0 UTC\",\"type\":\"resource\"}}   ``` 
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {'default' | 'metadata'} [operation] The type of GET operation. &#x60;default&#x60; returns a list of the contained resources in the case of a directory resource, or the actual resource contents in the case of a resource resource.&#x60;metadata&#x60; requests a metadata summary of the resource.
         * @param {'html' | 'xml' | 'json'} [format] The format of the response. Only applicable for the &#x60;metadata&#x60; operation, or for a directory resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourceGet: async (pathToResource: string, operation?: 'default' | 'metadata', format?: 'html' | 'xml' | 'json', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pathToResource' is not null or undefined
            if (pathToResource === null || pathToResource === undefined) {
                throw new RequiredError('pathToResource','Required parameter pathToResource was null or undefined when calling resourceGet.');
            }
            const localVarPath = `/resource/{pathToResource}`
                .replace(`{${"pathToResource"}}`, encodeURIComponent(String(pathToResource)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operation !== undefined) {
                localVarQueryParameter['operation'] = operation;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show resource metadata in HTTP headers.
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourceHead: async (pathToResource: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pathToResource' is not null or undefined
            if (pathToResource === null || pathToResource === undefined) {
                throw new RequiredError('pathToResource','Required parameter pathToResource was null or undefined when calling resourceHead.');
            }
            const localVarPath = `/resource/{pathToResource}`
                .replace(`{${"pathToResource"}}`, encodeURIComponent(String(pathToResource)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to create a resource.
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcePost: async (pathToResource: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pathToResource' is not null or undefined
            if (pathToResource === null || pathToResource === undefined) {
                throw new RequiredError('pathToResource','Required parameter pathToResource was null or undefined when calling resourcePost.');
            }
            const localVarPath = `/resource/{pathToResource}`
                .replace(`{${"pathToResource"}}`, encodeURIComponent(String(pathToResource)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload/move/copy a resource, create directories on the fly (overwrite if exists). For move/copy operations, place source path in body. Copying is not supported for directories.
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {'default' | 'move' | 'copy'} [operation] The type of PUT operation. &#x60;default&#x60; creates a new resource or alters an existing resource. &#x60;move&#x60; moves the resource to a new location. &#x60;copy&#x60; duplicates the resource to a new location
         * @param {any} [resourceBody] The content of the resource to upload. In the case of a &#x60;move&#x60; or &#x60;copy&#x60; operation, this is instead the path to the source resource to move/copy from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcePut: async (pathToResource: string, operation?: 'default' | 'move' | 'copy', resourceBody?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pathToResource' is not null or undefined
            if (pathToResource === null || pathToResource === undefined) {
                throw new RequiredError('pathToResource','Required parameter pathToResource was null or undefined when calling resourcePut.');
            }
            const localVarPath = `/resource/{pathToResource}`
                .replace(`{${"pathToResource"}}`, encodeURIComponent(String(pathToResource)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (operation !== undefined) {
                localVarQueryParameter['operation'] = operation;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof resourceBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(resourceBody !== undefined ? resourceBody : {}) : (resourceBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a resource (recursively if directory)
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourceDelete(pathToResource: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resourceDelete(pathToResource, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Download a resource, list contents of directory, or show formatted resource metadata.  Response content depends upon parameters.  With `operation=default`, if the request is made against a non-directory resource, the content of the resource is returned.  For example, `/resource/styles/default_point.sld?operation=default`  ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> <StyledLayerDescriptor version=\"1.0.0\"   xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"   xmlns=\"http://www.opengis.net/sld\"   xmlns:ogc=\"http://www.opengis.net/ogc\"   xmlns:xlink=\"http://www.w3.org/1999/xlink\"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">   <!-- a Named Layer is the basic building block of an SLD document -->   <NamedLayer>     <Name>default_point</Name>     <UserStyle>     <!-- Styles can have names, titles and abstracts -->       <Title>Default Point</Title>       <Abstract>A sample style that draws a point</Abstract>       <!-- FeatureTypeStyles describe how to render different features -->       <!-- A FeatureTypeStyle for rendering points -->       <FeatureTypeStyle>         <Rule>           <Name>rule1</Name>           <Title>Red Square</Title>           <Abstract>A 6 pixel square with a red fill and no stroke</Abstract>             <PointSymbolizer>               <Graphic>                 <Mark>                   <WellKnownName>square</WellKnownName>                   <Fill>                     <CssParameter name=\"fill\">#FF0000</CssParameter>                   </Fill>                 </Mark>               <Size>6</Size>             </Graphic>           </PointSymbolizer>         </Rule>       </FeatureTypeStyle>     </UserStyle>   </NamedLayer> </StyledLayerDescriptor> ```  If the request is made against a directory resource, a \"ResourceDirectory\" response is returned, containing information about the directory and its children. Examples:  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=xml`   ```   <ResourceDirectory>     <name>logs</name>     <parent>       <path>/</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-09-15 18:50:54.0 UTC</lastModified>     <children>       <child>         <name>DEFAULT_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.1</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.2</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOSERVER_DEVELOPER_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOTOOLS_DEVELOPER_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>PRODUCTION_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>QUIET_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>TEST_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>VERBOSE_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>     </children>   </ResourceDirectory>   ```  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=json`   ```   {\"ResourceDirectory\":{\"name\":\"logs\",\"parent\":{\"path\":\"/\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-09-15 18:50:54.0 UTC\",\"children\":{\"child\":[{\"name\":\"DEFAULT_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.1\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.2\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOSERVER_DEVELOPER_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOTOOLS_DEVELOPER_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"PRODUCTION_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"QUIET_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"TEST_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"VERBOSE_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}}]}}}   ```  With `operation=metadata`, a \"ResourceMetadata\" object is returned. If the resource is a directory, this metadata object will not list the children of the directory. Examples:  - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=xml`   ```   <ResourceMetadata>     <name>default_point.sld</name>     <parent>       <path>/styles</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/styles\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-01-18 19:02:38.0 UTC</lastModified>     <type>resource</type>   </ResourceMetadata>   ``` - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=json`   ```   {\"ResourceMetadata\":{\"name\":\"default_point.sld\",\"parent\":{\"path\":\"/styles\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/styles\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-01-18 19:02:38.0 UTC\",\"type\":\"resource\"}}   ``` 
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {'default' | 'metadata'} [operation] The type of GET operation. &#x60;default&#x60; returns a list of the contained resources in the case of a directory resource, or the actual resource contents in the case of a resource resource.&#x60;metadata&#x60; requests a metadata summary of the resource.
         * @param {'html' | 'xml' | 'json'} [format] The format of the response. Only applicable for the &#x60;metadata&#x60; operation, or for a directory resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourceGet(pathToResource: string, operation?: 'default' | 'metadata', format?: 'html' | 'xml' | 'json', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resourceGet(pathToResource, operation, format, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show resource metadata in HTTP headers.
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourceHead(pathToResource: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resourceHead(pathToResource, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to create a resource.
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcePost(pathToResource: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resourcePost(pathToResource, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Upload/move/copy a resource, create directories on the fly (overwrite if exists). For move/copy operations, place source path in body. Copying is not supported for directories.
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {'default' | 'move' | 'copy'} [operation] The type of PUT operation. &#x60;default&#x60; creates a new resource or alters an existing resource. &#x60;move&#x60; moves the resource to a new location. &#x60;copy&#x60; duplicates the resource to a new location
         * @param {any} [resourceBody] The content of the resource to upload. In the case of a &#x60;move&#x60; or &#x60;copy&#x60; operation, this is instead the path to the source resource to move/copy from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resourcePut(pathToResource: string, operation?: 'default' | 'move' | 'copy', resourceBody?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resourcePut(pathToResource, operation, resourceBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete a resource (recursively if directory)
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourceDelete(pathToResource: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).resourceDelete(pathToResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Download a resource, list contents of directory, or show formatted resource metadata.  Response content depends upon parameters.  With `operation=default`, if the request is made against a non-directory resource, the content of the resource is returned.  For example, `/resource/styles/default_point.sld?operation=default`  ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> <StyledLayerDescriptor version=\"1.0.0\"   xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"   xmlns=\"http://www.opengis.net/sld\"   xmlns:ogc=\"http://www.opengis.net/ogc\"   xmlns:xlink=\"http://www.w3.org/1999/xlink\"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">   <!-- a Named Layer is the basic building block of an SLD document -->   <NamedLayer>     <Name>default_point</Name>     <UserStyle>     <!-- Styles can have names, titles and abstracts -->       <Title>Default Point</Title>       <Abstract>A sample style that draws a point</Abstract>       <!-- FeatureTypeStyles describe how to render different features -->       <!-- A FeatureTypeStyle for rendering points -->       <FeatureTypeStyle>         <Rule>           <Name>rule1</Name>           <Title>Red Square</Title>           <Abstract>A 6 pixel square with a red fill and no stroke</Abstract>             <PointSymbolizer>               <Graphic>                 <Mark>                   <WellKnownName>square</WellKnownName>                   <Fill>                     <CssParameter name=\"fill\">#FF0000</CssParameter>                   </Fill>                 </Mark>               <Size>6</Size>             </Graphic>           </PointSymbolizer>         </Rule>       </FeatureTypeStyle>     </UserStyle>   </NamedLayer> </StyledLayerDescriptor> ```  If the request is made against a directory resource, a \"ResourceDirectory\" response is returned, containing information about the directory and its children. Examples:  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=xml`   ```   <ResourceDirectory>     <name>logs</name>     <parent>       <path>/</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-09-15 18:50:54.0 UTC</lastModified>     <children>       <child>         <name>DEFAULT_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.1</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.2</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOSERVER_DEVELOPER_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOTOOLS_DEVELOPER_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>PRODUCTION_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>QUIET_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>TEST_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>VERBOSE_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>     </children>   </ResourceDirectory>   ```  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=json`   ```   {\"ResourceDirectory\":{\"name\":\"logs\",\"parent\":{\"path\":\"/\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-09-15 18:50:54.0 UTC\",\"children\":{\"child\":[{\"name\":\"DEFAULT_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.1\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.2\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOSERVER_DEVELOPER_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOTOOLS_DEVELOPER_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"PRODUCTION_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"QUIET_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"TEST_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"VERBOSE_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}}]}}}   ```  With `operation=metadata`, a \"ResourceMetadata\" object is returned. If the resource is a directory, this metadata object will not list the children of the directory. Examples:  - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=xml`   ```   <ResourceMetadata>     <name>default_point.sld</name>     <parent>       <path>/styles</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/styles\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-01-18 19:02:38.0 UTC</lastModified>     <type>resource</type>   </ResourceMetadata>   ``` - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=json`   ```   {\"ResourceMetadata\":{\"name\":\"default_point.sld\",\"parent\":{\"path\":\"/styles\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/styles\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-01-18 19:02:38.0 UTC\",\"type\":\"resource\"}}   ``` 
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {'default' | 'metadata'} [operation] The type of GET operation. &#x60;default&#x60; returns a list of the contained resources in the case of a directory resource, or the actual resource contents in the case of a resource resource.&#x60;metadata&#x60; requests a metadata summary of the resource.
         * @param {'html' | 'xml' | 'json'} [format] The format of the response. Only applicable for the &#x60;metadata&#x60; operation, or for a directory resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourceGet(pathToResource: string, operation?: 'default' | 'metadata', format?: 'html' | 'xml' | 'json', options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).resourceGet(pathToResource, operation, format, options).then((request) => request(axios, basePath));
        },
        /**
         * Show resource metadata in HTTP headers.
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourceHead(pathToResource: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).resourceHead(pathToResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to create a resource.
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcePost(pathToResource: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).resourcePost(pathToResource, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload/move/copy a resource, create directories on the fly (overwrite if exists). For move/copy operations, place source path in body. Copying is not supported for directories.
         * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
         * @param {'default' | 'move' | 'copy'} [operation] The type of PUT operation. &#x60;default&#x60; creates a new resource or alters an existing resource. &#x60;move&#x60; moves the resource to a new location. &#x60;copy&#x60; duplicates the resource to a new location
         * @param {any} [resourceBody] The content of the resource to upload. In the case of a &#x60;move&#x60; or &#x60;copy&#x60; operation, this is instead the path to the source resource to move/copy from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resourcePut(pathToResource: string, operation?: 'default' | 'move' | 'copy', resourceBody?: any, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).resourcePut(pathToResource, operation, resourceBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Delete a resource (recursively if directory)
     * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    resourceDelete(pathToResource: string, options?: any): AxiosPromise<void>;

    /**
     * Download a resource, list contents of directory, or show formatted resource metadata.  Response content depends upon parameters.  With `operation=default`, if the request is made against a non-directory resource, the content of the resource is returned.  For example, `/resource/styles/default_point.sld?operation=default`  ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> <StyledLayerDescriptor version=\"1.0.0\"   xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"   xmlns=\"http://www.opengis.net/sld\"   xmlns:ogc=\"http://www.opengis.net/ogc\"   xmlns:xlink=\"http://www.w3.org/1999/xlink\"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">   <!-- a Named Layer is the basic building block of an SLD document -->   <NamedLayer>     <Name>default_point</Name>     <UserStyle>     <!-- Styles can have names, titles and abstracts -->       <Title>Default Point</Title>       <Abstract>A sample style that draws a point</Abstract>       <!-- FeatureTypeStyles describe how to render different features -->       <!-- A FeatureTypeStyle for rendering points -->       <FeatureTypeStyle>         <Rule>           <Name>rule1</Name>           <Title>Red Square</Title>           <Abstract>A 6 pixel square with a red fill and no stroke</Abstract>             <PointSymbolizer>               <Graphic>                 <Mark>                   <WellKnownName>square</WellKnownName>                   <Fill>                     <CssParameter name=\"fill\">#FF0000</CssParameter>                   </Fill>                 </Mark>               <Size>6</Size>             </Graphic>           </PointSymbolizer>         </Rule>       </FeatureTypeStyle>     </UserStyle>   </NamedLayer> </StyledLayerDescriptor> ```  If the request is made against a directory resource, a \"ResourceDirectory\" response is returned, containing information about the directory and its children. Examples:  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=xml`   ```   <ResourceDirectory>     <name>logs</name>     <parent>       <path>/</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-09-15 18:50:54.0 UTC</lastModified>     <children>       <child>         <name>DEFAULT_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.1</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.2</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOSERVER_DEVELOPER_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOTOOLS_DEVELOPER_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>PRODUCTION_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>QUIET_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>TEST_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>VERBOSE_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>     </children>   </ResourceDirectory>   ```  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=json`   ```   {\"ResourceDirectory\":{\"name\":\"logs\",\"parent\":{\"path\":\"/\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-09-15 18:50:54.0 UTC\",\"children\":{\"child\":[{\"name\":\"DEFAULT_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.1\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.2\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOSERVER_DEVELOPER_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOTOOLS_DEVELOPER_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"PRODUCTION_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"QUIET_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"TEST_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"VERBOSE_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}}]}}}   ```  With `operation=metadata`, a \"ResourceMetadata\" object is returned. If the resource is a directory, this metadata object will not list the children of the directory. Examples:  - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=xml`   ```   <ResourceMetadata>     <name>default_point.sld</name>     <parent>       <path>/styles</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/styles\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-01-18 19:02:38.0 UTC</lastModified>     <type>resource</type>   </ResourceMetadata>   ``` - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=json`   ```   {\"ResourceMetadata\":{\"name\":\"default_point.sld\",\"parent\":{\"path\":\"/styles\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/styles\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-01-18 19:02:38.0 UTC\",\"type\":\"resource\"}}   ``` 
     * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
     * @param {'default' | 'metadata'} [operation] The type of GET operation. &#x60;default&#x60; returns a list of the contained resources in the case of a directory resource, or the actual resource contents in the case of a resource resource.&#x60;metadata&#x60; requests a metadata summary of the resource.
     * @param {'html' | 'xml' | 'json'} [format] The format of the response. Only applicable for the &#x60;metadata&#x60; operation, or for a directory resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    resourceGet(pathToResource: string, operation?: 'default' | 'metadata', format?: 'html' | 'xml' | 'json', options?: any): AxiosPromise<void>;

    /**
     * Show resource metadata in HTTP headers.
     * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    resourceHead(pathToResource: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to create a resource.
     * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    resourcePost(pathToResource: string, options?: any): AxiosPromise<void>;

    /**
     * Upload/move/copy a resource, create directories on the fly (overwrite if exists). For move/copy operations, place source path in body. Copying is not supported for directories.
     * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
     * @param {'default' | 'move' | 'copy'} [operation] The type of PUT operation. &#x60;default&#x60; creates a new resource or alters an existing resource. &#x60;move&#x60; moves the resource to a new location. &#x60;copy&#x60; duplicates the resource to a new location
     * @param {any} [resourceBody] The content of the resource to upload. In the case of a &#x60;move&#x60; or &#x60;copy&#x60; operation, this is instead the path to the source resource to move/copy from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    resourcePut(pathToResource: string, operation?: 'default' | 'move' | 'copy', resourceBody?: any, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Delete a resource (recursively if directory)
     * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resourceDelete(pathToResource: string, options?: any) {
        return DefaultApiFp(this.configuration).resourceDelete(pathToResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Download a resource, list contents of directory, or show formatted resource metadata.  Response content depends upon parameters.  With `operation=default`, if the request is made against a non-directory resource, the content of the resource is returned.  For example, `/resource/styles/default_point.sld?operation=default`  ``` <?xml version=\"1.0\" encoding=\"UTF-8\"?> <StyledLayerDescriptor version=\"1.0.0\"   xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\"   xmlns=\"http://www.opengis.net/sld\"   xmlns:ogc=\"http://www.opengis.net/ogc\"   xmlns:xlink=\"http://www.w3.org/1999/xlink\"   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">   <!-- a Named Layer is the basic building block of an SLD document -->   <NamedLayer>     <Name>default_point</Name>     <UserStyle>     <!-- Styles can have names, titles and abstracts -->       <Title>Default Point</Title>       <Abstract>A sample style that draws a point</Abstract>       <!-- FeatureTypeStyles describe how to render different features -->       <!-- A FeatureTypeStyle for rendering points -->       <FeatureTypeStyle>         <Rule>           <Name>rule1</Name>           <Title>Red Square</Title>           <Abstract>A 6 pixel square with a red fill and no stroke</Abstract>             <PointSymbolizer>               <Graphic>                 <Mark>                   <WellKnownName>square</WellKnownName>                   <Fill>                     <CssParameter name=\"fill\">#FF0000</CssParameter>                   </Fill>                 </Mark>               <Size>6</Size>             </Graphic>           </PointSymbolizer>         </Rule>       </FeatureTypeStyle>     </UserStyle>   </NamedLayer> </StyledLayerDescriptor> ```  If the request is made against a directory resource, a \"ResourceDirectory\" response is returned, containing information about the directory and its children. Examples:  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=xml`   ```   <ResourceDirectory>     <name>logs</name>     <parent>       <path>/</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-09-15 18:50:54.0 UTC</lastModified>     <children>       <child>         <name>DEFAULT_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.1</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>geoserver.log.2</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOSERVER_DEVELOPER_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>GEOTOOLS_DEVELOPER_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>PRODUCTION_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>QUIET_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>TEST_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>       <child>         <name>VERBOSE_LOGGING.properties</name>         <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.properties\" rel=\"alternate\" type=\"application/octet-stream\"/>       </child>     </children>   </ResourceDirectory>   ```  - `http://localhost:8080/geoserver/rest/resource/logs?operation=default&format=json`   ```   {\"ResourceDirectory\":{\"name\":\"logs\",\"parent\":{\"path\":\"/\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-09-15 18:50:54.0 UTC\",\"children\":{\"child\":[{\"name\":\"DEFAULT_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/DEFAULT_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.1\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.1\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"geoserver.log.2\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/geoserver.log.2\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOSERVER_DEVELOPER_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOSERVER_DEVELOPER_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"GEOTOOLS_DEVELOPER_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/GEOTOOLS_DEVELOPER_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"PRODUCTION_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/PRODUCTION_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"QUIET_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/QUIET_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"TEST_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/TEST_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}},{\"name\":\"VERBOSE_LOGGING.properties\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/logs/VERBOSE_LOGGING.properties\",\"rel\":\"alternate\",\"type\":\"application/octet-stream\"}}]}}}   ```  With `operation=metadata`, a \"ResourceMetadata\" object is returned. If the resource is a directory, this metadata object will not list the children of the directory. Examples:  - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=xml`   ```   <ResourceMetadata>     <name>default_point.sld</name>     <parent>       <path>/styles</path>       <atom:link xmlns:atom=\"http://www.w3.org/2005/Atom\" href=\"http://localhost:8080/geoserver/rest/resource/styles\" rel=\"alternate\" type=\"application/xml\"/>     </parent>     <lastModified>2017-01-18 19:02:38.0 UTC</lastModified>     <type>resource</type>   </ResourceMetadata>   ``` - `http://localhost:8080/geoserver/rest/resource/styles/default_point.sld?operation=metadata&format=json`   ```   {\"ResourceMetadata\":{\"name\":\"default_point.sld\",\"parent\":{\"path\":\"/styles\",\"link\":{\"href\":\"http://localhost:8080/geoserver/rest/resource/styles\",\"rel\":\"alternate\",\"type\":\"application/json\"}},\"lastModified\":\"2017-01-18 19:02:38.0 UTC\",\"type\":\"resource\"}}   ``` 
     * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
     * @param {'default' | 'metadata'} [operation] The type of GET operation. &#x60;default&#x60; returns a list of the contained resources in the case of a directory resource, or the actual resource contents in the case of a resource resource.&#x60;metadata&#x60; requests a metadata summary of the resource.
     * @param {'html' | 'xml' | 'json'} [format] The format of the response. Only applicable for the &#x60;metadata&#x60; operation, or for a directory resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resourceGet(pathToResource: string, operation?: 'default' | 'metadata', format?: 'html' | 'xml' | 'json', options?: any) {
        return DefaultApiFp(this.configuration).resourceGet(pathToResource, operation, format, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show resource metadata in HTTP headers.
     * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resourceHead(pathToResource: string, options?: any) {
        return DefaultApiFp(this.configuration).resourceHead(pathToResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to create a resource.
     * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resourcePost(pathToResource: string, options?: any) {
        return DefaultApiFp(this.configuration).resourcePost(pathToResource, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload/move/copy a resource, create directories on the fly (overwrite if exists). For move/copy operations, place source path in body. Copying is not supported for directories.
     * @param {string} pathToResource The full path to the resource. Required, but may be empty; a request to &#x60;/resource&#x60; references the top level resource directory.
     * @param {'default' | 'move' | 'copy'} [operation] The type of PUT operation. &#x60;default&#x60; creates a new resource or alters an existing resource. &#x60;move&#x60; moves the resource to a new location. &#x60;copy&#x60; duplicates the resource to a new location
     * @param {any} [resourceBody] The content of the resource to upload. In the case of a &#x60;move&#x60; or &#x60;copy&#x60; operation, this is instead the path to the source resource to move/copy from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public resourcePut(pathToResource: string, operation?: 'default' | 'move' | 'copy', resourceBody?: any, options?: any) {
        return DefaultApiFp(this.configuration).resourcePut(pathToResource, operation, resourceBody, options).then((request) => request(this.axios, this.basePath));
    }

}


