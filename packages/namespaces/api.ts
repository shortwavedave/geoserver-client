// tslint:disable
/**
 * GeoServer Namespace
 * A namespace is a uniquely identifiable grouping of feature types. It is identified by a prefix and a URI.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Namespace
 */
export interface Namespace {
    /**
     * Name/prefix of the namespace
     * @type {string}
     * @memberof Namespace
     */
    prefix?: string;
    /**
     * URI that identifies the namespace
     * @type {string}
     * @memberof Namespace
     */
    uri?: string;
}
/**
 * 
 * @export
 * @interface NamespaceResponse
 */
export interface NamespaceResponse {
    /**
     * Name of namespace
     * @type {string}
     * @memberof NamespaceResponse
     */
    prefix?: string;
    /**
     * URI of the namespace
     * @type {string}
     * @memberof NamespaceResponse
     */
    uri?: string;
    /**
     * URL to featureTypes associated with this namespace
     * @type {string}
     * @memberof NamespaceResponse
     */
    featureTypes?: string;
}
/**
 * 
 * @export
 * @interface NamespacesResponse
 */
export interface NamespacesResponse {
    /**
     * 
     * @type {NamespaceResponse}
     * @memberof NamespacesResponse
     */
    namespaces?: NamespaceResponse;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a namespace
         * @param {string} namespaceName Name of the namespace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNamespace: async (namespaceName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespaceName' is not null or undefined
            if (namespaceName === null || namespaceName === undefined) {
                throw new RequiredError('namespaceName','Required parameter namespaceName was null or undefined when calling deleteNamespace.');
            }
            const localVarPath = `/namespaces/{namespaceName}`
                .replace(`{${"namespaceName"}}`, encodeURIComponent(String(namespaceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNamespaces: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/namespaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single namespace definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/namespaces/{namespace}.xml\" for XML).
         * @summary Retrieve a namespace
         * @param {string} namespaceName The name of the namespace to fetch, or \&quot;default\&quot; to get the default namespace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespace: async (namespaceName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespaceName' is not null or undefined
            if (namespaceName === null || namespaceName === undefined) {
                throw new RequiredError('namespaceName','Required parameter namespaceName was null or undefined when calling getNamespace.');
            }
            const localVarPath = `/namespaces/{namespaceName}`
                .replace(`{${"namespaceName"}}`, encodeURIComponent(String(namespaceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all namespaces on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/namespaces.xml\" for XML)
         * @summary Get a list of namespaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespaces: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/namespaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNamespace: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/namespaces/{namespaceName}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new namespace to the server
         * @summary Add a new namespace to GeoServer
         * @param {Namespace} namespaceBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNamespaces: async (namespaceBody: Namespace, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespaceBody' is not null or undefined
            if (namespaceBody === null || namespaceBody === undefined) {
                throw new RequiredError('namespaceBody','Required parameter namespaceBody was null or undefined when calling postNamespaces.');
            }
            const localVarPath = `/namespaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof namespaceBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(namespaceBody !== undefined ? namespaceBody : {}) : (namespaceBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes the body of the put and modifies the namespace from it.
         * @summary Update a namespace
         * @param {string} namespaceName Name of namespace, or \&quot;default\&quot; to set the default namespace using the namespace prefix in the body of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putNamespace: async (namespaceName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'namespaceName' is not null or undefined
            if (namespaceName === null || namespaceName === undefined) {
                throw new RequiredError('namespaceName','Required parameter namespaceName was null or undefined when calling putNamespace.');
            }
            const localVarPath = `/namespaces/{namespaceName}`
                .replace(`{${"namespaceName"}}`, encodeURIComponent(String(namespaceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putNamespaces: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/namespaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a namespace
         * @param {string} namespaceName Name of the namespace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNamespace(namespaceName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteNamespace(namespaceName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNamespaces(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteNamespaces(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single namespace definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/namespaces/{namespace}.xml\" for XML).
         * @summary Retrieve a namespace
         * @param {string} namespaceName The name of the namespace to fetch, or \&quot;default\&quot; to get the default namespace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNamespace(namespaceName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamespaceResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getNamespace(namespaceName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all namespaces on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/namespaces.xml\" for XML)
         * @summary Get a list of namespaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNamespaces(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NamespacesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getNamespaces(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNamespace(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postNamespace(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new namespace to the server
         * @summary Add a new namespace to GeoServer
         * @param {Namespace} namespaceBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postNamespaces(namespaceBody: Namespace, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postNamespaces(namespaceBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Takes the body of the put and modifies the namespace from it.
         * @summary Update a namespace
         * @param {string} namespaceName Name of namespace, or \&quot;default\&quot; to set the default namespace using the namespace prefix in the body of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putNamespace(namespaceName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putNamespace(namespaceName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putNamespaces(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putNamespaces(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Delete a namespace
         * @param {string} namespaceName Name of the namespace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNamespace(namespaceName: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteNamespace(namespaceName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNamespaces(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteNamespaces(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single namespace definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/namespaces/{namespace}.xml\" for XML).
         * @summary Retrieve a namespace
         * @param {string} namespaceName The name of the namespace to fetch, or \&quot;default\&quot; to get the default namespace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespace(namespaceName: string, options?: any): AxiosPromise<NamespaceResponse> {
            return DefaultApiFp(configuration).getNamespace(namespaceName, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all namespaces on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/namespaces.xml\" for XML)
         * @summary Get a list of namespaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNamespaces(options?: any): AxiosPromise<NamespacesResponse> {
            return DefaultApiFp(configuration).getNamespaces(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNamespace(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postNamespace(options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new namespace to the server
         * @summary Add a new namespace to GeoServer
         * @param {Namespace} namespaceBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postNamespaces(namespaceBody: Namespace, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).postNamespaces(namespaceBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes the body of the put and modifies the namespace from it.
         * @summary Update a namespace
         * @param {string} namespaceName Name of namespace, or \&quot;default\&quot; to set the default namespace using the namespace prefix in the body of the post.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putNamespace(namespaceName: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putNamespace(namespaceName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putNamespaces(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putNamespaces(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Delete a namespace
     * @param {string} namespaceName Name of the namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteNamespace(namespaceName: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteNamespaces(options?: any): AxiosPromise<void>;

    /**
     * Retrieves a single namespace definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/namespaces/{namespace}.xml\" for XML).
     * @summary Retrieve a namespace
     * @param {string} namespaceName The name of the namespace to fetch, or \&quot;default\&quot; to get the default namespace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getNamespace(namespaceName: string, options?: any): AxiosPromise<NamespaceResponse>;

    /**
     * Displays a list of all namespaces on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/namespaces.xml\" for XML)
     * @summary Get a list of namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getNamespaces(options?: any): AxiosPromise<NamespacesResponse>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postNamespace(options?: any): AxiosPromise<void>;

    /**
     * Adds a new namespace to the server
     * @summary Add a new namespace to GeoServer
     * @param {Namespace} namespaceBody The layer group body information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postNamespaces(namespaceBody: Namespace, options?: any): AxiosPromise<string>;

    /**
     * Takes the body of the put and modifies the namespace from it.
     * @summary Update a namespace
     * @param {string} namespaceName Name of namespace, or \&quot;default\&quot; to set the default namespace using the namespace prefix in the body of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putNamespace(namespaceName: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putNamespaces(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Delete a namespace
     * @param {string} namespaceName Name of the namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteNamespace(namespaceName: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteNamespace(namespaceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteNamespaces(options?: any) {
        return DefaultApiFp(this.configuration).deleteNamespaces(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single namespace definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/namespaces/{namespace}.xml\" for XML).
     * @summary Retrieve a namespace
     * @param {string} namespaceName The name of the namespace to fetch, or \&quot;default\&quot; to get the default namespace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNamespace(namespaceName: string, options?: any) {
        return DefaultApiFp(this.configuration).getNamespace(namespaceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all namespaces on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/namespaces.xml\" for XML)
     * @summary Get a list of namespaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getNamespaces(options?: any) {
        return DefaultApiFp(this.configuration).getNamespaces(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postNamespace(options?: any) {
        return DefaultApiFp(this.configuration).postNamespace(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new namespace to the server
     * @summary Add a new namespace to GeoServer
     * @param {Namespace} namespaceBody The layer group body information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postNamespaces(namespaceBody: Namespace, options?: any) {
        return DefaultApiFp(this.configuration).postNamespaces(namespaceBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes the body of the put and modifies the namespace from it.
     * @summary Update a namespace
     * @param {string} namespaceName Name of namespace, or \&quot;default\&quot; to set the default namespace using the namespace prefix in the body of the post.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putNamespace(namespaceName: string, options?: any) {
        return DefaultApiFp(this.configuration).putNamespace(namespaceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putNamespaces(options?: any) {
        return DefaultApiFp(this.configuration).putNamespaces(options).then((request) => request(this.axios, this.basePath));
    }

}


