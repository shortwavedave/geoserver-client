// tslint:disable
/**
 * GeoWebCache Mass Truncate
 * The REST API for mass truncation provides a mechanism for completely clearing caches more conveniently than with the seeding system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns xml containing the request type capabilities for mass truncation
         * @summary Returns available request types for truncation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masstruncateGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/masstruncate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Issues a mass truncate request based on the request type parameter. truncateLayer, will clear all caches associated with a named layer, including all permutations of gridset, parameter filter values, and image formats.
         * @summary Issue a mass truncate request
         * @param {'truncateLayer' | 'truncateParameters' | 'truncateOrphans' | 'truncateExtent'} requestType The requestType parameter is used to control which cached tiles to truncate.
         * @param {string} [layer] The layername to truncate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masstruncatePost: async (requestType: 'truncateLayer' | 'truncateParameters' | 'truncateOrphans' | 'truncateExtent', layer?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestType' is not null or undefined
            if (requestType === null || requestType === undefined) {
                throw new RequiredError('requestType','Required parameter requestType was null or undefined when calling masstruncatePost.');
            }
            const localVarPath = `/masstruncate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (requestType !== undefined) {
                localVarQueryParameter['requestType'] = requestType;
            }

            if (layer !== undefined) {
                localVarQueryParameter['layer'] = layer;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns xml containing the request type capabilities for mass truncation
         * @summary Returns available request types for truncation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masstruncateGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).masstruncateGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Issues a mass truncate request based on the request type parameter. truncateLayer, will clear all caches associated with a named layer, including all permutations of gridset, parameter filter values, and image formats.
         * @summary Issue a mass truncate request
         * @param {'truncateLayer' | 'truncateParameters' | 'truncateOrphans' | 'truncateExtent'} requestType The requestType parameter is used to control which cached tiles to truncate.
         * @param {string} [layer] The layername to truncate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masstruncatePost(requestType: 'truncateLayer' | 'truncateParameters' | 'truncateOrphans' | 'truncateExtent', layer?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).masstruncatePost(requestType, layer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns xml containing the request type capabilities for mass truncation
         * @summary Returns available request types for truncation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masstruncateGet(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).masstruncateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Issues a mass truncate request based on the request type parameter. truncateLayer, will clear all caches associated with a named layer, including all permutations of gridset, parameter filter values, and image formats.
         * @summary Issue a mass truncate request
         * @param {'truncateLayer' | 'truncateParameters' | 'truncateOrphans' | 'truncateExtent'} requestType The requestType parameter is used to control which cached tiles to truncate.
         * @param {string} [layer] The layername to truncate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masstruncatePost(requestType: 'truncateLayer' | 'truncateParameters' | 'truncateOrphans' | 'truncateExtent', layer?: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).masstruncatePost(requestType, layer, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Returns xml containing the request type capabilities for mass truncation
     * @summary Returns available request types for truncation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    masstruncateGet(options?: any): AxiosPromise<void>;

    /**
     * Issues a mass truncate request based on the request type parameter. truncateLayer, will clear all caches associated with a named layer, including all permutations of gridset, parameter filter values, and image formats.
     * @summary Issue a mass truncate request
     * @param {'truncateLayer' | 'truncateParameters' | 'truncateOrphans' | 'truncateExtent'} requestType The requestType parameter is used to control which cached tiles to truncate.
     * @param {string} [layer] The layername to truncate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    masstruncatePost(requestType: 'truncateLayer' | 'truncateParameters' | 'truncateOrphans' | 'truncateExtent', layer?: string, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Returns xml containing the request type capabilities for mass truncation
     * @summary Returns available request types for truncation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public masstruncateGet(options?: any) {
        return DefaultApiFp(this.configuration).masstruncateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Issues a mass truncate request based on the request type parameter. truncateLayer, will clear all caches associated with a named layer, including all permutations of gridset, parameter filter values, and image formats.
     * @summary Issue a mass truncate request
     * @param {'truncateLayer' | 'truncateParameters' | 'truncateOrphans' | 'truncateExtent'} requestType The requestType parameter is used to control which cached tiles to truncate.
     * @param {string} [layer] The layername to truncate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public masstruncatePost(requestType: 'truncateLayer' | 'truncateParameters' | 'truncateOrphans' | 'truncateExtent', layer?: string, options?: any) {
        return DefaultApiFp(this.configuration).masstruncatePost(requestType, layer, options).then((request) => request(this.axios, this.basePath));
    }

}


