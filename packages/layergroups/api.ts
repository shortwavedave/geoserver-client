// tslint:disable
/**
 * GeoServer Layer Groups
 * A layer group is a group of layers that can be referenced as a single layer as part of a WMS request. A layer group can also be used as a container for layers.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Layergroup
 */
export interface Layergroup {
    /**
     * Name of the layer group
     * @type {string}
     * @memberof Layergroup
     */
    name?: string;
    /**
     * Name of the layer group mode. Can be SINGLE, NAMED, CONTAINER, or EO.
     * @type {string}
     * @memberof Layergroup
     */
    mode?: LayergroupModeEnum;
    /**
     * Title of the layer group
     * @type {string}
     * @memberof Layergroup
     */
    title?: string;
    /**
     * Abstract of the layer group
     * @type {string}
     * @memberof Layergroup
     */
    abstractTxt?: string;
    /**
     * 
     * @type {LayergroupWorkspace}
     * @memberof Layergroup
     */
    workspace?: LayergroupWorkspace;
    /**
     * 
     * @type {LayergroupPublishables}
     * @memberof Layergroup
     */
    publishables?: LayergroupPublishables;
    /**
     * 
     * @type {LayergroupStyles}
     * @memberof Layergroup
     */
    styles?: LayergroupStyles;
    /**
     * 
     * @type {Array<LayergroupMetadataLink>}
     * @memberof Layergroup
     */
    metadataLinks?: Array<LayergroupMetadataLink>;
    /**
     * 
     * @type {LayergroupBounds}
     * @memberof Layergroup
     */
    bounds?: LayergroupBounds;
    /**
     * 
     * @type {LayergroupKeywords}
     * @memberof Layergroup
     */
    keywords?: LayergroupKeywords;
}

/**
    * @export
    * @enum {string}
    */
export enum LayergroupModeEnum {
    SINGLE = 'SINGLE',
    NAMED = 'NAMED',
    CONTAINER = 'CONTAINER',
    EO = 'EO'
}

/**
 * 
 * @export
 * @interface LayergroupBounds
 */
export interface LayergroupBounds {
    /**
     * Minimum X value of bounds
     * @type {number}
     * @memberof LayergroupBounds
     */
    minx?: number;
    /**
     * Maximum X value of bounds
     * @type {number}
     * @memberof LayergroupBounds
     */
    maxx?: number;
    /**
     * Minimum Y value of bounds
     * @type {number}
     * @memberof LayergroupBounds
     */
    miny?: number;
    /**
     * Maximum Y value of bounds
     * @type {number}
     * @memberof LayergroupBounds
     */
    maxy?: number;
    /**
     * CRS code, usually in the form EPSG:####
     * @type {string}
     * @memberof LayergroupBounds
     */
    crs?: string;
}
/**
 * A collection of keywords associated with the resource.
 * @export
 * @interface LayergroupKeywords
 */
export interface LayergroupKeywords {
    /**
     * List of keyword values with internationalization and vocabulary
     * @type {Array<string>}
     * @memberof LayergroupKeywords
     */
    keyword?: Array<string>;
}
/**
 * 
 * @export
 * @interface LayergroupMetadataLink
 */
export interface LayergroupMetadataLink {
    /**
     * MIME type
     * @type {string}
     * @memberof LayergroupMetadataLink
     */
    type?: string;
    /**
     * Metadata type. Can be ISO9115:2003, FGDC, TC211, 19139, or other.
     * @type {string}
     * @memberof LayergroupMetadataLink
     */
    metadataType?: string;
    /**
     * URL of metadata link
     * @type {string}
     * @memberof LayergroupMetadataLink
     */
    content?: string;
}
/**
 * Layers published by group (in draw order)
 * @export
 * @interface LayergroupPublishables
 */
export interface LayergroupPublishables {
    /**
     * Published layer
     * @type {Array<LayergroupPublished>}
     * @memberof LayergroupPublishables
     */
    published?: Array<LayergroupPublished>;
}
/**
 * 
 * @export
 * @interface LayergroupPublished
 */
export interface LayergroupPublished {
    /**
     * Name of the comprising layer, or empty to indicate a style group defined by the corresponding style.
     * @type {string}
     * @memberof LayergroupPublished
     */
    name?: string;
    /**
     * URL to the comprising layer
     * @type {string}
     * @memberof LayergroupPublished
     */
    link?: string;
}
/**
 * 
 * @export
 * @interface LayergroupResponse
 */
export interface LayergroupResponse {
    /**
     * 
     * @type {Layergroups}
     * @memberof LayergroupResponse
     */
    layerGroups?: Layergroups;
}
/**
 * Style to use to render layer
 * @export
 * @interface LayergroupStyle
 */
export interface LayergroupStyle {
    /**
     * Name of the style for the corresponding layer in the list, or empty to use the default style of the corresponding layer.
     * @type {string}
     * @memberof LayergroupStyle
     */
    name?: string;
    /**
     * URL of the style for the corresponding layer in the list
     * @type {string}
     * @memberof LayergroupStyle
     */
    link?: string;
}
/**
 * Styles used to render layers in group
 * @export
 * @interface LayergroupStyles
 */
export interface LayergroupStyles {
    /**
     * Style to render layer, or empty to use default style.
     * @type {Array<LayergroupStyle>}
     * @memberof LayergroupStyles
     */
    style?: Array<LayergroupStyle>;
}
/**
 * 
 * @export
 * @interface LayergroupWorkspace
 */
export interface LayergroupWorkspace {
    /**
     * Name of workspace that contains the layer group. Will only exist when request includes workspace name (/workspaces/{workspace}/...).
     * @type {string}
     * @memberof LayergroupWorkspace
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface Layergroups
 */
export interface Layergroups {
    /**
     * Name of layer group
     * @type {string}
     * @memberof Layergroups
     */
    name?: string;
    /**
     * URL to layer group definition
     * @type {string}
     * @memberof Layergroups
     */
    link?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a layer group from the server.
         * @summary Delete layer group
         * @param {string} layergroupName The name of the layer group to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLayergroup: async (layergroupName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layergroupName' is not null or undefined
            if (layergroupName === null || layergroupName === undefined) {
                throw new RequiredError('layergroupName','Required parameter layergroupName was null or undefined when calling deleteLayergroup.');
            }
            const localVarPath = `/layergroups/{layergroupName}`
                .replace(`{${"layergroupName"}}`, encodeURIComponent(String(layergroupName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use /layergroups/{layergroup} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLayergroups: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/layergroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a layer group from the server in the given workspace.
         * @summary Delete layer group
         * @param {string} layergroup The name of the layer group to delete.
         * @param {string} workspace The name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceLayergroup: async (layergroup: string, workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layergroup' is not null or undefined
            if (layergroup === null || layergroup === undefined) {
                throw new RequiredError('layergroup','Required parameter layergroup was null or undefined when calling deleteWorkspaceLayergroup.');
            }
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWorkspaceLayergroup.');
            }
            const localVarPath = `/workspaces/{workspace}/layergroups/{layergroup}`
                .replace(`{${"layergroup"}}`, encodeURIComponent(String(layergroup)))
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use /workspaces/{workspace}/layergroups/{layergroup} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceLayergroups: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/layergroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).
         * @summary Retrieve a layer group
         * @param {string} layergroupName The name of the layer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayergroup: async (layergroupName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layergroupName' is not null or undefined
            if (layergroupName === null || layergroupName === undefined) {
                throw new RequiredError('layergroupName','Required parameter layergroupName was null or undefined when calling getLayergroup.');
            }
            const localVarPath = `/layergroups/{layergroupName}`
                .replace(`{${"layergroupName"}}`, encodeURIComponent(String(layergroupName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all layer groups on the server not otherwise in a workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML)
         * @summary Get a list of layer groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayergroups: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/layergroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).
         * @summary Retrieve a layer group
         * @param {string} workspace The name of the workspace
         * @param {string} layergroup The name of the layer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayergroup: async (workspace: string, layergroup: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWorkspaceLayergroup.');
            }
            // verify required parameter 'layergroup' is not null or undefined
            if (layergroup === null || layergroup === undefined) {
                throw new RequiredError('layergroup','Required parameter layergroup was null or undefined when calling getWorkspaceLayergroup.');
            }
            const localVarPath = `/workspaces/{workspace}/layergroups/{layergroup}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"layergroup"}}`, encodeURIComponent(String(layergroup)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all layer groups in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML).
         * @summary Get a list of layer groups in a workspace
         * @param {string} workspace The name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayergroups: async (workspace: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWorkspaceLayergroups.');
            }
            const localVarPath = `/workspaces/{workspace}/layergroups`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a layer group definition, or POST with /layergroups to add a new definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayergroup: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/layergroups/{layergroupName}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new layer group entry to the server.
         * @summary Add a new layer group
         * @param {Layergroup} layergroupBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayergroups: async (layergroupBody: Layergroup, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layergroupBody' is not null or undefined
            if (layergroupBody === null || layergroupBody === undefined) {
                throw new RequiredError('layergroupBody','Required parameter layergroupBody was null or undefined when calling postLayergroups.');
            }
            const localVarPath = `/layergroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof layergroupBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(layergroupBody !== undefined ? layergroupBody : {}) : (layergroupBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a layer group definition, or POST with /workspaces/{workspace}/layergroups to add a new definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaceLayergroup: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/layergroups/{layergroup}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new layer group entry to the server in the specified workspace.
         * @summary Add a new layer group
         * @param {Layergroup} layergroupBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaceLayergroups: async (layergroupBody: Layergroup, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layergroupBody' is not null or undefined
            if (layergroupBody === null || layergroupBody === undefined) {
                throw new RequiredError('layergroupBody','Required parameter layergroupBody was null or undefined when calling postWorkspaceLayergroups.');
            }
            const localVarPath = `/workspaces/{workspace}/layergroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof layergroupBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(layergroupBody !== undefined ? layergroupBody : {}) : (layergroupBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies an existing layer group on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).
         * @summary Modify a layer group.
         * @param {string} layergroupName The name of the layer group to modify.
         * @param {Layergroup} layergroupBody The updated layer group definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLayergroup: async (layergroupName: string, layergroupBody: Layergroup, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layergroupName' is not null or undefined
            if (layergroupName === null || layergroupName === undefined) {
                throw new RequiredError('layergroupName','Required parameter layergroupName was null or undefined when calling putLayergroup.');
            }
            // verify required parameter 'layergroupBody' is not null or undefined
            if (layergroupBody === null || layergroupBody === undefined) {
                throw new RequiredError('layergroupBody','Required parameter layergroupBody was null or undefined when calling putLayergroup.');
            }
            const localVarPath = `/layergroups/{layergroupName}`
                .replace(`{${"layergroupName"}}`, encodeURIComponent(String(layergroupName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof layergroupBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(layergroupBody !== undefined ? layergroupBody : {}) : (layergroupBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new layer group, or PUT on /layergroups/{layergroup} to edit an existing layer group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLayergroups: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/layergroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies an existing layer group on the server in the given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).
         * @summary Modify a layer group.
         * @param {string} workspace The name of the workspace
         * @param {string} layergroup The name of the layer group to modify.
         * @param {Layergroup} layergroupBody The updated layer group definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayergroup: async (workspace: string, layergroup: string, layergroupBody: Layergroup, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWorkspaceLayergroup.');
            }
            // verify required parameter 'layergroup' is not null or undefined
            if (layergroup === null || layergroup === undefined) {
                throw new RequiredError('layergroup','Required parameter layergroup was null or undefined when calling putWorkspaceLayergroup.');
            }
            // verify required parameter 'layergroupBody' is not null or undefined
            if (layergroupBody === null || layergroupBody === undefined) {
                throw new RequiredError('layergroupBody','Required parameter layergroupBody was null or undefined when calling putWorkspaceLayergroup.');
            }
            const localVarPath = `/workspaces/{workspace}/layergroups/{layergroup}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"layergroup"}}`, encodeURIComponent(String(layergroup)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof layergroupBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(layergroupBody !== undefined ? layergroupBody : {}) : (layergroupBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new layer group to a workspace, or PUT on /workspaces/{workspace}/layergroups/{layergroup} to edit an existing layer group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayergroups: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/layergroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a layer group from the server.
         * @summary Delete layer group
         * @param {string} layergroupName The name of the layer group to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLayergroup(layergroupName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteLayergroup(layergroupName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use /layergroups/{layergroup} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLayergroups(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteLayergroups(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a layer group from the server in the given workspace.
         * @summary Delete layer group
         * @param {string} layergroup The name of the layer group to delete.
         * @param {string} workspace The name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkspaceLayergroup(layergroup: string, workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWorkspaceLayergroup(layergroup, workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use /workspaces/{workspace}/layergroups/{layergroup} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWorkspaceLayergroups(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWorkspaceLayergroups(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).
         * @summary Retrieve a layer group
         * @param {string} layergroupName The name of the layer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayergroup(layergroupName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Layergroup>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getLayergroup(layergroupName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all layer groups on the server not otherwise in a workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML)
         * @summary Get a list of layer groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLayergroups(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LayergroupResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getLayergroups(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).
         * @summary Retrieve a layer group
         * @param {string} workspace The name of the workspace
         * @param {string} layergroup The name of the layer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaceLayergroup(workspace: string, layergroup: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Layergroup>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWorkspaceLayergroup(workspace, layergroup, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all layer groups in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML).
         * @summary Get a list of layer groups in a workspace
         * @param {string} workspace The name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaceLayergroups(workspace: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LayergroupResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWorkspaceLayergroups(workspace, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a layer group definition, or POST with /layergroups to add a new definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayergroup(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postLayergroup(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new layer group entry to the server.
         * @summary Add a new layer group
         * @param {Layergroup} layergroupBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLayergroups(layergroupBody: Layergroup, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postLayergroups(layergroupBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a layer group definition, or POST with /workspaces/{workspace}/layergroups to add a new definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWorkspaceLayergroup(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWorkspaceLayergroup(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new layer group entry to the server in the specified workspace.
         * @summary Add a new layer group
         * @param {Layergroup} layergroupBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWorkspaceLayergroups(layergroupBody: Layergroup, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWorkspaceLayergroups(layergroupBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies an existing layer group on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).
         * @summary Modify a layer group.
         * @param {string} layergroupName The name of the layer group to modify.
         * @param {Layergroup} layergroupBody The updated layer group definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putLayergroup(layergroupName: string, layergroupBody: Layergroup, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putLayergroup(layergroupName, layergroupBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new layer group, or PUT on /layergroups/{layergroup} to edit an existing layer group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putLayergroups(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putLayergroups(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies an existing layer group on the server in the given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).
         * @summary Modify a layer group.
         * @param {string} workspace The name of the workspace
         * @param {string} layergroup The name of the layer group to modify.
         * @param {Layergroup} layergroupBody The updated layer group definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWorkspaceLayergroup(workspace: string, layergroup: string, layergroupBody: Layergroup, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWorkspaceLayergroup(workspace, layergroup, layergroupBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new layer group to a workspace, or PUT on /workspaces/{workspace}/layergroups/{layergroup} to edit an existing layer group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWorkspaceLayergroups(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWorkspaceLayergroups(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a layer group from the server.
         * @summary Delete layer group
         * @param {string} layergroupName The name of the layer group to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLayergroup(layergroupName: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteLayergroup(layergroupName, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use /layergroups/{layergroup} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLayergroups(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteLayergroups(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a layer group from the server in the given workspace.
         * @summary Delete layer group
         * @param {string} layergroup The name of the layer group to delete.
         * @param {string} workspace The name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceLayergroup(layergroup: string, workspace: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWorkspaceLayergroup(layergroup, workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use /workspaces/{workspace}/layergroups/{layergroup} instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWorkspaceLayergroups(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWorkspaceLayergroups(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).
         * @summary Retrieve a layer group
         * @param {string} layergroupName The name of the layer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayergroup(layergroupName: string, options?: any): AxiosPromise<Layergroup> {
            return DefaultApiFp(configuration).getLayergroup(layergroupName, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all layer groups on the server not otherwise in a workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML)
         * @summary Get a list of layer groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLayergroups(options?: any): AxiosPromise<LayergroupResponse> {
            return DefaultApiFp(configuration).getLayergroups(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).
         * @summary Retrieve a layer group
         * @param {string} workspace The name of the workspace
         * @param {string} layergroup The name of the layer group to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayergroup(workspace: string, layergroup: string, options?: any): AxiosPromise<Layergroup> {
            return DefaultApiFp(configuration).getWorkspaceLayergroup(workspace, layergroup, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all layer groups in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML).
         * @summary Get a list of layer groups in a workspace
         * @param {string} workspace The name of the workspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayergroups(workspace: string, options?: any): AxiosPromise<LayergroupResponse> {
            return DefaultApiFp(configuration).getWorkspaceLayergroups(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a layer group definition, or POST with /layergroups to add a new definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayergroup(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postLayergroup(options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new layer group entry to the server.
         * @summary Add a new layer group
         * @param {Layergroup} layergroupBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLayergroups(layergroupBody: Layergroup, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).postLayergroups(layergroupBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a layer group definition, or POST with /workspaces/{workspace}/layergroups to add a new definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaceLayergroup(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWorkspaceLayergroup(options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new layer group entry to the server in the specified workspace.
         * @summary Add a new layer group
         * @param {Layergroup} layergroupBody The layer group body information to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWorkspaceLayergroups(layergroupBody: Layergroup, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).postWorkspaceLayergroups(layergroupBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies an existing layer group on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).
         * @summary Modify a layer group.
         * @param {string} layergroupName The name of the layer group to modify.
         * @param {Layergroup} layergroupBody The updated layer group definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLayergroup(layergroupName: string, layergroupBody: Layergroup, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putLayergroup(layergroupName, layergroupBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new layer group, or PUT on /layergroups/{layergroup} to edit an existing layer group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLayergroups(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putLayergroups(options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies an existing layer group on the server in the given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).
         * @summary Modify a layer group.
         * @param {string} workspace The name of the workspace
         * @param {string} layergroup The name of the layer group to modify.
         * @param {Layergroup} layergroupBody The updated layer group definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayergroup(workspace: string, layergroup: string, layergroupBody: Layergroup, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWorkspaceLayergroup(workspace, layergroup, layergroupBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new layer group to a workspace, or PUT on /workspaces/{workspace}/layergroups/{layergroup} to edit an existing layer group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayergroups(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWorkspaceLayergroups(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Deletes a layer group from the server.
     * @summary Delete layer group
     * @param {string} layergroupName The name of the layer group to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteLayergroup(layergroupName: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use /layergroups/{layergroup} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteLayergroups(options?: any): AxiosPromise<void>;

    /**
     * Deletes a layer group from the server in the given workspace.
     * @summary Delete layer group
     * @param {string} layergroup The name of the layer group to delete.
     * @param {string} workspace The name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWorkspaceLayergroup(layergroup: string, workspace: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use /workspaces/{workspace}/layergroups/{layergroup} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWorkspaceLayergroups(options?: any): AxiosPromise<void>;

    /**
     * Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).
     * @summary Retrieve a layer group
     * @param {string} layergroupName The name of the layer group to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getLayergroup(layergroupName: string, options?: any): AxiosPromise<Layergroup>;

    /**
     * Displays a list of all layer groups on the server not otherwise in a workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML)
     * @summary Get a list of layer groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getLayergroups(options?: any): AxiosPromise<LayergroupResponse>;

    /**
     * Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).
     * @summary Retrieve a layer group
     * @param {string} workspace The name of the workspace
     * @param {string} layergroup The name of the layer group to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWorkspaceLayergroup(workspace: string, layergroup: string, options?: any): AxiosPromise<Layergroup>;

    /**
     * Displays a list of all layer groups in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML).
     * @summary Get a list of layer groups in a workspace
     * @param {string} workspace The name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWorkspaceLayergroups(workspace: string, options?: any): AxiosPromise<LayergroupResponse>;

    /**
     * Invalid. Use PUT to edit a layer group definition, or POST with /layergroups to add a new definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postLayergroup(options?: any): AxiosPromise<void>;

    /**
     * Adds a new layer group entry to the server.
     * @summary Add a new layer group
     * @param {Layergroup} layergroupBody The layer group body information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postLayergroups(layergroupBody: Layergroup, options?: any): AxiosPromise<string>;

    /**
     * Invalid. Use PUT to edit a layer group definition, or POST with /workspaces/{workspace}/layergroups to add a new definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWorkspaceLayergroup(options?: any): AxiosPromise<void>;

    /**
     * Adds a new layer group entry to the server in the specified workspace.
     * @summary Add a new layer group
     * @param {Layergroup} layergroupBody The layer group body information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWorkspaceLayergroups(layergroupBody: Layergroup, options?: any): AxiosPromise<string>;

    /**
     * Modifies an existing layer group on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).
     * @summary Modify a layer group.
     * @param {string} layergroupName The name of the layer group to modify.
     * @param {Layergroup} layergroupBody The updated layer group definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putLayergroup(layergroupName: string, layergroupBody: Layergroup, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new layer group, or PUT on /layergroups/{layergroup} to edit an existing layer group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putLayergroups(options?: any): AxiosPromise<void>;

    /**
     * Modifies an existing layer group on the server in the given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).
     * @summary Modify a layer group.
     * @param {string} workspace The name of the workspace
     * @param {string} layergroup The name of the layer group to modify.
     * @param {Layergroup} layergroupBody The updated layer group definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWorkspaceLayergroup(workspace: string, layergroup: string, layergroupBody: Layergroup, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new layer group to a workspace, or PUT on /workspaces/{workspace}/layergroups/{layergroup} to edit an existing layer group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWorkspaceLayergroups(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Deletes a layer group from the server.
     * @summary Delete layer group
     * @param {string} layergroupName The name of the layer group to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteLayergroup(layergroupName: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteLayergroup(layergroupName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use /layergroups/{layergroup} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteLayergroups(options?: any) {
        return DefaultApiFp(this.configuration).deleteLayergroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a layer group from the server in the given workspace.
     * @summary Delete layer group
     * @param {string} layergroup The name of the layer group to delete.
     * @param {string} workspace The name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWorkspaceLayergroup(layergroup: string, workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteWorkspaceLayergroup(layergroup, workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use /workspaces/{workspace}/layergroups/{layergroup} instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWorkspaceLayergroups(options?: any) {
        return DefaultApiFp(this.configuration).deleteWorkspaceLayergroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).
     * @summary Retrieve a layer group
     * @param {string} layergroupName The name of the layer group to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLayergroup(layergroupName: string, options?: any) {
        return DefaultApiFp(this.configuration).getLayergroup(layergroupName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all layer groups on the server not otherwise in a workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML)
     * @summary Get a list of layer groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLayergroups(options?: any) {
        return DefaultApiFp(this.configuration).getLayergroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single layer group definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).
     * @summary Retrieve a layer group
     * @param {string} workspace The name of the workspace
     * @param {string} layergroup The name of the layer group to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWorkspaceLayergroup(workspace: string, layergroup: string, options?: any) {
        return DefaultApiFp(this.configuration).getWorkspaceLayergroup(workspace, layergroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all layer groups in a given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups.xml\" for XML).
     * @summary Get a list of layer groups in a workspace
     * @param {string} workspace The name of the workspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWorkspaceLayergroups(workspace: string, options?: any) {
        return DefaultApiFp(this.configuration).getWorkspaceLayergroups(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a layer group definition, or POST with /layergroups to add a new definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLayergroup(options?: any) {
        return DefaultApiFp(this.configuration).postLayergroup(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new layer group entry to the server.
     * @summary Add a new layer group
     * @param {Layergroup} layergroupBody The layer group body information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLayergroups(layergroupBody: Layergroup, options?: any) {
        return DefaultApiFp(this.configuration).postLayergroups(layergroupBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a layer group definition, or POST with /workspaces/{workspace}/layergroups to add a new definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWorkspaceLayergroup(options?: any) {
        return DefaultApiFp(this.configuration).postWorkspaceLayergroup(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new layer group entry to the server in the specified workspace.
     * @summary Add a new layer group
     * @param {Layergroup} layergroupBody The layer group body information to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWorkspaceLayergroups(layergroupBody: Layergroup, options?: any) {
        return DefaultApiFp(this.configuration).postWorkspaceLayergroups(layergroupBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies an existing layer group on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layergroups/{layergroup}.xml\" for XML).
     * @summary Modify a layer group.
     * @param {string} layergroupName The name of the layer group to modify.
     * @param {Layergroup} layergroupBody The updated layer group definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putLayergroup(layergroupName: string, layergroupBody: Layergroup, options?: any) {
        return DefaultApiFp(this.configuration).putLayergroup(layergroupName, layergroupBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new layer group, or PUT on /layergroups/{layergroup} to edit an existing layer group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putLayergroups(options?: any) {
        return DefaultApiFp(this.configuration).putLayergroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies an existing layer group on the server in the given workspace. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/layergroups/{layergroup}.xml\" for XML).
     * @summary Modify a layer group.
     * @param {string} workspace The name of the workspace
     * @param {string} layergroup The name of the layer group to modify.
     * @param {Layergroup} layergroupBody The updated layer group definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWorkspaceLayergroup(workspace: string, layergroup: string, layergroupBody: Layergroup, options?: any) {
        return DefaultApiFp(this.configuration).putWorkspaceLayergroup(workspace, layergroup, layergroupBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new layer group to a workspace, or PUT on /workspaces/{workspace}/layergroups/{layergroup} to edit an existing layer group.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWorkspaceLayergroups(options?: any) {
        return DefaultApiFp(this.configuration).putWorkspaceLayergroups(options).then((request) => request(this.axios, this.basePath));
    }

}


