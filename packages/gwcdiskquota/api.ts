// tslint:disable
/**
 * GeoWebCache DiskQuota
 * The REST API for Disk Quota management provides a RESTful interface through which clients can configure the disk usage limits and expiration policies for a GeoWebCache instance through simple HTTP calls.  Since disk usage increases geometrically by zoom level, one single seeding task could fill up an entire storage device. Because of this, GeoWebCache employs a disk quota system where one can specify the maximum amount of disk space to use for a particular layer, as well as logic on how to proceed when that quota is reached. There are two different policies for managing the disk quotas - Least Frequently Used (LFU) and Least Recently Used (LRU).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DiskQuota
 */
export interface DiskQuota {
    /**
     * Determines if Disk Quota is to be used.
     * @type {boolean}
     * @memberof DiskQuota
     */
    enabled?: boolean;
    /**
     * The number of bytes allocated to Disk Quota.
     * @type {number}
     * @memberof DiskQuota
     */
    diskBlockSize?: number;
    /**
     * GeoWebCache will not truncate the cache as soon as the disk quota is exceeded. Instead, it polls the store at given intervals, with this time interval set.
     * @type {number}
     * @memberof DiskQuota
     */
    cacheCleanUpFrequency?: number;
    /**
     * The time unit used to describe the number in cacheCleanUpFrequency.
     * @type {string}
     * @memberof DiskQuota
     */
    cacheCleanUpUnits?: DiskQuotaCacheCleanUpUnitsEnum;
    /**
     * The amount of threads to use when processing the disk quota.
     * @type {number}
     * @memberof DiskQuota
     */
    maxConcurrentCleanUps?: number;
    /**
     * When a disk quota is reached, further tiles will be saved at the expense of other tiles which will be truncated. The Least Frequently Used (LFU) policy will analyze the disk quota page store and delete the pages of tiles that have been accessed the least often. The Least Recently Used (LRU) policy will analyze the diskquota page store and delete the tiles that haven’t been accessed in the longest amount of time.
     * @type {string}
     * @memberof DiskQuota
     */
    globalExpirationPolicyName?: DiskQuotaGlobalExpirationPolicyNameEnum;
    /**
     * 
     * @type {DiskQuotaGlobalQuota}
     * @memberof DiskQuota
     */
    globalQuota?: DiskQuotaGlobalQuota;
    /**
     * 
     * @type {DiskQuotaLayerQuota}
     * @memberof DiskQuota
     */
    layerQuota?: DiskQuotaLayerQuota;
}

/**
    * @export
    * @enum {string}
    */
export enum DiskQuotaCacheCleanUpUnitsEnum {
    SECONDS = 'SECONDS',
    MINUTES = 'MINUTES',
    HOURS = 'HOURS',
    DAYS = 'DAYS'
}
/**
    * @export
    * @enum {string}
    */
export enum DiskQuotaGlobalExpirationPolicyNameEnum {
    LRU = 'LRU',
    LSU = 'LSU'
}

/**
 * When the global quota is exceeded, first any explicitly configured quota is enforced, and then the global quota is enforced acting upon all the remaining layers until the global quota is reached back.
 * @export
 * @interface DiskQuotaGlobalQuota
 */
export interface DiskQuotaGlobalQuota {
    /**
     * Numeric value for global quota.
     * @type {number}
     * @memberof DiskQuotaGlobalQuota
     */
    value?: number;
    /**
     * The type of unit quantified by value.
     * @type {string}
     * @memberof DiskQuotaGlobalQuota
     */
    units?: DiskQuotaGlobalQuotaUnitsEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DiskQuotaGlobalQuotaUnitsEnum {
    B = 'B',
    KiB = 'KiB',
    MiB = 'MiB',
    GiB = 'GiB',
    TiB = 'TiB'
}

/**
 * When a layer\'s disk quota is reached, further tiles will be saved at the expense of other tiles which will be truncated.
 * @export
 * @interface DiskQuotaLayerQuota
 */
export interface DiskQuotaLayerQuota {
    /**
     * The layer name.
     * @type {string}
     * @memberof DiskQuotaLayerQuota
     */
    layer?: string;
    /**
     * When a disk quota is reached, further tiles will be saved at the expense of other tiles which will be truncated. The Least Frequently Used (LFU) policy will analyze the disk quota page store and delete the pages of tiles that have been accessed the least often. The Least Recently Used (LRU) policy will analyze the diskquota page store and delete the tiles that haven’t been accessed in the longest amount of time.
     * @type {string}
     * @memberof DiskQuotaLayerQuota
     */
    expirationPolicyName?: DiskQuotaLayerQuotaExpirationPolicyNameEnum;
    /**
     * 
     * @type {DiskQuotaLayerQuotaQuota}
     * @memberof DiskQuotaLayerQuota
     */
    quota?: DiskQuotaLayerQuotaQuota;
}

/**
    * @export
    * @enum {string}
    */
export enum DiskQuotaLayerQuotaExpirationPolicyNameEnum {
    LRU = 'LRU',
    LSU = 'LSU'
}

/**
 * Container for quota value and units
 * @export
 * @interface DiskQuotaLayerQuotaQuota
 */
export interface DiskQuotaLayerQuotaQuota {
    /**
     * Numeric value for global quota.
     * @type {number}
     * @memberof DiskQuotaLayerQuotaQuota
     */
    value?: number;
    /**
     * The type of unit quantified by value.
     * @type {string}
     * @memberof DiskQuotaLayerQuotaQuota
     */
    units?: DiskQuotaLayerQuotaQuotaUnitsEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DiskQuotaLayerQuotaQuotaUnitsEnum {
    B = 'B',
    KiB = 'KiB',
    MiB = 'MiB',
    GiB = 'GiB',
    TiB = 'TiB'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the GeoWebCache DiskQuota configurations which include disk usage limits and expritation policies for a gwc instance.
         * @summary Returns the gwc Quota configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diskQuotaGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/diskquota`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The request body for PUT should contain desired properties to be modified.
         * @summary Modify properties of a gwc instance disk quota configuration.
         * @param {DiskQuota} [requestBody] The diskquota configuration with modified property values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diskQuotaPut: async (requestBody?: DiskQuota, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/diskquota`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the GeoWebCache DiskQuota configurations which include disk usage limits and expritation policies for a gwc instance.
         * @summary Returns the gwc Quota configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diskQuotaGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).diskQuotaGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * The request body for PUT should contain desired properties to be modified.
         * @summary Modify properties of a gwc instance disk quota configuration.
         * @param {DiskQuota} [requestBody] The diskquota configuration with modified property values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async diskQuotaPut(requestBody?: DiskQuota, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).diskQuotaPut(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the GeoWebCache DiskQuota configurations which include disk usage limits and expritation policies for a gwc instance.
         * @summary Returns the gwc Quota configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diskQuotaGet(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).diskQuotaGet(options).then((request) => request(axios, basePath));
        },
        /**
         * The request body for PUT should contain desired properties to be modified.
         * @summary Modify properties of a gwc instance disk quota configuration.
         * @param {DiskQuota} [requestBody] The diskquota configuration with modified property values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        diskQuotaPut(requestBody?: DiskQuota, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).diskQuotaPut(requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Returns the GeoWebCache DiskQuota configurations which include disk usage limits and expritation policies for a gwc instance.
     * @summary Returns the gwc Quota configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    diskQuotaGet(options?: any): AxiosPromise<void>;

    /**
     * The request body for PUT should contain desired properties to be modified.
     * @summary Modify properties of a gwc instance disk quota configuration.
     * @param {DiskQuota} [requestBody] The diskquota configuration with modified property values.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    diskQuotaPut(requestBody?: DiskQuota, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Returns the GeoWebCache DiskQuota configurations which include disk usage limits and expritation policies for a gwc instance.
     * @summary Returns the gwc Quota configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public diskQuotaGet(options?: any) {
        return DefaultApiFp(this.configuration).diskQuotaGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The request body for PUT should contain desired properties to be modified.
     * @summary Modify properties of a gwc instance disk quota configuration.
     * @param {DiskQuota} [requestBody] The diskquota configuration with modified property values.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public diskQuotaPut(requestBody?: DiskQuota, options?: any) {
        return DefaultApiFp(this.configuration).diskQuotaPut(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

}


