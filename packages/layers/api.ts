// tslint:disable
/**
 * GeoServer Layers
 * A layer is a published resource (feature type or coverage).
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AuthorityURL
 */
export interface AuthorityURL {
    /**
     * Authory name, describing the industry, national or international origanization responsible for data product standard.
     * @type {string}
     * @memberof AuthorityURL
     */
    name?: string;
    /**
     * URL to authority organization
     * @type {string}
     * @memberof AuthorityURL
     */
    href?: string;
}
/**
 *
 * @export
 * @interface Identifier
 */
export interface Identifier {
    /**
     * Authority cited, for details see authorityURLs
     * @type {string}
     * @memberof Identifier
     */
    authority?: string;
    /**
     * Work citied, often a data standard provided by
     * @type {string}
     * @memberof Identifier
     */
    identifier?: string;
}
/**
 *
 * @export
 * @interface Layer
 */
export interface Layer {
    /**
     * Name of the layer
     * @type {string}
     * @memberof Layer
     */
    name?: string;
    /**
     * Location of the layer in the WMS capabilities layer tree
     * @type {string}
     * @memberof Layer
     */
    path?: string;
    /**
     * Type of published layer. Can be VECTOR, RASTER, REMOTE, WMS or GROUP. Must be consistent with resource definition.
     * @type {string}
     * @memberof Layer
     */
    type?: LayerTypeEnum;
    /**
     *
     * @type {StyleReference}
     * @memberof Layer
     */
    defaultStyle?: StyleReference;
    /**
     *
     * @type {LayerStyles}
     * @memberof Layer
     */
    styles?: LayerStyles;
    /**
     *
     * @type {LayerResource}
     * @memberof Layer
     */
    resource?: LayerResource;
    /**
     * Controls layer transparency (whether the layer is opaque or transparent).
     * @type {boolean}
     * @memberof Layer
     */
    opaque?: boolean;
    /**
     *
     * @type {Array<MetadataEntry>}
     * @memberof Layer
     */
    metadata?: Array<MetadataEntry>;
    /**
     *
     * @type {LayerAttribution}
     * @memberof Layer
     */
    attribution?: LayerAttribution;
    /**
     *
     * @type {Array<AuthorityURL>}
     * @memberof Layer
     */
    authorityURLs?: Array<AuthorityURL>;
    /**
     *
     * @type {Array<Identifier>}
     * @memberof Layer
     */
    identifiers?: Array<Identifier>;
}

/**
    * @export
    * @enum {string}
    */
export enum LayerTypeEnum {
    VECTOR = 'VECTOR',
    RASTER = 'RASTER',
    REMOTE = 'REMOTE',
    WMS = 'WMS',
    GROUP = 'GROUP'
}

/**
 * WMS attribution information to be drawn on each map
 * @export
 * @interface LayerAttribution
 */
export interface LayerAttribution {
    /**
     * Human-readable text describing the data provider
     * @type {string}
     * @memberof LayerAttribution
     */
    title?: string;
    /**
     * URL to data provider
     * @type {string}
     * @memberof LayerAttribution
     */
    href?: string;
    /**
     * Data provider logo
     * @type {string}
     * @memberof LayerAttribution
     */
    logoURL?: string;
    /**
     * Data provider logo width
     * @type {number}
     * @memberof LayerAttribution
     */
    logoWidth?: number;
    /**
     * Data provider logo height
     * @type {number}
     * @memberof LayerAttribution
     */
    logoHeight?: number;
    /**
     * Format of data provider logo, example \"image/png\"
     * @type {string}
     * @memberof LayerAttribution
     */
    logoType?: string;
}
/**
 *
 * @export
 * @interface LayerReference
 */
export interface LayerReference {
    /**
     * Name of layer
     * @type {string}
     * @memberof LayerReference
     */
    name?: string;
    /**
     * URL to layer definition
     * @type {string}
     * @memberof LayerReference
     */
    link?: string;
}
/**
 * Resource supplying information for layer publication
 * @export
 * @interface LayerResource
 */
export interface LayerResource {
    /**
     * required value featureType
     * @type {string}
     * @memberof LayerResource
     */
    _class?: LayerResourceClassEnum;
    /**
     * Name of resource
     * @type {string}
     * @memberof LayerResource
     */
    name?: string;
    /**
     * URL to the resource definition
     * @type {string}
     * @memberof LayerResource
     */
    link?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LayerResourceClassEnum {
    FeatureType = 'featureType'
}

/**
 * Avaialble styles for layer publication
 * @export
 * @interface LayerStyles
 */
export interface LayerStyles {
    /**
     * required value linked-hash-set.
     * @type {string}
     * @memberof LayerStyles
     */
    _class?: LayerStylesClassEnum;
    /**
     *
     * @type {Array<StyleReference>}
     * @memberof LayerStyles
     */
    style?: Array<StyleReference>;
}

/**
    * @export
    * @enum {string}
    */
export enum LayerStylesClassEnum {
    LinkedHashSet = 'linked-hash-set'
}

/**
 *
 * @export
 * @interface Layers
 */
export interface Layers {
    /**
     *
     * @type {LayerReference}
     * @memberof Layers
     */
    layers?: LayerReference;
}
/**
 *
 * @export
 * @interface MetadataEntry
 */
export interface MetadataEntry {
    /**
     * Key used for metadata entry, additional keys are added over time
     * @type {string}
     * @memberof MetadataEntry
     */
    key?: MetadataEntryKeyEnum;
    /**
     * Text value for provided key Valid text depends on key used. Example  {\'@key\'=\'buffer\',\'$\'=\'5\'}\") or <entry key=\"buffer\">5</entry>
     * @type {string}
     * @memberof MetadataEntry
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MetadataEntryKeyEnum {
    Buffer = 'buffer'
}

/**
 * Reference to style definition
 * @export
 * @interface StyleReference
 */
export interface StyleReference {
    /**
     * Name of style
     * @type {string}
     * @memberof StyleReference
     */
    name?: string;
    /**
     * URL to the style definition
     * @type {string}
     * @memberof StyleReference
     */
    link?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all layers on the server. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)
         * @summary Get a list of layers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a layer from the server.
         * @summary Delete layer
         * @param {string} layerName The name of the layer to delete.
         * @param {boolean} [recurse] Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layer groups reference the layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameDelete: async (layerName: string, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerName' is not null or undefined
            if (layerName === null || layerName === undefined) {
                throw new RequiredError('layerName','Required parameter layerName was null or undefined when calling layersNameDelete.');
            }
            const localVarPath = `/layers/{layerName}`
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Retrieve a layer
         * @param {string} layerName The name of the layer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameGet: async (layerName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerName' is not null or undefined
            if (layerName === null || layerName === undefined) {
                throw new RequiredError('layerName','Required parameter layerName was null or undefined when calling layersNameGet.');
            }
            const localVarPath = `/layers/{layerName}`
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNamePost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/layers/{layerName}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Modify a layer.
         * @param {string} layerName The name of the layer to modify.
         * @param {Layer} layerBody The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNamePut: async (layerName: string, layerBody: Layer, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerName' is not null or undefined
            if (layerName === null || layerName === undefined) {
                throw new RequiredError('layerName','Required parameter layerName was null or undefined when calling layersNamePut.');
            }
            // verify required parameter 'layerBody' is not null or undefined
            if (layerBody === null || layerBody === undefined) {
                throw new RequiredError('layerBody','Required parameter layerBody was null or undefined when calling layersNamePut.');
            }
            const localVarPath = `/layers/{layerName}`
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof layerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(layerBody !== undefined ? layerBody : {}) : (layerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a layer from the server.
         * @summary Delete layer
         * @param {string} workspaceName The name of the workspace the layer is in.
         * @param {string} layerName The name of the layer to delete.
         * @param {boolean} [recurse] Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layer groups reference the layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameWorkspaceDelete: async (workspaceName: string, layerName: string, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling layersNameWorkspaceDelete.');
            }
            // verify required parameter 'layerName' is not null or undefined
            if (layerName === null || layerName === undefined) {
                throw new RequiredError('layerName','Required parameter layerName was null or undefined when calling layersNameWorkspaceDelete.');
            }
            const localVarPath = `/workspaces/{workspaceName}/layers/{layerName}`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Retrieve a layer
         * @param {string} workspaceName The name of the workspace the layer is in.
         * @param {string} layerName The name of the layer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameWorkspaceGet: async (workspaceName: string, layerName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling layersNameWorkspaceGet.');
            }
            // verify required parameter 'layerName' is not null or undefined
            if (layerName === null || layerName === undefined) {
                throw new RequiredError('layerName','Required parameter layerName was null or undefined when calling layersNameWorkspaceGet.');
            }
            const localVarPath = `/workspaces/{workspaceName}/layers/{layerName}`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameWorkspacePost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspaceName}/layers/{layerName}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Modify a layer.
         * @param {string} workspaceName The name of the workspace the layer is in.
         * @param {string} layerName The name of the layer to modify.
         * @param {Layer} layerBody The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameWorkspacePut: async (workspaceName: string, layerName: string, layerBody: Layer, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling layersNameWorkspacePut.');
            }
            // verify required parameter 'layerName' is not null or undefined
            if (layerName === null || layerName === undefined) {
                throw new RequiredError('layerName','Required parameter layerName was null or undefined when calling layersNameWorkspacePut.');
            }
            // verify required parameter 'layerBody' is not null or undefined
            if (layerBody === null || layerBody === undefined) {
                throw new RequiredError('layerBody','Required parameter layerBody was null or undefined when calling layersNameWorkspacePut.');
            }
            const localVarPath = `/workspaces/{workspaceName}/layers/{layerName}`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)))
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof layerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(layerBody !== undefined ? layerBody : {}) : (layerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersPost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. To edit a layer, use PUT on an individual layer instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersPut: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersWorkspaceDelete: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspaceName}/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all layers in the provided workspace. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)
         * @summary Get a list of layers in a workspace.
         * @param {string} workspaceName The name of the workspace to list layers in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersWorkspaceGet: async (workspaceName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceName' is not null or undefined
            if (workspaceName === null || workspaceName === undefined) {
                throw new RequiredError('workspaceName','Required parameter workspaceName was null or undefined when calling layersWorkspaceGet.');
            }
            const localVarPath = `/workspaces/{workspaceName}/layers`
                .replace(`{${"workspaceName"}}`, encodeURIComponent(String(workspaceName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersWorkspacePost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspaceName}/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. To edit a layer, use PUT on an individual layer instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersWorkspacePut: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspaceName}/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersDelete(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all layers on the server. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)
         * @summary Get a list of layers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Layers>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a layer from the server.
         * @summary Delete layer
         * @param {string} layerName The name of the layer to delete.
         * @param {boolean} [recurse] Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layer groups reference the layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNameDelete(layerName: string, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNameDelete(layerName, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Retrieve a layer
         * @param {string} layerName The name of the layer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNameGet(layerName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Layer>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNameGet(layerName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNamePost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNamePost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Modify a layer.
         * @param {string} layerName The name of the layer to modify.
         * @param {Layer} layerBody The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNamePut(layerName: string, layerBody: Layer, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNamePut(layerName, layerBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a layer from the server.
         * @summary Delete layer
         * @param {string} workspaceName The name of the workspace the layer is in.
         * @param {string} layerName The name of the layer to delete.
         * @param {boolean} [recurse] Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layer groups reference the layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNameWorkspaceDelete(workspaceName: string, layerName: string, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNameWorkspaceDelete(workspaceName, layerName, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Retrieve a layer
         * @param {string} workspaceName The name of the workspace the layer is in.
         * @param {string} layerName The name of the layer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNameWorkspaceGet(workspaceName: string, layerName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Layer>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNameWorkspaceGet(workspaceName, layerName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNameWorkspacePost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNameWorkspacePost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Modify a layer.
         * @param {string} workspaceName The name of the workspace the layer is in.
         * @param {string} layerName The name of the layer to modify.
         * @param {Layer} layerBody The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersNameWorkspacePut(workspaceName: string, layerName: string, layerBody: Layer, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersNameWorkspacePut(workspaceName, layerName, layerBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. To edit a layer, use PUT on an individual layer instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersPut(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersPut(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersWorkspaceDelete(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersWorkspaceDelete(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all layers in the provided workspace. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)
         * @summary Get a list of layers in a workspace.
         * @param {string} workspaceName The name of the workspace to list layers in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersWorkspaceGet(workspaceName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Layers>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersWorkspaceGet(workspaceName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersWorkspacePost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersWorkspacePost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. To edit a layer, use PUT on an individual layer instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async layersWorkspacePut(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).layersWorkspacePut(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersDelete(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all layers on the server. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)
         * @summary Get a list of layers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersGet(options?: any): AxiosPromise<Layers> {
            return DefaultApiFp(configuration).layersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a layer from the server.
         * @summary Delete layer
         * @param {string} layerName The name of the layer to delete.
         * @param {boolean} [recurse] Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layer groups reference the layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameDelete(layerName: string, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersNameDelete(layerName, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Retrieve a layer
         * @param {string} layerName The name of the layer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameGet(layerName: string, options?: any): AxiosPromise<Layer> {
            return DefaultApiFp(configuration).layersNameGet(layerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNamePost(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersNamePost(options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Modify a layer.
         * @param {string} layerName The name of the layer to modify.
         * @param {Layer} layerBody The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNamePut(layerName: string, layerBody: Layer, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersNamePut(layerName, layerBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a layer from the server.
         * @summary Delete layer
         * @param {string} workspaceName The name of the workspace the layer is in.
         * @param {string} layerName The name of the layer to delete.
         * @param {boolean} [recurse] Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layer groups reference the layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameWorkspaceDelete(workspaceName: string, layerName: string, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersNameWorkspaceDelete(workspaceName, layerName, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Retrieve a layer
         * @param {string} workspaceName The name of the workspace the layer is in.
         * @param {string} layerName The name of the layer to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameWorkspaceGet(workspaceName: string, layerName: string, options?: any): AxiosPromise<Layer> {
            return DefaultApiFp(configuration).layersNameWorkspaceGet(workspaceName, layerName, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameWorkspacePost(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersNameWorkspacePost(options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
         * @summary Modify a layer.
         * @param {string} workspaceName The name of the workspace the layer is in.
         * @param {string} layerName The name of the layer to modify.
         * @param {Layer} layerBody The updated layer definition.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersNameWorkspacePut(workspaceName: string, layerName: string, layerBody: Layer, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersNameWorkspacePut(workspaceName, layerName, layerBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersPost(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. To edit a layer, use PUT on an individual layer instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersPut(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersPut(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersWorkspaceDelete(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersWorkspaceDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all layers in the provided workspace. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)
         * @summary Get a list of layers in a workspace.
         * @param {string} workspaceName The name of the workspace to list layers in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersWorkspaceGet(workspaceName: string, options?: any): AxiosPromise<Layers> {
            return DefaultApiFp(configuration).layersWorkspaceGet(workspaceName, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersWorkspacePost(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersWorkspacePost(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. To edit a layer, use PUT on an individual layer instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        layersWorkspacePut(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).layersWorkspacePut(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Invalid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersDelete(options?: any): AxiosPromise<void>;

    /**
     * Displays a list of all layers on the server. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)
     * @summary Get a list of layers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersGet(options?: any): AxiosPromise<Layers>;

    /**
     * Deletes a layer from the server.
     * @summary Delete layer
     * @param {string} layerName The name of the layer to delete.
     * @param {boolean} [recurse] Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layer groups reference the layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNameDelete(layerName: string, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
     * @summary Retrieve a layer
     * @param {string} layerName The name of the layer to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNameGet(layerName: string, options?: any): AxiosPromise<Layer>;

    /**
     * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNamePost(options?: any): AxiosPromise<void>;

    /**
     * Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
     * @summary Modify a layer.
     * @param {string} layerName The name of the layer to modify.
     * @param {Layer} layerBody The updated layer definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNamePut(layerName: string, layerBody: Layer, options?: any): AxiosPromise<void>;

    /**
     * Deletes a layer from the server.
     * @summary Delete layer
     * @param {string} workspaceName The name of the workspace the layer is in.
     * @param {string} layerName The name of the layer to delete.
     * @param {boolean} [recurse] Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layer groups reference the layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNameWorkspaceDelete(workspaceName: string, layerName: string, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
     * @summary Retrieve a layer
     * @param {string} workspaceName The name of the workspace the layer is in.
     * @param {string} layerName The name of the layer to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNameWorkspaceGet(workspaceName: string, layerName: string, options?: any): AxiosPromise<Layer>;

    /**
     * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNameWorkspacePost(options?: any): AxiosPromise<void>;

    /**
     * Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
     * @summary Modify a layer.
     * @param {string} workspaceName The name of the workspace the layer is in.
     * @param {string} layerName The name of the layer to modify.
     * @param {Layer} layerBody The updated layer definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersNameWorkspacePut(workspaceName: string, layerName: string, layerBody: Layer, options?: any): AxiosPromise<void>;

    /**
     * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersPost(options?: any): AxiosPromise<void>;

    /**
     * Invalid. To edit a layer, use PUT on an individual layer instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersPut(options?: any): AxiosPromise<void>;

    /**
     * Invalid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersWorkspaceDelete(options?: any): AxiosPromise<void>;

    /**
     * Displays a list of all layers in the provided workspace. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)
     * @summary Get a list of layers in a workspace.
     * @param {string} workspaceName The name of the workspace to list layers in
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersWorkspaceGet(workspaceName: string, options?: any): AxiosPromise<Layers>;

    /**
     * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersWorkspacePost(options?: any): AxiosPromise<void>;

    /**
     * Invalid. To edit a layer, use PUT on an individual layer instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    layersWorkspacePut(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Invalid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersDelete(options?: any) {
        return DefaultApiFp(this.configuration).layersDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all layers on the server. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)
     * @summary Get a list of layers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersGet(options?: any) {
        return DefaultApiFp(this.configuration).layersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a layer from the server.
     * @summary Delete layer
     * @param {string} layerName The name of the layer to delete.
     * @param {boolean} [recurse] Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layer groups reference the layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNameDelete(layerName: string, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).layersNameDelete(layerName, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
     * @summary Retrieve a layer
     * @param {string} layerName The name of the layer to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNameGet(layerName: string, options?: any) {
        return DefaultApiFp(this.configuration).layersNameGet(layerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNamePost(options?: any) {
        return DefaultApiFp(this.configuration).layersNamePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
     * @summary Modify a layer.
     * @param {string} layerName The name of the layer to modify.
     * @param {Layer} layerBody The updated layer definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNamePut(layerName: string, layerBody: Layer, options?: any) {
        return DefaultApiFp(this.configuration).layersNamePut(layerName, layerBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a layer from the server.
     * @summary Delete layer
     * @param {string} workspaceName The name of the workspace the layer is in.
     * @param {string} layerName The name of the layer to delete.
     * @param {boolean} [recurse] Recursively removes the layer from all layer groups which reference it. If this results in an empty layer group, also delete the layer group. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layer groups reference the layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNameWorkspaceDelete(workspaceName: string, layerName: string, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).layersNameWorkspaceDelete(workspaceName, layerName, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single layer definition. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
     * @summary Retrieve a layer
     * @param {string} workspaceName The name of the workspace the layer is in.
     * @param {string} layerName The name of the layer to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNameWorkspaceGet(workspaceName: string, layerName: string, options?: any) {
        return DefaultApiFp(this.configuration).layersNameWorkspaceGet(workspaceName, layerName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNameWorkspacePost(options?: any) {
        return DefaultApiFp(this.configuration).layersNameWorkspacePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies an existing layer on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers/{layer}.xml\" for XML).
     * @summary Modify a layer.
     * @param {string} workspaceName The name of the workspace the layer is in.
     * @param {string} layerName The name of the layer to modify.
     * @param {Layer} layerBody The updated layer definition.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersNameWorkspacePut(workspaceName: string, layerName: string, layerBody: Layer, options?: any) {
        return DefaultApiFp(this.configuration).layersNameWorkspacePut(workspaceName, layerName, layerBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersPost(options?: any) {
        return DefaultApiFp(this.configuration).layersPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. To edit a layer, use PUT on an individual layer instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersPut(options?: any) {
        return DefaultApiFp(this.configuration).layersPut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersWorkspaceDelete(options?: any) {
        return DefaultApiFp(this.configuration).layersWorkspaceDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all layers in the provided workspace. You must use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/layers.xml\" for XML)
     * @summary Get a list of layers in a workspace.
     * @param {string} workspaceName The name of the workspace to list layers in
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersWorkspaceGet(workspaceName: string, options?: any) {
        return DefaultApiFp(this.configuration).layersWorkspaceGet(workspaceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. To create a new layer, instead POST to one of `/workspaces/{workspaceName}/coveragestores/{coveragestoreName}/coverages`, `/workspaces/{workspaceName}/datastores/{datastoreName}/featuretypes`, `/workspaces/{workspaceName}/wmsstores/{wmsstoreName}/wmslayers`, or `/workspaces/{workspaceName}/wmtsstores/{wmststoreName}/wmtslayers`
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersWorkspacePost(options?: any) {
        return DefaultApiFp(this.configuration).layersWorkspacePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. To edit a layer, use PUT on an individual layer instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public layersWorkspacePut(options?: any) {
        return DefaultApiFp(this.configuration).layersWorkspacePut(options).then((request) => request(this.axios, this.basePath));
    }

}


