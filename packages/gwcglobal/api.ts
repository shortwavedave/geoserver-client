// tslint:disable
/**
 * GeoWebCache Global
 * Global configuration for the GeoWebCache server
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The global configuration
 * @export
 * @interface Global
 */
export interface Global {
    /**
     * 
     * @type {ServiceInformation}
     * @memberof Global
     */
    serviceInformation?: ServiceInformation;
    /**
     * Whether runtime statistics are being gathered. Runtime statistics run, by default, every three second and provide data about how many requests the system has been serving in the past 3, 15 and 60 seconds, as well as aggregate numbers.
     * @type {boolean}
     * @memberof Global
     */
    runtimeStatsEnabled?: boolean;
    /**
     * Whether the server is running in WMTS strict compliance mode.
     * @type {boolean}
     * @memberof Global
     */
    wmtsCiteCompliant?: boolean;
    /**
     * The number of seconds GWC will wait for a backend server to return something before closing the connection.
     * @type {number}
     * @memberof Global
     */
    backendTimeout?: number;
    /**
     * The GeoWebCache version. Read-only.
     * @type {string}
     * @memberof Global
     */
    version?: string;
    /**
     * The unique identifier for this global server configuration. Read-only.
     * @type {string}
     * @memberof Global
     */
    identifier?: string;
    /**
     * The location of this configuration. Read-only.
     * @type {string}
     * @memberof Global
     */
    location?: string;
}
/**
 * Contact information for the entity providing the service.
 * @export
 * @interface ServiceContact
 */
export interface ServiceContact {
    /**
     * The name of the contact.
     * @type {string}
     * @memberof ServiceContact
     */
    individualName?: string;
    /**
     * The position of the contact.
     * @type {string}
     * @memberof ServiceContact
     */
    positionName?: string;
    /**
     * The type of address, e.g. \"Work\" or \"Home\".
     * @type {string}
     * @memberof ServiceContact
     */
    addressType?: string;
    /**
     * The street portion of the address.
     * @type {string}
     * @memberof ServiceContact
     */
    addressStreet?: string;
    /**
     * The city portion of the address.
     * @type {string}
     * @memberof ServiceContact
     */
    addressCity?: string;
    /**
     * The administrative area portion of the address.
     * @type {string}
     * @memberof ServiceContact
     */
    addressAdministrativeArea?: string;
    /**
     * The postal code portion of the address.
     * @type {string}
     * @memberof ServiceContact
     */
    addressPostalCode?: string;
    /**
     * The country portion of the address.
     * @type {string}
     * @memberof ServiceContact
     */
    addressCountry?: string;
    /**
     * The phone number of the contact.
     * @type {string}
     * @memberof ServiceContact
     */
    phoneNumber?: string;
    /**
     * The fax number of the contact.
     * @type {string}
     * @memberof ServiceContact
     */
    faxNumber?: string;
    /**
     * The email of the contact.
     * @type {string}
     * @memberof ServiceContact
     */
    addressEmail?: string;
}
/**
 * Service information such as you or your company\'s details that you want provided in capabilities documents.
 * @export
 * @interface ServiceInformation
 */
export interface ServiceInformation {
    /**
     * The title of the server.
     * @type {string}
     * @memberof ServiceInformation
     */
    title?: string;
    /**
     * The description of the server.
     * @type {string}
     * @memberof ServiceInformation
     */
    description?: string;
    /**
     * List of keywords for the server
     * @type {Array<string>}
     * @memberof ServiceInformation
     */
    keywords?: Array<string>;
    /**
     * 
     * @type {ServiceProvider}
     * @memberof ServiceInformation
     */
    serviceProvider?: ServiceProvider;
    /**
     * Any fees associated with the server.
     * @type {string}
     * @memberof ServiceInformation
     */
    fees?: string;
    /**
     * Any access constraints associated with the server.
     * @type {string}
     * @memberof ServiceInformation
     */
    accessConstraints?: string;
}
/**
 * Information about the entity which provides this GeoWebCache service.
 * @export
 * @interface ServiceProvider
 */
export interface ServiceProvider {
    /**
     * The name of the entity providing the service.
     * @type {string}
     * @memberof ServiceProvider
     */
    providerName?: string;
    /**
     * The website of the entity providing the service.
     * @type {string}
     * @memberof ServiceProvider
     */
    providerSite?: string;
    /**
     * 
     * @type {ServiceContact}
     * @memberof ServiceProvider
     */
    serviceContact?: ServiceContact;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves configuration details about the GeoWebCache server as a whole.
         * @summary Retrieve the global server configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/global`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update one or more global configuration values
         * @summary Modifies the global configuration.
         * @param {Global} body The modified global configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalPut: async (body: Global, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling globalPut.');
            }
            const localVarPath = `/global`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves configuration details about the GeoWebCache server as a whole.
         * @summary Retrieve the global server configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async globalGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Global>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).globalGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update one or more global configuration values
         * @summary Modifies the global configuration.
         * @param {Global} body The modified global configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async globalPut(body: Global, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).globalPut(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves configuration details about the GeoWebCache server as a whole.
         * @summary Retrieve the global server configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalGet(options?: any): AxiosPromise<Global> {
            return DefaultApiFp(configuration).globalGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update one or more global configuration values
         * @summary Modifies the global configuration.
         * @param {Global} body The modified global configuration.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalPut(body: Global, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).globalPut(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Retrieves configuration details about the GeoWebCache server as a whole.
     * @summary Retrieve the global server configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    globalGet(options?: any): AxiosPromise<Global>;

    /**
     * Update one or more global configuration values
     * @summary Modifies the global configuration.
     * @param {Global} body The modified global configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    globalPut(body: Global, options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Retrieves configuration details about the GeoWebCache server as a whole.
     * @summary Retrieve the global server configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public globalGet(options?: any) {
        return DefaultApiFp(this.configuration).globalGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update one or more global configuration values
     * @summary Modifies the global configuration.
     * @param {Global} body The modified global configuration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public globalPut(body: Global, options?: any) {
        return DefaultApiFp(this.configuration).globalPut(body, options).then((request) => request(this.axios, this.basePath));
    }

}


