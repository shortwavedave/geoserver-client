// tslint:disable
/**
 * GeoServer XSLT transforms
 * A transform contains a style sheet that can be used to generate a new textual output format of user choosing for WFS
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Transform
 */
export interface Transform {
    /**
     * Name of the transformation
     * @type {string}
     * @memberof Transform
     */
    name?: string;
    /**
     * Source format accepted by the transformation
     * @type {string}
     * @memberof Transform
     */
    sourceFormat?: string;
    /**
     * Output format produced by the transformation
     * @type {string}
     * @memberof Transform
     */
    outputFormat?: string;
    /**
     * Style sheet associated with the transformation
     * @type {string}
     * @memberof Transform
     */
    xslt?: string;
}
/**
 * 
 * @export
 * @interface TransformListItem
 */
export interface TransformListItem {
    /**
     * Name of the transformation
     * @type {string}
     * @memberof TransformListItem
     */
    name?: string;
    /**
     * URL to the transformation
     * @type {string}
     * @memberof TransformListItem
     */
    href?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a transformation.
         * @summary Delete transformation
         * @param {string} transform Name of the transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTranform: async (transform: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transform' is not null or undefined
            if (transform === null || transform === undefined) {
                throw new RequiredError('transform','Required parameter transform was null or undefined when calling deleteTranform.');
            }
            const localVarPath = `/services/wfs/transforms/{transform}`
                .replace(`{${"transform"}}`, encodeURIComponent(String(transform)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransform: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wfs/transforms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single transformation.
         * @summary Retrieve a transformation.
         * @param {string} transform Name of the transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransform: async (transform: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transform' is not null or undefined
            if (transform === null || transform === undefined) {
                throw new RequiredError('transform','Required parameter transform was null or undefined when calling getTransform.');
            }
            const localVarPath = `/services/wfs/transforms/{transform}`
                .replace(`{${"transform"}}`, encodeURIComponent(String(transform)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays a list of all the transforms information available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).
         * @summary List available transformations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransforms: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wfs/transforms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTranform: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wfs/transforms/{transform}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new transform to the server. If the content type used is application/xml the server will assume a <transform> definition is being posted, and the XSLT will have to be uploaded separately using a PUT request with content type application/xslt+xml against the transformation resource. If the content type used is application/xslt+xml the server will assume the XSLT itself is being posted, and the name, sourceFormat, outputFormat, outputMimeType query parameters will be used to fill in the transform configuration instead.
         * @summary Add a new transform
         * @param {Transform} transformBody Transform body to upload.
         * @param {string} [name] Name of the transformation.
         * @param {string} [sourceFormat] Source format of the transformation.
         * @param {string} [outputFormat] Output format of the transformation.
         * @param {string} [outputMimeType] Output mime type of the transformation.
         * @param {string} [fileExtension] The extension of the file generated by the transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTransform: async (transformBody: Transform, name?: string, sourceFormat?: string, outputFormat?: string, outputMimeType?: string, fileExtension?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transformBody' is not null or undefined
            if (transformBody === null || transformBody === undefined) {
                throw new RequiredError('transformBody','Required parameter transformBody was null or undefined when calling postTransform.');
            }
            const localVarPath = `/services/wfs/transforms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (sourceFormat !== undefined) {
                localVarQueryParameter['sourceFormat'] = sourceFormat;
            }

            if (outputFormat !== undefined) {
                localVarQueryParameter['outputFormat'] = outputFormat;
            }

            if (outputMimeType !== undefined) {
                localVarQueryParameter['outputMimeType'] = outputMimeType;
            }

            if (fileExtension !== undefined) {
                localVarQueryParameter['fileExtension'] = fileExtension;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof transformBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transformBody !== undefined ? transformBody : {}) : (transformBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies a single transform.
         * @summary Modify a single transform
         * @param {string} transform Name of the transformation.
         * @param {Transform} transformBody Transform body to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTranform: async (transform: string, transformBody: Transform, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'transform' is not null or undefined
            if (transform === null || transform === undefined) {
                throw new RequiredError('transform','Required parameter transform was null or undefined when calling putTranform.');
            }
            // verify required parameter 'transformBody' is not null or undefined
            if (transformBody === null || transformBody === undefined) {
                throw new RequiredError('transformBody','Required parameter transformBody was null or undefined when calling putTranform.');
            }
            const localVarPath = `/services/wfs/transforms/{transform}`
                .replace(`{${"transform"}}`, encodeURIComponent(String(transform)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof transformBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(transformBody !== undefined ? transformBody : {}) : (transformBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTransform: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/wfs/transforms`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a transformation.
         * @summary Delete transformation
         * @param {string} transform Name of the transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTranform(transform: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteTranform(transform, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTransform(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteTransform(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a single transformation.
         * @summary Retrieve a transformation.
         * @param {string} transform Name of the transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransform(transform: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transform>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTransform(transform, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Displays a list of all the transforms information available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).
         * @summary List available transformations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransforms(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TransformListItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getTransforms(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTranform(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postTranform(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Adds a new transform to the server. If the content type used is application/xml the server will assume a <transform> definition is being posted, and the XSLT will have to be uploaded separately using a PUT request with content type application/xslt+xml against the transformation resource. If the content type used is application/xslt+xml the server will assume the XSLT itself is being posted, and the name, sourceFormat, outputFormat, outputMimeType query parameters will be used to fill in the transform configuration instead.
         * @summary Add a new transform
         * @param {Transform} transformBody Transform body to upload.
         * @param {string} [name] Name of the transformation.
         * @param {string} [sourceFormat] Source format of the transformation.
         * @param {string} [outputFormat] Output format of the transformation.
         * @param {string} [outputMimeType] Output mime type of the transformation.
         * @param {string} [fileExtension] The extension of the file generated by the transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTransform(transformBody: Transform, name?: string, sourceFormat?: string, outputFormat?: string, outputMimeType?: string, fileExtension?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postTransform(transformBody, name, sourceFormat, outputFormat, outputMimeType, fileExtension, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies a single transform.
         * @summary Modify a single transform
         * @param {string} transform Name of the transformation.
         * @param {Transform} transformBody Transform body to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTranform(transform: string, transformBody: Transform, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putTranform(transform, transformBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTransform(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putTransform(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a transformation.
         * @summary Delete transformation
         * @param {string} transform Name of the transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTranform(transform: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteTranform(transform, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTransform(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteTransform(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single transformation.
         * @summary Retrieve a transformation.
         * @param {string} transform Name of the transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransform(transform: string, options?: any): AxiosPromise<Transform> {
            return DefaultApiFp(configuration).getTransform(transform, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays a list of all the transforms information available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).
         * @summary List available transformations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransforms(options?: any): AxiosPromise<Array<TransformListItem>> {
            return DefaultApiFp(configuration).getTransforms(options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTranform(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postTranform(options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new transform to the server. If the content type used is application/xml the server will assume a <transform> definition is being posted, and the XSLT will have to be uploaded separately using a PUT request with content type application/xslt+xml against the transformation resource. If the content type used is application/xslt+xml the server will assume the XSLT itself is being posted, and the name, sourceFormat, outputFormat, outputMimeType query parameters will be used to fill in the transform configuration instead.
         * @summary Add a new transform
         * @param {Transform} transformBody Transform body to upload.
         * @param {string} [name] Name of the transformation.
         * @param {string} [sourceFormat] Source format of the transformation.
         * @param {string} [outputFormat] Output format of the transformation.
         * @param {string} [outputMimeType] Output mime type of the transformation.
         * @param {string} [fileExtension] The extension of the file generated by the transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTransform(transformBody: Transform, name?: string, sourceFormat?: string, outputFormat?: string, outputMimeType?: string, fileExtension?: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postTransform(transformBody, name, sourceFormat, outputFormat, outputMimeType, fileExtension, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies a single transform.
         * @summary Modify a single transform
         * @param {string} transform Name of the transformation.
         * @param {Transform} transformBody Transform body to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTranform(transform: string, transformBody: Transform, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putTranform(transform, transformBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new transformation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTransform(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putTransform(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Deletes a transformation.
     * @summary Delete transformation
     * @param {string} transform Name of the transformation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteTranform(transform: string, options?: any): AxiosPromise<void>;

    /**
     * Invalid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteTransform(options?: any): AxiosPromise<void>;

    /**
     * Retrieves a single transformation.
     * @summary Retrieve a transformation.
     * @param {string} transform Name of the transformation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTransform(transform: string, options?: any): AxiosPromise<Transform>;

    /**
     * Displays a list of all the transforms information available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).
     * @summary List available transformations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getTransforms(options?: any): AxiosPromise<Array<TransformListItem>>;

    /**
     * Invalid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postTranform(options?: any): AxiosPromise<void>;

    /**
     * Adds a new transform to the server. If the content type used is application/xml the server will assume a <transform> definition is being posted, and the XSLT will have to be uploaded separately using a PUT request with content type application/xslt+xml against the transformation resource. If the content type used is application/xslt+xml the server will assume the XSLT itself is being posted, and the name, sourceFormat, outputFormat, outputMimeType query parameters will be used to fill in the transform configuration instead.
     * @summary Add a new transform
     * @param {Transform} transformBody Transform body to upload.
     * @param {string} [name] Name of the transformation.
     * @param {string} [sourceFormat] Source format of the transformation.
     * @param {string} [outputFormat] Output format of the transformation.
     * @param {string} [outputMimeType] Output mime type of the transformation.
     * @param {string} [fileExtension] The extension of the file generated by the transformation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postTransform(transformBody: Transform, name?: string, sourceFormat?: string, outputFormat?: string, outputMimeType?: string, fileExtension?: string, options?: any): AxiosPromise<void>;

    /**
     * Modifies a single transform.
     * @summary Modify a single transform
     * @param {string} transform Name of the transformation.
     * @param {Transform} transformBody Transform body to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putTranform(transform: string, transformBody: Transform, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new transformation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putTransform(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Deletes a transformation.
     * @summary Delete transformation
     * @param {string} transform Name of the transformation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTranform(transform: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteTranform(transform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTransform(options?: any) {
        return DefaultApiFp(this.configuration).deleteTransform(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single transformation.
     * @summary Retrieve a transformation.
     * @param {string} transform Name of the transformation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTransform(transform: string, options?: any) {
        return DefaultApiFp(this.configuration).getTransform(transform, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays a list of all the transforms information available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/styles.xml\" for XML).
     * @summary List available transformations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTransforms(options?: any) {
        return DefaultApiFp(this.configuration).getTransforms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postTranform(options?: any) {
        return DefaultApiFp(this.configuration).postTranform(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a new transform to the server. If the content type used is application/xml the server will assume a <transform> definition is being posted, and the XSLT will have to be uploaded separately using a PUT request with content type application/xslt+xml against the transformation resource. If the content type used is application/xslt+xml the server will assume the XSLT itself is being posted, and the name, sourceFormat, outputFormat, outputMimeType query parameters will be used to fill in the transform configuration instead.
     * @summary Add a new transform
     * @param {Transform} transformBody Transform body to upload.
     * @param {string} [name] Name of the transformation.
     * @param {string} [sourceFormat] Source format of the transformation.
     * @param {string} [outputFormat] Output format of the transformation.
     * @param {string} [outputMimeType] Output mime type of the transformation.
     * @param {string} [fileExtension] The extension of the file generated by the transformation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postTransform(transformBody: Transform, name?: string, sourceFormat?: string, outputFormat?: string, outputMimeType?: string, fileExtension?: string, options?: any) {
        return DefaultApiFp(this.configuration).postTransform(transformBody, name, sourceFormat, outputFormat, outputMimeType, fileExtension, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies a single transform.
     * @summary Modify a single transform
     * @param {string} transform Name of the transformation.
     * @param {Transform} transformBody Transform body to upload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putTranform(transform: string, transformBody: Transform, options?: any) {
        return DefaultApiFp(this.configuration).putTranform(transform, transformBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new transformation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putTransform(options?: any) {
        return DefaultApiFp(this.configuration).putTransform(options).then((request) => request(this.axios, this.basePath));
    }

}


