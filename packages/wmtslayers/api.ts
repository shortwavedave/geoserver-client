// tslint:disable
/**
 * GeoServer WMTS Store Layers
 * A WMTS store is a store whose source is a remote WMTS service. Also known as \"Cascading WMTS\". A WMTS store layer is a layer from this store.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: geoserver-users@sourceforge.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MetadataEntry
 */
export interface MetadataEntry {
    /**
     * Key used for metadata entry
     * @type {string}
     * @memberof MetadataEntry
     */
    key?: MetadataEntryKeyEnum;
    /**
     * Value of given key
     * @type {string}
     * @memberof MetadataEntry
     */
    text?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MetadataEntryKeyEnum {
    RegionateStrategy = 'regionateStrategy',
    RegionateFeatureLimit = 'regionateFeatureLimit',
    CacheAgeMax = 'cacheAgeMax',
    CachingEnabled = 'cachingEnabled',
    RegionateAttribute = 'regionateAttribute',
    IndexingEnabled = 'indexingEnabled',
    DirName = 'dirName'
}

/**
 * 
 * @export
 * @interface WMTSStoreLayerInfo
 */
export interface WMTSStoreLayerInfo {
    /**
     * Name of the layer, corresponding to the published name of the resource
     * @type {string}
     * @memberof WMTSStoreLayerInfo
     */
    name?: string;
    /**
     * Name of the layer as known on the remote WMTS
     * @type {string}
     * @memberof WMTSStoreLayerInfo
     */
    nativeName?: string;
    /**
     * 
     * @type {WMTSStoreLayerInfoNamespace}
     * @memberof WMTSStoreLayerInfo
     */
    namespace?: WMTSStoreLayerInfoNamespace;
    /**
     * Title of the layer
     * @type {string}
     * @memberof WMTSStoreLayerInfo
     */
    title?: string;
    /**
     * Description of the layer
     * @type {string}
     * @memberof WMTSStoreLayerInfo
     */
    _abstract?: string;
    /**
     * Same as abstract
     * @type {string}
     * @memberof WMTSStoreLayerInfo
     */
    description?: string;
    /**
     * Collection of keywords associated with the layer
     * @type {Array<WMTSStoreLayerInfoKeywords>}
     * @memberof WMTSStoreLayerInfo
     */
    keywords?: Array<WMTSStoreLayerInfoKeywords>;
    /**
     * 
     * @type {WMTSStoreLayerInfoMetadatalinks}
     * @memberof WMTSStoreLayerInfo
     */
    metadatalinks?: WMTSStoreLayerInfoMetadatalinks;
    /**
     * 
     * @type {WMTSStoreLayerInfoDataLinks}
     * @memberof WMTSStoreLayerInfo
     */
    dataLinks?: WMTSStoreLayerInfoDataLinks;
    /**
     * Native coordinate reference system object in WKT
     * @type {string}
     * @memberof WMTSStoreLayerInfo
     */
    nativeCRS?: string;
    /**
     * Identifier of coordinate reference system
     * @type {string}
     * @memberof WMTSStoreLayerInfo
     */
    srs?: string;
    /**
     * 
     * @type {WMTSStoreLayerInfoNativeBoundingBox}
     * @memberof WMTSStoreLayerInfo
     */
    nativeBoundingBox?: WMTSStoreLayerInfoNativeBoundingBox;
    /**
     * 
     * @type {WMTSStoreLayerInfoLatLonBoundingBox}
     * @memberof WMTSStoreLayerInfo
     */
    latLonBoundingBox?: WMTSStoreLayerInfoLatLonBoundingBox;
    /**
     * How to handle the coordinate reference system (native versus declared)
     * @type {string}
     * @memberof WMTSStoreLayerInfo
     */
    projectionPolicy?: WMTSStoreLayerInfoProjectionPolicyEnum;
    /**
     * Whether the layer is enabled
     * @type {boolean}
     * @memberof WMTSStoreLayerInfo
     */
    enabled?: boolean;
    /**
     * A list of key/value metadata pairs.
     * @type {Array<MetadataEntry>}
     * @memberof WMTSStoreLayerInfo
     */
    metadata?: Array<MetadataEntry>;
    /**
     * 
     * @type {WMTSStoreLayerInfoStore}
     * @memberof WMTSStoreLayerInfo
     */
    store?: WMTSStoreLayerInfoStore;
}

/**
    * @export
    * @enum {string}
    */
export enum WMTSStoreLayerInfoProjectionPolicyEnum {
    FORCEDECLARED = 'FORCE_DECLARED',
    REPROJECTTODECLARE = 'REPROJECT_TO_DECLARE',
    NONE = 'NONE'
}

/**
 * Wraps a collection of data links
 * @export
 * @interface WMTSStoreLayerInfoDataLinks
 */
export interface WMTSStoreLayerInfoDataLinks {
    /**
     * Collection of data links
     * @type {Array<WMTSStoreLayerInfoDataLinksMetadataLink>}
     * @memberof WMTSStoreLayerInfoDataLinks
     */
    metadataLink?: Array<WMTSStoreLayerInfoDataLinksMetadataLink>;
}
/**
 * 
 * @export
 * @interface WMTSStoreLayerInfoDataLinksMetadataLink
 */
export interface WMTSStoreLayerInfoDataLinksMetadataLink {
    /**
     * MIME type
     * @type {string}
     * @memberof WMTSStoreLayerInfoDataLinksMetadataLink
     */
    type?: string;
    /**
     * Link URL
     * @type {string}
     * @memberof WMTSStoreLayerInfoDataLinksMetadataLink
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface WMTSStoreLayerInfoKeywords
 */
export interface WMTSStoreLayerInfoKeywords {
    /**
     * Keyword
     * @type {string}
     * @memberof WMTSStoreLayerInfoKeywords
     */
    string?: string;
}
/**
 * Bounds of the layer in latitude / longitude. This value represents a \"fixed value\" and is not calculated.
 * @export
 * @interface WMTSStoreLayerInfoLatLonBoundingBox
 */
export interface WMTSStoreLayerInfoLatLonBoundingBox {
    /**
     * Min x coordinate
     * @type {number}
     * @memberof WMTSStoreLayerInfoLatLonBoundingBox
     */
    minx?: number;
    /**
     * Max x coordinate
     * @type {number}
     * @memberof WMTSStoreLayerInfoLatLonBoundingBox
     */
    maxx?: number;
    /**
     * Min y coordinate
     * @type {number}
     * @memberof WMTSStoreLayerInfoLatLonBoundingBox
     */
    miny?: number;
    /**
     * Max y coordinate
     * @type {number}
     * @memberof WMTSStoreLayerInfoLatLonBoundingBox
     */
    maxy?: number;
    /**
     * Coordinate reference system object of the bounding box
     * @type {string}
     * @memberof WMTSStoreLayerInfoLatLonBoundingBox
     */
    crs?: string;
}
/**
 * Wraps a collection of metadata links
 * @export
 * @interface WMTSStoreLayerInfoMetadatalinks
 */
export interface WMTSStoreLayerInfoMetadatalinks {
    /**
     * A collection of metadata links
     * @type {Array<WMTSStoreLayerInfoMetadatalinksMetadataLink>}
     * @memberof WMTSStoreLayerInfoMetadatalinks
     */
    metadataLink?: Array<WMTSStoreLayerInfoMetadatalinksMetadataLink>;
}
/**
 * 
 * @export
 * @interface WMTSStoreLayerInfoMetadatalinksMetadataLink
 */
export interface WMTSStoreLayerInfoMetadatalinksMetadataLink {
    /**
     * MIME type
     * @type {string}
     * @memberof WMTSStoreLayerInfoMetadatalinksMetadataLink
     */
    type?: string;
    /**
     * Type of metadata such as \"FGDC\"
     * @type {string}
     * @memberof WMTSStoreLayerInfoMetadatalinksMetadataLink
     */
    metadataType?: string;
    /**
     * Link URL
     * @type {string}
     * @memberof WMTSStoreLayerInfoMetadatalinksMetadataLink
     */
    content?: string;
}
/**
 * Namespace of the layer
 * @export
 * @interface WMTSStoreLayerInfoNamespace
 */
export interface WMTSStoreLayerInfoNamespace {
    /**
     * Name of the namespace
     * @type {string}
     * @memberof WMTSStoreLayerInfoNamespace
     */
    name?: string;
    /**
     * URL to the namespace representation.
     * @type {string}
     * @memberof WMTSStoreLayerInfoNamespace
     */
    link?: string;
}
/**
 * Bounds of the layer in its declared CRS.
 * @export
 * @interface WMTSStoreLayerInfoNativeBoundingBox
 */
export interface WMTSStoreLayerInfoNativeBoundingBox {
    /**
     * Min x coordinate
     * @type {number}
     * @memberof WMTSStoreLayerInfoNativeBoundingBox
     */
    minx?: number;
    /**
     * Max x coordinate
     * @type {number}
     * @memberof WMTSStoreLayerInfoNativeBoundingBox
     */
    maxx?: number;
    /**
     * Min y coordinate
     * @type {number}
     * @memberof WMTSStoreLayerInfoNativeBoundingBox
     */
    miny?: number;
    /**
     * Max y coordinate
     * @type {number}
     * @memberof WMTSStoreLayerInfoNativeBoundingBox
     */
    maxy?: number;
    /**
     * Coordinate reference system of the bounding box
     * @type {string}
     * @memberof WMTSStoreLayerInfoNativeBoundingBox
     */
    crs?: string;
}
/**
 * Store conaining the resource
 * @export
 * @interface WMTSStoreLayerInfoStore
 */
export interface WMTSStoreLayerInfoStore {
    /**
     * Class of the store
     * @type {string}
     * @memberof WMTSStoreLayerInfoStore
     */
    _class?: string;
    /**
     * Name of the store
     * @type {string}
     * @memberof WMTSStoreLayerInfoStore
     */
    name?: string;
    /**
     * URL to the data store
     * @type {string}
     * @memberof WMTSStoreLayerInfoStore
     */
    href?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmtslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStoreLayer: async (workspace: string, wmtslayer: string, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWMTSStoreLayer.');
            }
            // verify required parameter 'wmtslayer' is not null or undefined
            if (wmtslayer === null || wmtslayer === undefined) {
                throw new RequiredError('wmtslayer','Required parameter wmtslayer was null or undefined when calling deleteWMTSStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtslayers/{wmtslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmtslayer"}}`, encodeURIComponent(String(wmtslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStoreLayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmtslayers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {string} wmtslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmtslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStoreStoreLayer: async (workspace: string, wmtsstore: string, wmtslayer: string, recurse?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling deleteWMTSStoreStoreLayer.');
            }
            // verify required parameter 'wmtsstore' is not null or undefined
            if (wmtsstore === null || wmtsstore === undefined) {
                throw new RequiredError('wmtsstore','Required parameter wmtsstore was null or undefined when calling deleteWMTSStoreStoreLayer.');
            }
            // verify required parameter 'wmtslayer' is not null or undefined
            if (wmtslayer === null || wmtslayer === undefined) {
                throw new RequiredError('wmtslayer','Required parameter wmtslayer was null or undefined when calling deleteWMTSStoreStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{wmtsstore}/layers/{wmtslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmtsstore"}}`, encodeURIComponent(String(wmtsstore)))
                .replace(`{${"wmtslayer"}}`, encodeURIComponent(String(wmtslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recurse !== undefined) {
                localVarQueryParameter['recurse'] = recurse;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStoreStoreLayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{wmtsstore}/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an individual WMTS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtslayers/{wmtslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmtslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStoreLayer: async (workspace: string, wmtslayer: string, quietOnNotFound?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWMTSStoreLayer.');
            }
            // verify required parameter 'wmtslayer' is not null or undefined
            if (wmtslayer === null || wmtslayer === undefined) {
                throw new RequiredError('wmtslayer','Required parameter wmtslayer was null or undefined when calling getWMTSStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtslayers/{wmtslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmtslayer"}}`, encodeURIComponent(String(wmtslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quietOnNotFound !== undefined) {
                localVarQueryParameter['quietOnNotFound'] = quietOnNotFound;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the WMTS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtslayers\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStoreLayers: async (workspace: string, list?: 'available' | 'configured', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWMTSStoreLayers.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtslayers`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an individual WMTS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers/{wmtslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {string} wtmslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStoreStoreLayer: async (workspace: string, wmtsstore: string, wtmslayer: string, quietOnNotFound?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWMTSStoreStoreLayer.');
            }
            // verify required parameter 'wmtsstore' is not null or undefined
            if (wmtsstore === null || wmtsstore === undefined) {
                throw new RequiredError('wmtsstore','Required parameter wmtsstore was null or undefined when calling getWMTSStoreStoreLayer.');
            }
            // verify required parameter 'wtmslayer' is not null or undefined
            if (wtmslayer === null || wtmslayer === undefined) {
                throw new RequiredError('wtmslayer','Required parameter wtmslayer was null or undefined when calling getWMTSStoreStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{wmtsstore}/layers/{wmtslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmtsstore"}}`, encodeURIComponent(String(wmtsstore)))
                .replace(`{${"wtmslayer"}}`, encodeURIComponent(String(wtmslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quietOnNotFound !== undefined) {
                localVarQueryParameter['quietOnNotFound'] = quietOnNotFound;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the WMTS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStoreStoreLayers: async (workspace: string, wmtsstore: string, list?: 'available' | 'configured', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling getWMTSStoreStoreLayers.');
            }
            // verify required parameter 'wmtsstore' is not null or undefined
            if (wmtsstore === null || wmtsstore === undefined) {
                throw new RequiredError('wmtsstore','Required parameter wmtsstore was null or undefined when calling getWMTSStoreStoreLayers.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{wmtsstore}/layers`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmtsstore"}}`, encodeURIComponent(String(wmtsstore)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStoreLayer: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmtslayers/{wmtslayer}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes a new WMTS store layer.
         * @param {string} workspace Name of the workspace
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStoreLayers: async (workspace: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWMTSStoreLayers.');
            }
            // verify required parameter 'wMTSStoreLayerBody' is not null or undefined
            if (wMTSStoreLayerBody === null || wMTSStoreLayerBody === undefined) {
                throw new RequiredError('wMTSStoreLayerBody','Required parameter wMTSStoreLayerBody was null or undefined when calling postWMTSStoreLayers.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtslayers`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMTSStoreLayerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMTSStoreLayerBody !== undefined ? wMTSStoreLayerBody : {}) : (wMTSStoreLayerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStoreStoreLayer: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{wmtsstore}/layers/{wmtslayer}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Publishes a new WMTS store layer in the given store.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the data store
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStoreStoreLayers: async (workspace: string, wmtsstore: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling postWMTSStoreStoreLayers.');
            }
            // verify required parameter 'wmtsstore' is not null or undefined
            if (wmtsstore === null || wmtsstore === undefined) {
                throw new RequiredError('wmtsstore','Required parameter wmtsstore was null or undefined when calling postWMTSStoreStoreLayers.');
            }
            // verify required parameter 'wMTSStoreLayerBody' is not null or undefined
            if (wMTSStoreLayerBody === null || wMTSStoreLayerBody === undefined) {
                throw new RequiredError('wMTSStoreLayerBody','Required parameter wMTSStoreLayerBody was null or undefined when calling postWMTSStoreStoreLayers.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{wmtsstore}/layers`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmtsstore"}}`, encodeURIComponent(String(wmtsstore)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMTSStoreLayerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMTSStoreLayerBody !== undefined ? wMTSStoreLayerBody : {}) : (wMTSStoreLayerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits an existing WMTS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtslayer Name of the layer to be edited
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wmtWMTSs layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStoreLayer: async (workspace: string, wmtslayer: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWMTSStoreLayer.');
            }
            // verify required parameter 'wmtslayer' is not null or undefined
            if (wmtslayer === null || wmtslayer === undefined) {
                throw new RequiredError('wmtslayer','Required parameter wmtslayer was null or undefined when calling putWMTSStoreLayer.');
            }
            // verify required parameter 'wMTSStoreLayerBody' is not null or undefined
            if (wMTSStoreLayerBody === null || wMTSStoreLayerBody === undefined) {
                throw new RequiredError('wMTSStoreLayerBody','Required parameter wMTSStoreLayerBody was null or undefined when calling putWMTSStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtslayers/{wmtslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmtslayer"}}`, encodeURIComponent(String(wmtslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (calculate) {
                localVarQueryParameter['calculate'] = calculate.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMTSStoreLayerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMTSStoreLayerBody !== undefined ? wMTSStoreLayerBody : {}) : (wMTSStoreLayerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStoreLayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmtslayers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edits an existing WMTS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {string} wmtslayer Name of the layer to be edited
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wmts layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStoreStoreLayer: async (workspace: string, wmtsstore: string, wmtslayer: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            if (workspace === null || workspace === undefined) {
                throw new RequiredError('workspace','Required parameter workspace was null or undefined when calling putWMTSStoreStoreLayer.');
            }
            // verify required parameter 'wmtsstore' is not null or undefined
            if (wmtsstore === null || wmtsstore === undefined) {
                throw new RequiredError('wmtsstore','Required parameter wmtsstore was null or undefined when calling putWMTSStoreStoreLayer.');
            }
            // verify required parameter 'wmtslayer' is not null or undefined
            if (wmtslayer === null || wmtslayer === undefined) {
                throw new RequiredError('wmtslayer','Required parameter wmtslayer was null or undefined when calling putWMTSStoreStoreLayer.');
            }
            // verify required parameter 'wMTSStoreLayerBody' is not null or undefined
            if (wMTSStoreLayerBody === null || wMTSStoreLayerBody === undefined) {
                throw new RequiredError('wMTSStoreLayerBody','Required parameter wMTSStoreLayerBody was null or undefined when calling putWMTSStoreStoreLayer.');
            }
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{wmtsstore}/layers/{wmtslayer}`
                .replace(`{${"workspace"}}`, encodeURIComponent(String(workspace)))
                .replace(`{${"wmtsstore"}}`, encodeURIComponent(String(wmtsstore)))
                .replace(`{${"wmtslayer"}}`, encodeURIComponent(String(wmtslayer)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (calculate) {
                localVarQueryParameter['calculate'] = calculate.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof wMTSStoreLayerBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(wMTSStoreLayerBody !== undefined ? wMTSStoreLayerBody : {}) : (wMTSStoreLayerBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStoreStoreLayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces/{workspace}/wmtsstores/{wmtsstore}/layers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmtslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMTSStoreLayer(workspace: string, wmtslayer: string, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMTSStoreLayer(workspace, wmtslayer, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMTSStoreLayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMTSStoreLayers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {string} wmtslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmtslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wmtslayer: string, recurse?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMTSStoreStoreLayer(workspace, wmtsstore, wmtslayer, recurse, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWMTSStoreStoreLayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteWMTSStoreStoreLayers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves an individual WMTS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtslayers/{wmtslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmtslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMTSStoreLayer(workspace: string, wmtslayer: string, quietOnNotFound?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WMTSStoreLayerInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMTSStoreLayer(workspace, wmtslayer, quietOnNotFound, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the WMTS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtslayers\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMTSStoreLayers(workspace: string, list?: 'available' | 'configured', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMTSStoreLayers(workspace, list, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves an individual WMTS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers/{wmtslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {string} wtmslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wtmslayer: string, quietOnNotFound?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WMTSStoreLayerInfo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMTSStoreStoreLayer(workspace, wmtsstore, wtmslayer, quietOnNotFound, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the WMTS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWMTSStoreStoreLayers(workspace: string, wmtsstore: string, list?: 'available' | 'configured', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getWMTSStoreStoreLayers(workspace, wmtsstore, list, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMTSStoreLayer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMTSStoreLayer(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Publishes a new WMTS store layer.
         * @param {string} workspace Name of the workspace
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMTSStoreLayers(workspace: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMTSStoreLayers(workspace, wMTSStoreLayerBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMTSStoreStoreLayer(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMTSStoreStoreLayer(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Publishes a new WMTS store layer in the given store.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the data store
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postWMTSStoreStoreLayers(workspace: string, wmtsstore: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postWMTSStoreStoreLayers(workspace, wmtsstore, wMTSStoreLayerBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits an existing WMTS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtslayer Name of the layer to be edited
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wmtWMTSs layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMTSStoreLayer(workspace: string, wmtslayer: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMTSStoreLayer(workspace, wmtslayer, wMTSStoreLayerBody, calculate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMTSStoreLayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMTSStoreLayers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Edits an existing WMTS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {string} wmtslayer Name of the layer to be edited
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wmts layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wmtslayer: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMTSStoreStoreLayer(workspace, wmtsstore, wmtslayer, wMTSStoreLayerBody, calculate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putWMTSStoreStoreLayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putWMTSStoreStoreLayers(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmtslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStoreLayer(workspace: string, wmtslayer: string, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMTSStoreLayer(workspace, wmtslayer, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStoreLayers(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMTSStoreLayers(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a layer from the server.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {string} wmtslayer Name of the layer to be deleted
         * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmtslayer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wmtslayer: string, recurse?: boolean, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMTSStoreStoreLayer(workspace, wmtsstore, wmtslayer, recurse, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Can only delete an individual layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWMTSStoreStoreLayers(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteWMTSStoreStoreLayers(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an individual WMTS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtslayers/{wmtslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmtslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStoreLayer(workspace: string, wmtslayer: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WMTSStoreLayerInfo> {
            return DefaultApiFp(configuration).getWMTSStoreLayer(workspace, wmtslayer, quietOnNotFound, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the WMTS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtslayers\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStoreLayers(workspace: string, list?: 'available' | 'configured', options?: any): AxiosPromise<Array<object>> {
            return DefaultApiFp(configuration).getWMTSStoreLayers(workspace, list, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an individual WMTS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers/{wmtslayer}.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {string} wtmslayer Name of the layer
         * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wtmslayer: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WMTSStoreLayerInfo> {
            return DefaultApiFp(configuration).getWMTSStoreStoreLayer(workspace, wmtsstore, wtmslayer, quietOnNotFound, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the WMTS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers.xml\" for XML).
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWMTSStoreStoreLayers(workspace: string, wmtsstore: string, list?: 'available' | 'configured', options?: any): AxiosPromise<Array<object>> {
            return DefaultApiFp(configuration).getWMTSStoreStoreLayers(workspace, wmtsstore, list, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStoreLayer(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMTSStoreLayer(options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes a new WMTS store layer.
         * @param {string} workspace Name of the workspace
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStoreLayers(workspace: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMTSStoreLayers(workspace, wMTSStoreLayerBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStoreStoreLayer(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMTSStoreStoreLayer(options).then((request) => request(axios, basePath));
        },
        /**
         * Publishes a new WMTS store layer in the given store.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the data store
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWMTSStoreStoreLayers(workspace: string, wmtsstore: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postWMTSStoreStoreLayers(workspace, wmtsstore, wMTSStoreLayerBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Edits an existing WMTS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtslayer Name of the layer to be edited
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wmtWMTSs layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStoreLayer(workspace: string, wmtslayer: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMTSStoreLayer(workspace, wmtslayer, wMTSStoreLayerBody, calculate, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStoreLayers(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMTSStoreLayers(options).then((request) => request(axios, basePath));
        },
        /**
         * Edits an existing WMTS store layer.
         * @param {string} workspace Name of the workspace
         * @param {string} wmtsstore Name of the store
         * @param {string} wmtslayer Name of the layer to be edited
         * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
         * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wmts layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wmtslayer: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMTSStoreStoreLayer(workspace, wmtsstore, wmtslayer, wMTSStoreLayerBody, calculate, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWMTSStoreStoreLayers(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).putWMTSStoreStoreLayers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Deletes a layer from the server.
     * @param {string} workspace Name of the workspace
     * @param {string} wmtslayer Name of the layer to be deleted
     * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmtslayer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMTSStoreLayer(workspace: string, wmtslayer: string, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Can only delete an individual layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMTSStoreLayers(options?: any): AxiosPromise<void>;

    /**
     * Deletes a layer from the server.
     * @param {string} workspace Name of the workspace
     * @param {string} wmtsstore Name of the store
     * @param {string} wmtslayer Name of the layer to be deleted
     * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmtslayer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wmtslayer: string, recurse?: boolean, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Can only delete an individual layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteWMTSStoreStoreLayers(options?: any): AxiosPromise<void>;

    /**
     * Retrieves an individual WMTS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtslayers/{wmtslayer}.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmtslayer Name of the layer
     * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMTSStoreLayer(workspace: string, wmtslayer: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WMTSStoreLayerInfo>;

    /**
     * Retrieves the WMTS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtslayers\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMTSStoreLayers(workspace: string, list?: 'available' | 'configured', options?: any): AxiosPromise<Array<object>>;

    /**
     * Retrieves an individual WMTS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers/{wmtslayer}.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmtsstore Name of the store
     * @param {string} wtmslayer Name of the layer
     * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wtmslayer: string, quietOnNotFound?: boolean, options?: any): AxiosPromise<WMTSStoreLayerInfo>;

    /**
     * Retrieves the WMTS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmtsstore Name of the store
     * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getWMTSStoreStoreLayers(workspace: string, wmtsstore: string, list?: 'available' | 'configured', options?: any): AxiosPromise<Array<object>>;

    /**
     * Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMTSStoreLayer(options?: any): AxiosPromise<void>;

    /**
     * Publishes a new WMTS store layer.
     * @param {string} workspace Name of the workspace
     * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMTSStoreLayers(workspace: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMTSStoreStoreLayer(options?: any): AxiosPromise<void>;

    /**
     * Publishes a new WMTS store layer in the given store.
     * @param {string} workspace Name of the workspace
     * @param {string} wmtsstore Name of the data store
     * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    postWMTSStoreStoreLayers(workspace: string, wmtsstore: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, options?: any): AxiosPromise<void>;

    /**
     * Edits an existing WMTS store layer.
     * @param {string} workspace Name of the workspace
     * @param {string} wmtslayer Name of the layer to be edited
     * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
     * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wmtWMTSs layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMTSStoreLayer(workspace: string, wmtslayer: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMTSStoreLayers(options?: any): AxiosPromise<void>;

    /**
     * Edits an existing WMTS store layer.
     * @param {string} workspace Name of the workspace
     * @param {string} wmtsstore Name of the store
     * @param {string} wmtslayer Name of the layer to be edited
     * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
     * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wmts layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wmtslayer: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any): AxiosPromise<void>;

    /**
     * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    putWMTSStoreStoreLayers(options?: any): AxiosPromise<void>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Deletes a layer from the server.
     * @param {string} workspace Name of the workspace
     * @param {string} wmtslayer Name of the layer to be deleted
     * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmtslayer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMTSStoreLayer(workspace: string, wmtslayer: string, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteWMTSStoreLayer(workspace, wmtslayer, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Can only delete an individual layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMTSStoreLayers(options?: any) {
        return DefaultApiFp(this.configuration).deleteWMTSStoreLayers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a layer from the server.
     * @param {string} workspace Name of the workspace
     * @param {string} wmtsstore Name of the store
     * @param {string} wmtslayer Name of the layer to be deleted
     * @param {boolean} [recurse] Recursively deletes all layers referenced by the specified wmtslayer. Allowed values for this parameter are true or false. The default value is false. A request with \&#39;recurse&#x3D;false\&#39; will fail if any layers reference the wmtslayer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wmtslayer: string, recurse?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).deleteWMTSStoreStoreLayer(workspace, wmtsstore, wmtslayer, recurse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Can only delete an individual layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteWMTSStoreStoreLayers(options?: any) {
        return DefaultApiFp(this.configuration).deleteWMTSStoreStoreLayers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an individual WMTS layer. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtslayers/{wmtslayer}.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmtslayer Name of the layer
     * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMTSStoreLayer(workspace: string, wmtslayer: string, quietOnNotFound?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getWMTSStoreLayer(workspace, wmtslayer, quietOnNotFound, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the WMTS layers available on the server. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtslayers\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMTSStoreLayers(workspace: string, list?: 'available' | 'configured', options?: any) {
        return DefaultApiFp(this.configuration).getWMTSStoreLayers(workspace, list, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an individual WMTS store layer for a given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers/{wmtslayer}.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmtsstore Name of the store
     * @param {string} wtmslayer Name of the layer
     * @param {boolean} [quietOnNotFound] When set to \&quot;true\&quot;, will not log an exception when the style is not present. The 404 status code will still be returned. Allowable values are \&quot;true\&quot; or \&quot;false\&quot; (default).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wtmslayer: string, quietOnNotFound?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getWMTSStoreStoreLayer(workspace, wmtsstore, wtmslayer, quietOnNotFound, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the WMTS store layers available in the given store. Use the \"Accept:\" header to specify format or append an extension to the endpoint (example \"/workspaces/{workspace}/wmtsstores/{wmtsstore}/wmtslayers.xml\" for XML).
     * @param {string} workspace Name of the workspace
     * @param {string} wmtsstore Name of the store
     * @param {'available' | 'configured'} [list] Set \&quot;list&#x3D;available\&quot; to see all possible layers in the store, not just ones currently published
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWMTSStoreStoreLayers(workspace: string, wmtsstore: string, list?: 'available' | 'configured', options?: any) {
        return DefaultApiFp(this.configuration).getWMTSStoreStoreLayers(workspace, wmtsstore, list, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMTSStoreLayer(options?: any) {
        return DefaultApiFp(this.configuration).postWMTSStoreLayer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publishes a new WMTS store layer.
     * @param {string} workspace Name of the workspace
     * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMTSStoreLayers(workspace: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, options?: any) {
        return DefaultApiFp(this.configuration).postWMTSStoreLayers(workspace, wMTSStoreLayerBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use PUT to edit a layer, or POST on the /wmtslayers endpoint to add a new layer.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMTSStoreStoreLayer(options?: any) {
        return DefaultApiFp(this.configuration).postWMTSStoreStoreLayer(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Publishes a new WMTS store layer in the given store.
     * @param {string} workspace Name of the workspace
     * @param {string} wmtsstore Name of the data store
     * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postWMTSStoreStoreLayers(workspace: string, wmtsstore: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, options?: any) {
        return DefaultApiFp(this.configuration).postWMTSStoreStoreLayers(workspace, wmtsstore, wMTSStoreLayerBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits an existing WMTS store layer.
     * @param {string} workspace Name of the workspace
     * @param {string} wmtslayer Name of the layer to be edited
     * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
     * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wmtWMTSs layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMTSStoreLayer(workspace: string, wmtslayer: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any) {
        return DefaultApiFp(this.configuration).putWMTSStoreLayer(workspace, wmtslayer, wMTSStoreLayerBody, calculate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMTSStoreLayers(options?: any) {
        return DefaultApiFp(this.configuration).putWMTSStoreLayers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edits an existing WMTS store layer.
     * @param {string} workspace Name of the workspace
     * @param {string} wmtsstore Name of the store
     * @param {string} wmtslayer Name of the layer to be edited
     * @param {WMTSStoreLayerInfo} wMTSStoreLayerBody Body of the WMTS store layer
     * @param {Array<'nativebbox' | 'latlonbbox'>} [calculate] Specifies whether to recalculate any bounding boxes for a wmts layer. Some properties are automatically recalculated when necessary. In particular, the native bounding box is recalculated when the projection or projection policy are changed, and the lat/lon bounding box is recalculated when the native bounding box is recalculated, or when a new native bounding box is explicitly provided in the request. (The native and lat/lon bounding boxes are not automatically recalculated when they are explicitly included in the request.) In addition, the client may explicitly request a fixed set of fields to calculate, by including a comma-separated list of their names in the recalculate parameter.  The empty parameter \&#39;recalculate&#x3D;\&#39; is useful avoid slow recalculation when operating against large datasets as \&#39;recalculate&#x3D;\&#39; avoids calculating any fields, regardless of any changes to projection, projection policy, etc. The nativebbox parameter \&#39;recalculate&#x3D;nativebbox\&#39; is used recalculates the native bounding box, while avoiding recalculating the lat/lon bounding box. Recalculate parameters can be used in together - \&#39;recalculate&#x3D;nativebbox,latlonbbox\&#39; can be used after a bulk import to  to recalculates both the native bounding box and the lat/lon bounding box.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMTSStoreStoreLayer(workspace: string, wmtsstore: string, wmtslayer: string, wMTSStoreLayerBody: WMTSStoreLayerInfo, calculate?: Array<'nativebbox' | 'latlonbbox'>, options?: any) {
        return DefaultApiFp(this.configuration).putWMTSStoreStoreLayer(workspace, wmtsstore, wmtslayer, wMTSStoreLayerBody, calculate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalid. Use POST for adding a new layer, or PUT on an individual layer to edit it.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putWMTSStoreStoreLayers(options?: any) {
        return DefaultApiFp(this.configuration).putWMTSStoreStoreLayers(options).then((request) => request(this.axios, this.basePath));
    }

}


